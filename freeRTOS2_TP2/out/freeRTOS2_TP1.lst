
examples/c/sapi/rtos_freertos/dynamic_mem/freeRTOS2_TP1/out/freeRTOS2_TP1.elf:     file format elf32-littlearm
examples/c/sapi/rtos_freertos/dynamic_mem/freeRTOS2_TP1/out/freeRTOS2_TP1.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c2d

Program Header:
0x70000001 off    0x00015acc vaddr 0x1a005acc paddr 0x1a005acc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003164 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005ad4 memsz 0x00005ad4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005ad4 align 2**16
         filesz 0x00000140 memsz 0x00000140 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ac8  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  10000000  1a005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020140  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020140  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020140  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020140  2**2
                  CONTENTS
  6 .bss          00003024  10000140  10000140  00000140  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020140  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020140  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020140  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020140  2**2
                  CONTENTS
 11 .init_array   00000004  1a005ac8  1a005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005acc  1a005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020140  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020140  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020140  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020140  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020140  2**2
                  CONTENTS
 18 .noinit       00000000  10003164  10003164  00020140  2**2
                  CONTENTS
 19 .debug_info   0003109e  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006229  00000000  00000000  000511de  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c23b  00000000  00000000  00057407  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001108  00000000  00000000  00063642  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001220  00000000  00000000  0006474a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0001133b  00000000  00000000  0006596a  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00016006  00000000  00000000  00076ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030d0e  00000000  00000000  0008ccab  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000bd9b9  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000bda38  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003140  00000000  00000000  000bda70  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000140 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005ac8 l    d  .init_array	00000000 .init_array
1a005acc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003164 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0038ac l     F .text	000000a4 uartProcessIRQ
10002fa8 l     O .bss	00000004 rxIsrCallbackUART0
10002fac l     O .bss	00000004 rxIsrCallbackUART2
10002fb0 l     O .bss	00000004 rxIsrCallbackUART3
10002fb4 l     O .bss	00000004 txIsrCallbackUART0
10002fb8 l     O .bss	00000004 txIsrCallbackUART2
10002fbc l     O .bss	00000004 txIsrCallbackUART3
1a00589c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 General.c
10000140 l     O .bss	0000000c Frame_parameters.14661
1000014c l     O .bss	00000001 firstEntry.14666
10000000 l     O .data	00000001 InitTimeFlag.14599
00000000 l    df *ABS*	00000000 Task1.c
10000150 l     O .bss	0000000c Frame_parameters.14625
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 DriverDinamicMemoryRTOS.c
10000160 l     O .bss	00000400 mem_for_small_pool
00000000 l    df *ABS*	00000000 freeRTOS2_01.c
00000000 l    df *ABS*	00000000 system.c
10000560 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a000cd8 l     F .text	00000064 prvHeapInit
10000568 l     O .bss	00002000 ucHeap
1a000d3c l     F .text	00000058 prvInsertBlockIntoFreeList
10000564 l     O .bss	00000004 pxEnd
10002568 l     O .bss	00000004 xBlockAllocatedBit
1000256c l     O .bss	00000004 xFreeBytesRemaining
10002570 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002574 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000f2c l     F .text	0000001e prvIsQueueFull
1a000f4a l     F .text	0000001a prvIsQueueEmpty
1a000f64 l     F .text	00000076 prvCopyDataToQueue
1a000fda l     F .text	00000024 prvCopyDataFromQueue
1a000ffe l     F .text	0000006e prvUnlockQueue
1a0010f0 l     F .text	00000022 prvInitialiseNewQueue
1a00136c l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
1000257c l     O .bss	00000168 uxIdleTaskStack.10728
100026e4 l     O .bss	000005a0 uxTimerTaskStack.10735
10002c84 l     O .bss	00000060 xIdleTaskTCB.10727
10002ce4 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001700 l     F .text	00000014 prvTaskCheckFreeStackSpace
1a001714 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001740 l     F .text	00000092 prvInitialiseNewTask
1a0017d4 l     F .text	00000068 prvInitialiseTaskLists
1a00183c l     F .text	000000ac prvAddNewTaskToReadyList
1a0018e8 l     F .text	00000038 prvDeleteTCB
1a001920 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00196c l     F .text	00000028 prvIdleTask
1a001994 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002d48 l     O .bss	00000004 pxDelayedTaskList
10002d4c l     O .bss	00000004 pxOverflowDelayedTaskList
10002d50 l     O .bss	0000008c pxReadyTasksLists
10002ddc l     O .bss	00000004 uxCurrentNumberOfTasks
10002de0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002de4 l     O .bss	00000004 uxPendedTicks
10002de8 l     O .bss	00000004 uxSchedulerSuspended
10002dec l     O .bss	00000004 uxTaskNumber
10002df0 l     O .bss	00000004 uxTopReadyPriority
10002df4 l     O .bss	00000014 xDelayedTaskList1
10002e08 l     O .bss	00000014 xDelayedTaskList2
10002e1c l     O .bss	00000004 xNextTaskUnblockTime
10002e20 l     O .bss	00000004 xNumOfOverflows
10002e24 l     O .bss	00000014 xPendingReadyList
10002e38 l     O .bss	00000004 xSchedulerRunning
10002e3c l     O .bss	00000014 xSuspendedTaskList
10002e50 l     O .bss	00000014 xTasksWaitingTermination
10002e64 l     O .bss	00000004 xTickCount
10002e68 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0022c0 l     F .text	00000020 prvGetNextExpireTime
1a0022e0 l     F .text	00000048 prvInsertTimerInActiveList
1a002328 l     F .text	00000070 prvCheckForValidListAndQueue
1a002398 l     F .text	00000040 prvInitialiseNewTimer
1a002768 l     F .text	00000016 prvTimerTask
1a0024f4 l     F .text	00000078 prvSwitchTimerLists
1a00256c l     F .text	0000002c prvSampleTimeNow
1a002598 l     F .text	00000060 prvProcessExpiredTimer
1a0025f8 l     F .text	00000074 prvProcessTimerOrBlockTask
1a00266c l     F .text	000000fc prvProcessReceivedCommands
10002e6c l     O .bss	00000004 pxCurrentTimerList
10002e70 l     O .bss	00000004 pxOverflowTimerList
10002e74 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002f14 l     O .bss	00000014 xActiveTimerList1
10002f28 l     O .bss	00000014 xActiveTimerList2
10002f3c l     O .bss	00000004 xLastTime.11777
10002f40 l     O .bss	00000050 xStaticTimerQueue.11827
10002f90 l     O .bss	00000004 xTimerQueue
10002f94 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002780 l     F .text	00000040 prvTaskExitError
1a0027c0 l     F .text	00000022 prvPortStartFirstTask
1a0027e8 l     F .text	0000000e vPortEnableVFP
1a002850 l       .text	00000000 pxCurrentTCBConst2
1a002930 l       .text	00000000 pxCurrentTCBConst
10002f98 l     O .bss	00000001 ucMaxSysCallPriority
10002f9c l     O .bss	00000004 ulMaxPRIGROUPValue
10000014 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a002b04 l     F .text	00000044 Board_LED_Init
1a002b48 l     F .text	00000040 Board_TEC_Init
1a002b88 l     F .text	00000040 Board_GPIO_Init
1a002bc8 l     F .text	00000030 Board_ADC_Init
1a002bf8 l     F .text	00000038 Board_SPI_Init
1a002c30 l     F .text	00000024 Board_I2C_Init
1a005728 l     O .text	00000008 GpioButtons
1a005730 l     O .text	0000000c GpioLeds
1a00573c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005754 l     O .text	00000004 InitClkStates
1a005758 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002d5c l     F .text	0000002c Chip_UART_GetIndex
1a0057cc l     O .text	00000008 UART_BClock
1a0057d4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002f04 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002f18 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002fcc l     F .text	000000a4 pll_calc_divs
1a003070 l     F .text	0000010c pll_get_frac
1a00317c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0033f0 l     F .text	00000022 Chip_Clock_GetDivRate
10002fa0 l     O .bss	00000008 audio_usb_pll_freq
1a0057e8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005854 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0036c8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0036dc l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000018 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000050 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10002fc0 l     O .bss	00000004 callBackFuncParams
10002fc8 l     O .bss	00000008 tickCounter
10002fd0 l     O .bss	00000004 tickHookFunction
10002fd4 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_timer.c
1a003bf0 l     F .text	00000002 errorOcurred
1a003bf2 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003cfc l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10003004 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a004094 l     F .text	00000010 clearInterrupt
1a0040a4 l     F .text	0000005c serveInterrupt
10000094 l     O .data	00000048 ultrasonicSensors
1a005a30 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
100000e0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005acc l       .init_array	00000000 __init_array_end
1a005ac8 l       .bss_RAM5	00000000 __preinit_array_end
1a005ac8 l       .init_array	00000000 __init_array_start
1a005ac8 l       .bss_RAM5	00000000 __preinit_array_start
1a005572 g     F .text	00000010 _malloc_usable_size_r
1a003214 g     F .text	0000001c Chip_Clock_GetDividerSource
1a004d26 g     F .text	00000010 strcpy
1a003850 g     F .text	0000005c cyclesCounterToUs
1a003c74 g     F .text	00000044 TIMER2_IRQHandler
1a003a84 g     F .text	00000014 uartRxRead
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a000f20 g     F .text	0000000c xPortGetFreeHeapSize
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
100030e0 g     O .bss	00000014 mem_pool_big
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002898 g     F .text	0000002c vPortExitCritical
10003014 g     O .bss	00000004 xPointerQueue_OP4
1a00443c g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002ca4 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000428 g     F .text	00000044 SelecQueueFromOperation
1a0015e8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a002fbe g     F .text	0000000c Chip_ADC_SetResolution
1a005524 g     F .text	00000002 __malloc_unlock
1a002934 g     F .text	0000002c SysTick_Handler
1a002ddc g     F .text	00000040 Chip_UART_SetBaud
1a000c28  w    F .text	00000002 initialise_monitor_handles
1a000894 g     F .text	00000018 Task_ReportStack_OP2
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0054f0 g     F .text	00000032 memmove
10003018 g     O .bss	00000004 SemTxUart
1a0028d0 g     F .text	00000064 PendSV_Handler
1a0007e8 g     F .text	00000024 TaskService
1a00139a g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005ad4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1000301c g     O .bss	00000004 xPointerQueue_OP2
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002d44 g     O .bss	00000004 pxCurrentTCB
53ff6c62 g       *ABS*	00000000 __valid_user_code_checksum
1a005ad4 g       .ARM.exidx	00000000 _etext
1a0008c4 g     F .text	00000074 Task_OP4
1a00046c g     F .text	0000003e packetToLower
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a000b08 g     F .text	0000001c ModuleDinamicMemory_initialize
1a001f7c g     F .text	00000018 vTaskInternalSetTimeOutState
1a003cb8 g     F .text	00000044 TIMER3_IRQHandler
1a003492 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002998 g     F .text	00000110 xPortStartScheduler
1a004ca4 g     F .text	00000016 memcpy
1a001e88 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004f4c g     F .text	000001f0 _svfprintf_r
1a0043c4 g     F .text	00000022 .hidden __floatsidf
1a002960  w    F .text	00000038 vPortSetupTimerInterrupt
1a000758 g     F .text	00000090 Report
1a00495c g     F .text	00000000 .hidden __aeabi_uldivmod
10003164 g       .noinit	00000000 _noinit
1a000eb0 g     F .text	00000070 vPortFree
1a003b42 g     F .text	00000018 uartWriteString
1000315c g     O .bss	00000004 SystemCoreClock
1a002d88 g     F .text	00000054 Chip_UART_Init
1a003b70 g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002aa8 g     F .text	0000005c vPortValidateInterruptPriority
1a002020 g     F .text	00000018 uxTaskGetStackHighWaterMark
10003020 g     O .bss	00000004 SemRxUart
1a000180  w    F .text	00000002 UsageFault_Handler
1a003510 g     F .text	0000004c Chip_Clock_GetRate
1a001656 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002ce4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000638 g     F .text	00000068 itoa
1a0043a4 g     F .text	0000001e .hidden __aeabi_ui2d
1a00498c g     F .text	000002cc .hidden __udivmoddi4
1a004120 g     F .text	00000000 .hidden __aeabi_drsub
1a000cb8 g     F .text	00000020 _sbrk_r
1a005724 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
10000004 g     O .data	00000004 _DEMCR
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001650 g     F .text	00000006 vListInitialiseItem
1a00410a g     F .text	0000000a GPIO1_IRQHandler
1a001468 g     F .text	00000158 xQueueReceive
1000311c g     O .bss	00000040 xQueueRegistry
1a0043e8 g     F .text	00000042 .hidden __extendsfdf2
1a0046ec g     F .text	000001d0 .hidden __aeabi_ddiv
1a0016e4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a00412c g     F .text	00000276 .hidden __adddf3
1a005acc g       .ARM.exidx	00000000 __exidx_start
1a004498 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a005526 g     F .text	0000004c _realloc_r
1a004c5c g     F .text	00000048 __libc_init_array
1a0043a4 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000d94 g     F .text	0000011c pvPortMalloc
1a002c78 g     F .text	0000002c Board_Init
1a000cb6  w    F .text	00000002 _init
1a00163a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0048bc g     F .text	0000009e .hidden __aeabi_d2f
10003024 g     O .bss	00000004 xPointerQueue_3
1a001ba8 g     F .text	0000000c xTaskGetTickCount
1a0011f0 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003164 g       .bss	00000000 _ebss
1a003bf4 g     F .text	00000040 TIMER0_IRQHandler
1a000c2c g     F .text	00000088 Reset_Handler
1a003ba4 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0037c0 g     F .text	00000038 Chip_I2C_SetClockRate
1a002058 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000a78 g     F .text	00000028 CallbackRx
1a0031c8 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001ef0 g     F .text	0000008c xTaskRemoveFromEventList
1a0016fe g     F .text	00000002 vApplicationMallocFailedHook
1a00412c g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a00442c g     F .text	0000006a .hidden __aeabi_ul2d
10003028 g     O .bss	00000004 xTaskHandle_MayOP0
1a003c34 g     F .text	00000040 TIMER1_IRQHandler
1a005a34 g     O .text	00000020 __sf_fake_stderr
1000302c g     O .bss	00000004 xPointerQueue_OP3
1a00379c g     F .text	00000024 Chip_I2C_Init
1a000614 g     F .text	00000024 semaphoreCreateAll
1a000b24 g     F .text	00000036 ModuleDinamicMemory_send2
1a003b5a g     F .text	0000000a UART2_IRQHandler
1a0004e8 g     F .text	000000bc TaskCreateAll
1a003384 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004e98 g     F .text	000000b4 __ssputs_r
1a0058f0 g     O .text	00000140 gpioPinsInit
1a003950 g     F .text	00000090 uartInterrupt
1a003b28 g     F .text	0000001a uartWriteByte
1a0036f4 g     F .text	00000012 Chip_SSP_SetClockRate
1a00080c g     F .text	00000044 Task_ToMayusculas_OP0
1a003f6e g     F .text	00000016 gpioToggle
1a004114 g     F .text	0000000a GPIO2_IRQHandler
1a005450 g     F .text	00000000 memchr
1a001f94 g     F .text	00000080 xTaskCheckForTimeOut
1a004d48 g     F .text	0000009c _free_r
1a00346c g     F .text	00000026 Chip_Clock_GetBaseClock
10000140 g       .bss	00000000 _bss
1a002f8c g     F .text	00000032 Chip_ADC_SetSampleRate
1a000938 g     F .text	00000140 TaskTxUart
1a004128 g     F .text	0000027a .hidden __aeabi_dsub
1a001b98 g     F .text	00000010 vTaskSuspendAll
1a00442c g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003706 g     F .text	0000003e Chip_SSP_SetBitRate
1a0016a2 g     F .text	00000028 uxListRemove
10003030 g     O .bss	0000007c Data
1a0036c4 g     F .text	00000002 Chip_GPIO_Init
1a005750 g     O .text	00000004 OscRateIn
1a003aac g     F .text	0000007c uartInit
1a001a2c g     F .text	00000072 xTaskCreateStatic
10003164 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001dc0 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
100030f4 g     O .bss	00000014 mem_pool_med
1a001112 g     F .text	00000090 xQueueGenericCreateStatic
1a001eb8 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
100030ac g     O .bss	00000024 ModuleData
1a0043c4 g     F .text	00000022 .hidden __aeabi_i2d
1a003d30 g     F .text	00000194 gpioInit
10003010 g     O .bss	00000001 QmPoolOrMalloc
1a002108 g     F .text	00000098 xTaskNotifyWait
1a0016cc g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002488 g     F .text	0000006c xTimerGenericCommand
1a0016fc g     F .text	00000002 vApplicationStackOverflowHook
1a004c58  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0046ec g     F .text	000001d0 .hidden __divdf3
1a004498 g     F .text	00000254 .hidden __muldf3
1a003f84 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1000015c g     O .bss	00000004 xTaskHandle_RxNotify
1a005522 g     F .text	00000002 __malloc_lock
10003108 g     O .bss	00000014 mem_pool_small
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005a54 g     O .text	00000020 __sf_fake_stdin
1a003230 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004cba g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000b6c g     F .text	000000bc main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00166e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
100030d0 g     O .bss	00000004 SemMutexUart
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002830 g     F .text	00000024 SVC_Handler
1a0023d8 g     F .text	00000064 xTimerCreateTimerTask
1a0048bc g     F .text	0000009e .hidden __truncdfsf2
1a004de4 g     F .text	000000b4 _malloc_r
1a00443c g     F .text	0000005a .hidden __aeabi_l2d
1a003a6c g     F .text	00000018 uartTxReady
1a0008ac g     F .text	00000018 Task_ReportHeap_OP3
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0034a0 g     F .text	0000003c Chip_Clock_EnableOpts
1a0011a2 g     F .text	0000004e xQueueGenericCreate
1a00324c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003304 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
10000010 g     O .data	00000004 _LAR
1a0037f8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0021a0 g     F .text	00000120 xTaskGenericNotifyFromISR
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003ec4 g     F .text	00000056 gpioWrite
1a000cb4  w    F .text	00000002 _fini
1a001ccc g     F .text	000000f4 xTaskResumeAll
1a004ccc g     F .text	00000040 sprintf
1a001b04 g     F .text	00000094 vTaskStartScheduler
1a002f4c g     F .text	00000040 Chip_ADC_Init
10003160 g     O .bss	00000004 g_pUsbApi
1a002cac g     F .text	00000038 Board_SetupMuxing
1a002e1c g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000aec g     F .text	0000001c QMPools_inicializar
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a00513c g     F .text	000000ea _printf_common
100000dc g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a004f4c g     F .text	000001f0 _svfiprintf_r
1a003a98 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
100030d4 g     O .bss	00000004 xTaskHandle_MinOP1
10000000 g       .data	00000000 _data
1a002014 g     F .text	0000000c vTaskMissedYield
10003164 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003744 g     F .text	00000038 Chip_SSP_Init
1a0015c0 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000300 g     F .text	00000128 Add_IncommingFrame
1a001bb4 g     F .text	00000118 xTaskIncrementTick
10000008 g     O .data	00000004 _DWT_CTRL
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002c54 g     F .text	00000024 Board_Debug_Init
1a00106c g     F .text	00000084 xQueueGenericReset
10000140 g       .data	00000000 _edata
1a00377c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001a9e g     F .text	00000066 xTaskCreate
1a003570 g     F .text	00000154 Chip_SetupCoreClock
1a004100 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a00355c g     F .text	00000014 SystemCoreClockUpdate
1a0004aa g     F .text	0000003e packetToUpper
100030d8 g     O .bss	00000004 xPointerQueue_OP1
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005a74 g     O .text	00000020 __sf_fake_stdout
1a004ccc g     F .text	00000040 siprintf
1a000aa0 g     F .text	0000004c QMPool_init
1a002038 g     F .text	00000020 xTaskGetSchedulerState
1a004c58  w    F .text	00000002 .hidden __aeabi_idiv0
1a0006a0 g     F .text	000000b8 Service
1a000850 g     F .text	00000044 Task_ToMinusculas_OP1
1a0039e0 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1000000c g     O .data	00000004 _DWT_CYCCNT
1a004d36 g     F .text	00000010 strlen
1a0027fc g     F .text	0000002c pxPortInitialiseStack
1a005228 g     F .text	00000224 _printf_i
1a0034dc g     F .text	00000034 Chip_Clock_Enable
1a003b64 g     F .text	0000000a UART3_IRQHandler
1000300c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00243c g     F .text	0000004c xTimerCreateStatic
100030dc g     O .bss	00000004 xPointerQueue_OP0
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004d0c g     F .text	0000001a strchr
1a003f1a g     F .text	00000054 gpioRead
1a0043e8 g     F .text	00000042 .hidden __aeabi_f2d
1a003fa0 g     F .text	000000f4 boardInit
1a002854 g     F .text	00000044 vPortEnterCritical
1a000b5a g     F .text	00000010 ModuleDinamicMemory_receive
10003008 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004128 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0005a4 g     F .text	00000070 QueueCreateAll
1a001384 g     F .text	00000016 xQueueCreateMutex
1a003414 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003830 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002d50 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 2d 0c 00 1a 79 01 00 1a 7b 01 00 1a     ....-...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 62 6c ff 53     }...........bl.S
	...
1a00002c:	31 28 00 1a 85 01 00 1a 00 00 00 00 d1 28 00 1a     1(...........(..
1a00003c:	35 29 00 1a                                         5)..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	85 3f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .?..............
1a000070:	f5 3b 00 1a 35 3c 00 1a 75 3c 00 1a b9 3c 00 1a     .;..5<..u<...<..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 5b 3b 00 1a 65 3b 00 1a     ........[;..e;..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	01 41 00 1a 0b 41 00 1a 15 41 00 1a bb 01 00 1a     .A...A...A......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005ad4 	.word	0x1a005ad4
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000140 	.word	0x00000140
1a000120:	1a005ad4 	.word	0x1a005ad4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005ad4 	.word	0x1a005ad4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005ad4 	.word	0x1a005ad4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005ad4 	.word	0x1a005ad4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000140 	.word	0x10000140
1a000154:	00003024 	.word	0x00003024
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fb74 	bl	1a0038ac <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <Add_IncommingFrame>:
//*_DWT_CONTROL = *_DWT_CONTROL | 1;  // enable DWT cycle counter

/*=================================================================================
						Almacena en el buffer de la RX ISR
=================================================================================*/
void Add_IncommingFrame(UBaseType_t uxSavedInterruptStatus ,BaseType_t xHigherPriorityTaskWoken, volatile char c){
1a000300:	b570      	push	{r4, r5, r6, lr}
1a000302:	b084      	sub	sp, #16
1a000304:	9103      	str	r1, [sp, #12]
1a000306:	f88d 200b 	strb.w	r2, [sp, #11]
	char *PtrSOF = NULL;
	char *PtrEOF = NULL;
	void* XPointerQueUe = NULL; /*Puntero auxiliar  a cola*/
	static uint8_t InitTimeFlag = 1;
	/*Verifica Inicio de trama*/
	if(_SOF == c) Data.StartFrame = 1;
1a00030a:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00030e:	b2db      	uxtb	r3, r3
1a000310:	2b7b      	cmp	r3, #123	; 0x7b
1a000312:	d035      	beq.n	1a000380 <Add_IncommingFrame+0x80>

	if(Data.StartFrame){
1a000314:	4b40      	ldr	r3, [pc, #256]	; (1a000418 <Add_IncommingFrame+0x118>)
1a000316:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
1a00031a:	b37b      	cbz	r3, 1a00037c <Add_IncommingFrame+0x7c>
1a00031c:	4604      	mov	r4, r0

		if(InitTimeFlag) {
1a00031e:	4b3f      	ldr	r3, [pc, #252]	; (1a00041c <Add_IncommingFrame+0x11c>)
1a000320:	781b      	ldrb	r3, [r3, #0]
1a000322:	bb93      	cbnz	r3, 1a00038a <Add_IncommingFrame+0x8a>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000324:	f3ef 8411 	mrs	r4, BASEPRI
1a000328:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00032c:	f383 8811 	msr	BASEPRI, r3
1a000330:	f3bf 8f6f 	isb	sy
1a000334:	f3bf 8f4f 	dsb	sy
				Data.t_sof = cyclesCounterToUs(*_DWT_CYCCNT); //cyclesCounterToUs
			taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
		}
		/*Proteger acceso al buffer*/
		uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
		Data.Buffer[Data.Index++]= c;
1a000338:	4b37      	ldr	r3, [pc, #220]	; (1a000418 <Add_IncommingFrame+0x118>)
1a00033a:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
1a00033e:	b2d2      	uxtb	r2, r2
1a000340:	1c51      	adds	r1, r2, #1
1a000342:	b2c9      	uxtb	r1, r1
1a000344:	f883 1079 	strb.w	r1, [r3, #121]	; 0x79
1a000348:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a00034c:	b2c9      	uxtb	r1, r1
1a00034e:	5499      	strb	r1, [r3, r2]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000350:	f384 8811 	msr	BASEPRI, r4
		taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
	}
	else return;

	if(Data.Index > sizeof(Data)-1) Data.Index =0;  /*Garantiza no desbordamiento del buffer*/
1a000354:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
1a000358:	b2db      	uxtb	r3, r3
1a00035a:	2b7b      	cmp	r3, #123	; 0x7b
1a00035c:	d903      	bls.n	1a000366 <Add_IncommingFrame+0x66>
1a00035e:	4b2e      	ldr	r3, [pc, #184]	; (1a000418 <Add_IncommingFrame+0x118>)
1a000360:	2200      	movs	r2, #0
1a000362:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	Data.Buffer[Data.Index] = 0; 					/*char NULL pos siguiente*/
1a000366:	4a2c      	ldr	r2, [pc, #176]	; (1a000418 <Add_IncommingFrame+0x118>)
1a000368:	f892 3079 	ldrb.w	r3, [r2, #121]	; 0x79
1a00036c:	b2db      	uxtb	r3, r3
1a00036e:	2100      	movs	r1, #0
1a000370:	54d1      	strb	r1, [r2, r3]

	if(_EOF == c){
1a000372:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000376:	b2db      	uxtb	r3, r3
1a000378:	2b7d      	cmp	r3, #125	; 0x7d
1a00037a:	d022      	beq.n	1a0003c2 <Add_IncommingFrame+0xc2>
		/*Frame buena en el buffer*/

		xTaskNotifyFromISR(xTaskHandle_RxNotify,0,eNoAction,&xHigherPriorityTaskWoken);
		Data.Index =0;
	}
}
1a00037c:	b004      	add	sp, #16
1a00037e:	bd70      	pop	{r4, r5, r6, pc}
	if(_SOF == c) Data.StartFrame = 1;
1a000380:	4b25      	ldr	r3, [pc, #148]	; (1a000418 <Add_IncommingFrame+0x118>)
1a000382:	2201      	movs	r2, #1
1a000384:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
1a000388:	e7c4      	b.n	1a000314 <Add_IncommingFrame+0x14>
			InitTimeFlag = 0;
1a00038a:	2200      	movs	r2, #0
1a00038c:	4b23      	ldr	r3, [pc, #140]	; (1a00041c <Add_IncommingFrame+0x11c>)
1a00038e:	701a      	strb	r2, [r3, #0]
	__asm volatile
1a000390:	f3ef 8311 	mrs	r3, BASEPRI
1a000394:	f04f 01a0 	mov.w	r1, #160	; 0xa0
1a000398:	f381 8811 	msr	BASEPRI, r1
1a00039c:	f3bf 8f6f 	isb	sy
1a0003a0:	f3bf 8f4f 	dsb	sy
			*_DWT_CYCCNT = 0;
1a0003a4:	4b1e      	ldr	r3, [pc, #120]	; (1a000420 <Add_IncommingFrame+0x120>)
1a0003a6:	6819      	ldr	r1, [r3, #0]
1a0003a8:	600a      	str	r2, [r1, #0]
				Data.t_sof = cyclesCounterToUs(*_DWT_CYCCNT); //cyclesCounterToUs
1a0003aa:	681b      	ldr	r3, [r3, #0]
1a0003ac:	6818      	ldr	r0, [r3, #0]
1a0003ae:	f003 fa4f 	bl	1a003850 <cyclesCounterToUs>
1a0003b2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
1a0003b6:	4b18      	ldr	r3, [pc, #96]	; (1a000418 <Add_IncommingFrame+0x118>)
1a0003b8:	ed83 0a1b 	vstr	s0, [r3, #108]	; 0x6c
	__asm volatile
1a0003bc:	f384 8811 	msr	BASEPRI, r4
1a0003c0:	e7b0      	b.n	1a000324 <Add_IncommingFrame+0x24>
		InitTimeFlag = 1;
1a0003c2:	2601      	movs	r6, #1
1a0003c4:	4b15      	ldr	r3, [pc, #84]	; (1a00041c <Add_IncommingFrame+0x11c>)
1a0003c6:	701e      	strb	r6, [r3, #0]
	__asm volatile
1a0003c8:	f3ef 8311 	mrs	r3, BASEPRI
1a0003cc:	f04f 02a0 	mov.w	r2, #160	; 0xa0
1a0003d0:	f382 8811 	msr	BASEPRI, r2
1a0003d4:	f3bf 8f6f 	isb	sy
1a0003d8:	f3bf 8f4f 	dsb	sy
			Data.t_eof = cyclesCounterToUs(*_DWT_CYCCNT);
1a0003dc:	4b10      	ldr	r3, [pc, #64]	; (1a000420 <Add_IncommingFrame+0x120>)
1a0003de:	681b      	ldr	r3, [r3, #0]
1a0003e0:	6818      	ldr	r0, [r3, #0]
1a0003e2:	f003 fa35 	bl	1a003850 <cyclesCounterToUs>
1a0003e6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
1a0003ea:	4d0b      	ldr	r5, [pc, #44]	; (1a000418 <Add_IncommingFrame+0x118>)
1a0003ec:	ed85 0a1c 	vstr	s0, [r5, #112]	; 0x70
	__asm volatile
1a0003f0:	f384 8811 	msr	BASEPRI, r4
		Data.StartFrame = 0;
1a0003f4:	2400      	movs	r4, #0
1a0003f6:	f885 407a 	strb.w	r4, [r5, #122]	; 0x7a
		Data.Ready = 1;
1a0003fa:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		xTaskNotifyFromISR(xTaskHandle_RxNotify,0,eNoAction,&xHigherPriorityTaskWoken);
1a0003fe:	4b09      	ldr	r3, [pc, #36]	; (1a000424 <Add_IncommingFrame+0x124>)
1a000400:	6818      	ldr	r0, [r3, #0]
1a000402:	ab03      	add	r3, sp, #12
1a000404:	9300      	str	r3, [sp, #0]
1a000406:	4623      	mov	r3, r4
1a000408:	4622      	mov	r2, r4
1a00040a:	4621      	mov	r1, r4
1a00040c:	f001 fec8 	bl	1a0021a0 <xTaskGenericNotifyFromISR>
		Data.Index =0;
1a000410:	f885 4079 	strb.w	r4, [r5, #121]	; 0x79
1a000414:	e7b2      	b.n	1a00037c <Add_IncommingFrame+0x7c>
1a000416:	bf00      	nop
1a000418:	10003030 	.word	0x10003030
1a00041c:	10000000 	.word	0x10000000
1a000420:	1000000c 	.word	0x1000000c
1a000424:	1000015c 	.word	0x1000015c

1a000428 <SelecQueueFromOperation>:
/*=================================================================================
 	 	 	 	 	 	selecionar puntero a cola segun operacion
 =================================================================================*/
void* SelecQueueFromOperation(Enum_Op_t OP){
	void * XpointerSelected = NULL;
	switch(OP){
1a000428:	2804      	cmp	r0, #4
1a00042a:	d813      	bhi.n	1a000454 <SelecQueueFromOperation+0x2c>
1a00042c:	e8df f000 	tbb	[pc, r0]
1a000430:	0c090603 	.word	0x0c090603
1a000434:	0f          	.byte	0x0f
1a000435:	00          	.byte	0x00

	case OP0:   /*Operacion 0*/
		XpointerSelected = xPointerQueue_OP0;
1a000436:	4b08      	ldr	r3, [pc, #32]	; (1a000458 <SelecQueueFromOperation+0x30>)
1a000438:	6818      	ldr	r0, [r3, #0]
		break;
1a00043a:	4770      	bx	lr
	case OP1:	/*Operacion 1*/
		XpointerSelected = xPointerQueue_OP1;
1a00043c:	4b07      	ldr	r3, [pc, #28]	; (1a00045c <SelecQueueFromOperation+0x34>)
1a00043e:	6818      	ldr	r0, [r3, #0]
		break;
1a000440:	4770      	bx	lr
	case OP2:	/*Operacion 2*/
		XpointerSelected = xPointerQueue_OP2;
1a000442:	4b07      	ldr	r3, [pc, #28]	; (1a000460 <SelecQueueFromOperation+0x38>)
1a000444:	6818      	ldr	r0, [r3, #0]
		break;
1a000446:	4770      	bx	lr
	case OP3:	/*Operacion 3*/
		XpointerSelected = xPointerQueue_OP3;
1a000448:	4b06      	ldr	r3, [pc, #24]	; (1a000464 <SelecQueueFromOperation+0x3c>)
1a00044a:	6818      	ldr	r0, [r3, #0]
		break;
1a00044c:	4770      	bx	lr
	case OP4:	/*Operacion 4*/
		XpointerSelected = xPointerQueue_OP4;
1a00044e:	4b06      	ldr	r3, [pc, #24]	; (1a000468 <SelecQueueFromOperation+0x40>)
1a000450:	6818      	ldr	r0, [r3, #0]
		break;
1a000452:	4770      	bx	lr
	void * XpointerSelected = NULL;
1a000454:	2000      	movs	r0, #0
	}
	return XpointerSelected;
}
1a000456:	4770      	bx	lr
1a000458:	100030dc 	.word	0x100030dc
1a00045c:	100030d8 	.word	0x100030d8
1a000460:	1000301c 	.word	0x1000301c
1a000464:	1000302c 	.word	0x1000302c
1a000468:	10003014 	.word	0x10003014

1a00046c <packetToLower>:

/*=================================================================================
 	 	 	 	 	 	 	 	 packetToLower
 =================================================================================*/
void packetToLower(uint8_t *ptrToPacketLower){
1a00046c:	b430      	push	{r4, r5}

	uint16_t tSizePacket;
	uint8_t i;
	tSizePacket = ((*(ptrToPacketLower + OFFSET_TAMANO)) -'0')*10;
1a00046e:	7883      	ldrb	r3, [r0, #2]
1a000470:	3b30      	subs	r3, #48	; 0x30
1a000472:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000476:	005c      	lsls	r4, r3, #1
1a000478:	b2a3      	uxth	r3, r4
	tSizePacket = tSizePacket + ( (*(ptrToPacketLower+OFFSET_OP+OFFSET_TAMANO)) -'0');
1a00047a:	78c4      	ldrb	r4, [r0, #3]
1a00047c:	441c      	add	r4, r3
1a00047e:	b2a4      	uxth	r4, r4
1a000480:	3c30      	subs	r4, #48	; 0x30
1a000482:	b2a4      	uxth	r4, r4
	for(i = 0; i < tSizePacket ; i++){
1a000484:	2300      	movs	r3, #0
1a000486:	e001      	b.n	1a00048c <packetToLower+0x20>
1a000488:	3301      	adds	r3, #1
1a00048a:	b2db      	uxtb	r3, r3
1a00048c:	b29a      	uxth	r2, r3
1a00048e:	42a2      	cmp	r2, r4
1a000490:	d209      	bcs.n	1a0004a6 <packetToLower+0x3a>
		if( *(ptrToPacketLower + i + OFFSET_DATO) >= MIN_LOWER &&  *(ptrToPacketLower + i + OFFSET_DATO) <= MAX_LOWER)
1a000492:	1d1d      	adds	r5, r3, #4
1a000494:	5d41      	ldrb	r1, [r0, r5]
1a000496:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
1a00049a:	b2d2      	uxtb	r2, r2
1a00049c:	2a19      	cmp	r2, #25
1a00049e:	d8f3      	bhi.n	1a000488 <packetToLower+0x1c>
			*(ptrToPacketLower + i + OFFSET_DATO) = *(ptrToPacketLower + i + OFFSET_DATO) + UP_LW_LW_UP;
1a0004a0:	3120      	adds	r1, #32
1a0004a2:	5541      	strb	r1, [r0, r5]
1a0004a4:	e7f0      	b.n	1a000488 <packetToLower+0x1c>
	}
}
1a0004a6:	bc30      	pop	{r4, r5}
1a0004a8:	4770      	bx	lr

1a0004aa <packetToUpper>:
/*=================================================================================
 	 	 	 	 	 	 	 	 packetToUpper
 =================================================================================*/
void packetToUpper(uint8_t *ptrToPacketUpper){
1a0004aa:	b430      	push	{r4, r5}
	uint16_t tSizePacket;
	uint8_t i;
	tSizePacket = ( *( ptrToPacketUpper + OFFSET_TAMANO) -'0')*10;
1a0004ac:	7883      	ldrb	r3, [r0, #2]
1a0004ae:	3b30      	subs	r3, #48	; 0x30
1a0004b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0004b4:	005c      	lsls	r4, r3, #1
1a0004b6:	b2a3      	uxth	r3, r4
	tSizePacket = tSizePacket + ( *( ptrToPacketUpper + OFFSET_OP+OFFSET_TAMANO) -'0');
1a0004b8:	78c4      	ldrb	r4, [r0, #3]
1a0004ba:	441c      	add	r4, r3
1a0004bc:	b2a4      	uxth	r4, r4
1a0004be:	3c30      	subs	r4, #48	; 0x30
1a0004c0:	b2a4      	uxth	r4, r4
	for(i = 0;i < tSizePacket; i++){
1a0004c2:	2300      	movs	r3, #0
1a0004c4:	e001      	b.n	1a0004ca <packetToUpper+0x20>
1a0004c6:	3301      	adds	r3, #1
1a0004c8:	b2db      	uxtb	r3, r3
1a0004ca:	b29a      	uxth	r2, r3
1a0004cc:	42a2      	cmp	r2, r4
1a0004ce:	d209      	bcs.n	1a0004e4 <packetToUpper+0x3a>
		if( *(ptrToPacketUpper + i + OFFSET_DATO) >= MIN_UPPER &&  *(ptrToPacketUpper + i + OFFSET_DATO) <= MAX_UPPER)
1a0004d0:	1d1d      	adds	r5, r3, #4
1a0004d2:	5d41      	ldrb	r1, [r0, r5]
1a0004d4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
1a0004d8:	b2d2      	uxtb	r2, r2
1a0004da:	2a19      	cmp	r2, #25
1a0004dc:	d8f3      	bhi.n	1a0004c6 <packetToUpper+0x1c>
			*(ptrToPacketUpper + i + OFFSET_DATO) = *(ptrToPacketUpper + i + OFFSET_DATO)-UP_LW_LW_UP;
1a0004de:	3920      	subs	r1, #32
1a0004e0:	5541      	strb	r1, [r0, r5]
1a0004e2:	e7f0      	b.n	1a0004c6 <packetToUpper+0x1c>
	}
}
1a0004e4:	bc30      	pop	{r4, r5}
1a0004e6:	4770      	bx	lr

1a0004e8 <TaskCreateAll>:
	xSemaphoreGive(SemMutexUart);
}
/*=================================================================================
 	 	 	 	 	 	 	 	task create
 =================================================================================*/
void TaskCreateAll(void){
1a0004e8:	b530      	push	{r4, r5, lr}
1a0004ea:	b083      	sub	sp, #12

	xTaskCreate(TaskTxUart, (const char *)"TaskTxUart",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a0004ec:	2400      	movs	r4, #0
1a0004ee:	9401      	str	r4, [sp, #4]
1a0004f0:	2501      	movs	r5, #1
1a0004f2:	9500      	str	r5, [sp, #0]
1a0004f4:	4623      	mov	r3, r4
1a0004f6:	22b4      	movs	r2, #180	; 0xb4
1a0004f8:	491b      	ldr	r1, [pc, #108]	; (1a000568 <TaskCreateAll+0x80>)
1a0004fa:	481c      	ldr	r0, [pc, #112]	; (1a00056c <TaskCreateAll+0x84>)
1a0004fc:	f001 facf 	bl	1a001a9e <xTaskCreate>
	xTaskCreate(TaskService, (const char *)"TaskService",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 2, &xTaskHandle_RxNotify);
1a000500:	4b1b      	ldr	r3, [pc, #108]	; (1a000570 <TaskCreateAll+0x88>)
1a000502:	9301      	str	r3, [sp, #4]
1a000504:	2302      	movs	r3, #2
1a000506:	9300      	str	r3, [sp, #0]
1a000508:	4623      	mov	r3, r4
1a00050a:	22b4      	movs	r2, #180	; 0xb4
1a00050c:	4919      	ldr	r1, [pc, #100]	; (1a000574 <TaskCreateAll+0x8c>)
1a00050e:	481a      	ldr	r0, [pc, #104]	; (1a000578 <TaskCreateAll+0x90>)
1a000510:	f001 fac5 	bl	1a001a9e <xTaskCreate>
	xTaskCreate(Task_ToMayusculas_OP0, (const char *)"Task_ToMayusculas_OP0",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000514:	9401      	str	r4, [sp, #4]
1a000516:	9500      	str	r5, [sp, #0]
1a000518:	4623      	mov	r3, r4
1a00051a:	22b4      	movs	r2, #180	; 0xb4
1a00051c:	4917      	ldr	r1, [pc, #92]	; (1a00057c <TaskCreateAll+0x94>)
1a00051e:	4818      	ldr	r0, [pc, #96]	; (1a000580 <TaskCreateAll+0x98>)
1a000520:	f001 fabd 	bl	1a001a9e <xTaskCreate>
	xTaskCreate(Task_ToMinusculas_OP1, (const char *)"Task_ToMinusculas_OP1",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000524:	9401      	str	r4, [sp, #4]
1a000526:	9500      	str	r5, [sp, #0]
1a000528:	4623      	mov	r3, r4
1a00052a:	22b4      	movs	r2, #180	; 0xb4
1a00052c:	4915      	ldr	r1, [pc, #84]	; (1a000584 <TaskCreateAll+0x9c>)
1a00052e:	4816      	ldr	r0, [pc, #88]	; (1a000588 <TaskCreateAll+0xa0>)
1a000530:	f001 fab5 	bl	1a001a9e <xTaskCreate>
	xTaskCreate(Task_ReportStack_OP2, (const char *)"Task_ToMayusculas_OP2",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000534:	9401      	str	r4, [sp, #4]
1a000536:	9500      	str	r5, [sp, #0]
1a000538:	4623      	mov	r3, r4
1a00053a:	22b4      	movs	r2, #180	; 0xb4
1a00053c:	4913      	ldr	r1, [pc, #76]	; (1a00058c <TaskCreateAll+0xa4>)
1a00053e:	4814      	ldr	r0, [pc, #80]	; (1a000590 <TaskCreateAll+0xa8>)
1a000540:	f001 faad 	bl	1a001a9e <xTaskCreate>
	xTaskCreate(Task_ReportHeap_OP3, (const char *)"Task_ToMinusculas_OP3",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000544:	9401      	str	r4, [sp, #4]
1a000546:	9500      	str	r5, [sp, #0]
1a000548:	4623      	mov	r3, r4
1a00054a:	22b4      	movs	r2, #180	; 0xb4
1a00054c:	4911      	ldr	r1, [pc, #68]	; (1a000594 <TaskCreateAll+0xac>)
1a00054e:	4812      	ldr	r0, [pc, #72]	; (1a000598 <TaskCreateAll+0xb0>)
1a000550:	f001 faa5 	bl	1a001a9e <xTaskCreate>
	xTaskCreate(Task_OP4, (const char *)"Task_OP4",configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY + 1, NULL);
1a000554:	9401      	str	r4, [sp, #4]
1a000556:	9500      	str	r5, [sp, #0]
1a000558:	4623      	mov	r3, r4
1a00055a:	22b4      	movs	r2, #180	; 0xb4
1a00055c:	490f      	ldr	r1, [pc, #60]	; (1a00059c <TaskCreateAll+0xb4>)
1a00055e:	4810      	ldr	r0, [pc, #64]	; (1a0005a0 <TaskCreateAll+0xb8>)
1a000560:	f001 fa9d 	bl	1a001a9e <xTaskCreate>
}
1a000564:	b003      	add	sp, #12
1a000566:	bd30      	pop	{r4, r5, pc}
1a000568:	1a005590 	.word	0x1a005590
1a00056c:	1a000939 	.word	0x1a000939
1a000570:	1000015c 	.word	0x1000015c
1a000574:	1a00559c 	.word	0x1a00559c
1a000578:	1a0007e9 	.word	0x1a0007e9
1a00057c:	1a0055a8 	.word	0x1a0055a8
1a000580:	1a00080d 	.word	0x1a00080d
1a000584:	1a0055c0 	.word	0x1a0055c0
1a000588:	1a000851 	.word	0x1a000851
1a00058c:	1a0055d8 	.word	0x1a0055d8
1a000590:	1a000895 	.word	0x1a000895
1a000594:	1a0055f0 	.word	0x1a0055f0
1a000598:	1a0008ad 	.word	0x1a0008ad
1a00059c:	1a005608 	.word	0x1a005608
1a0005a0:	1a0008c5 	.word	0x1a0008c5

1a0005a4 <QueueCreateAll>:

/*=================================================================================
 	 	 	 	 	 	 	 	queue create
 =================================================================================*/
void QueueCreateAll(void){
1a0005a4:	b508      	push	{r3, lr}

	xPointerQueue_OP0	= xQueueCreate(16 , sizeof(Frame_parameters_t)); /*Create queue OP0*/
1a0005a6:	2200      	movs	r2, #0
1a0005a8:	210c      	movs	r1, #12
1a0005aa:	2010      	movs	r0, #16
1a0005ac:	f000 fdf9 	bl	1a0011a2 <xQueueGenericCreate>
1a0005b0:	4b12      	ldr	r3, [pc, #72]	; (1a0005fc <QueueCreateAll+0x58>)
1a0005b2:	6018      	str	r0, [r3, #0]
	xPointerQueue_OP1	= xQueueCreate(16 , sizeof(Frame_parameters_t)); /*Create queue OP0*/
1a0005b4:	2200      	movs	r2, #0
1a0005b6:	210c      	movs	r1, #12
1a0005b8:	2010      	movs	r0, #16
1a0005ba:	f000 fdf2 	bl	1a0011a2 <xQueueGenericCreate>
1a0005be:	4b10      	ldr	r3, [pc, #64]	; (1a000600 <QueueCreateAll+0x5c>)
1a0005c0:	6018      	str	r0, [r3, #0]
	xPointerQueue_OP2	= xQueueCreate(16 , sizeof(Frame_parameters_t)); /*Create queue OP0*/
1a0005c2:	2200      	movs	r2, #0
1a0005c4:	210c      	movs	r1, #12
1a0005c6:	2010      	movs	r0, #16
1a0005c8:	f000 fdeb 	bl	1a0011a2 <xQueueGenericCreate>
1a0005cc:	4b0d      	ldr	r3, [pc, #52]	; (1a000604 <QueueCreateAll+0x60>)
1a0005ce:	6018      	str	r0, [r3, #0]
	xPointerQueue_OP3	= xQueueCreate(16 , sizeof(Frame_parameters_t)); /*Create queue OP0*/
1a0005d0:	2200      	movs	r2, #0
1a0005d2:	210c      	movs	r1, #12
1a0005d4:	2010      	movs	r0, #16
1a0005d6:	f000 fde4 	bl	1a0011a2 <xQueueGenericCreate>
1a0005da:	4b0b      	ldr	r3, [pc, #44]	; (1a000608 <QueueCreateAll+0x64>)
1a0005dc:	6018      	str	r0, [r3, #0]
	xPointerQueue_OP4	= xQueueCreate(16 , sizeof(Frame_parameters_t)); /*Create queue OP0*/
1a0005de:	2200      	movs	r2, #0
1a0005e0:	210c      	movs	r1, #12
1a0005e2:	2010      	movs	r0, #16
1a0005e4:	f000 fddd 	bl	1a0011a2 <xQueueGenericCreate>
1a0005e8:	4b08      	ldr	r3, [pc, #32]	; (1a00060c <QueueCreateAll+0x68>)
1a0005ea:	6018      	str	r0, [r3, #0]
	xPointerQueue_3		= xQueueCreate(16 , sizeof(Frame_parameters_t)); /*Create queue OP0*/
1a0005ec:	2200      	movs	r2, #0
1a0005ee:	210c      	movs	r1, #12
1a0005f0:	2010      	movs	r0, #16
1a0005f2:	f000 fdd6 	bl	1a0011a2 <xQueueGenericCreate>
1a0005f6:	4b06      	ldr	r3, [pc, #24]	; (1a000610 <QueueCreateAll+0x6c>)
1a0005f8:	6018      	str	r0, [r3, #0]

}
1a0005fa:	bd08      	pop	{r3, pc}
1a0005fc:	100030dc 	.word	0x100030dc
1a000600:	100030d8 	.word	0x100030d8
1a000604:	1000301c 	.word	0x1000301c
1a000608:	1000302c 	.word	0x1000302c
1a00060c:	10003014 	.word	0x10003014
1a000610:	10003024 	.word	0x10003024

1a000614 <semaphoreCreateAll>:
/*=================================================================================
 	 	 	 	 	 	 	 	semaphore create
 =================================================================================*/

void semaphoreCreateAll(void){
1a000614:	b508      	push	{r3, lr}
	SemTxUart 	 =  xSemaphoreCreateBinary();
1a000616:	2203      	movs	r2, #3
1a000618:	2100      	movs	r1, #0
1a00061a:	2001      	movs	r0, #1
1a00061c:	f000 fdc1 	bl	1a0011a2 <xQueueGenericCreate>
1a000620:	4b03      	ldr	r3, [pc, #12]	; (1a000630 <semaphoreCreateAll+0x1c>)
1a000622:	6018      	str	r0, [r3, #0]
	SemMutexUart =	xSemaphoreCreateMutex() ;
1a000624:	2001      	movs	r0, #1
1a000626:	f000 fead 	bl	1a001384 <xQueueCreateMutex>
1a00062a:	4b02      	ldr	r3, [pc, #8]	; (1a000634 <semaphoreCreateAll+0x20>)
1a00062c:	6018      	str	r0, [r3, #0]
}
1a00062e:	bd08      	pop	{r3, pc}
1a000630:	10003018 	.word	0x10003018
1a000634:	100030d0 	.word	0x100030d0

1a000638 <itoa>:
 	 	 	 	 	 	 	     	conversions
 =================================================================================*/

char* itoa(int value, char* result, int base) {
	// check that the base if valid
	if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000638:	1e93      	subs	r3, r2, #2
1a00063a:	2b22      	cmp	r3, #34	; 0x22
1a00063c:	d802      	bhi.n	1a000644 <itoa+0xc>
char* itoa(int value, char* result, int base) {
1a00063e:	b4f0      	push	{r4, r5, r6, r7}

	char* ptr = result, *ptr1 = result, tmp_char;
1a000640:	460d      	mov	r5, r1
1a000642:	e005      	b.n	1a000650 <itoa+0x18>
	if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000644:	2300      	movs	r3, #0
1a000646:	700b      	strb	r3, [r1, #0]
		tmp_char = *ptr;
		*ptr--= *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
}
1a000648:	4608      	mov	r0, r1
1a00064a:	4770      	bx	lr
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a00064c:	4635      	mov	r5, r6
		value /= base;
1a00064e:	4620      	mov	r0, r4
1a000650:	fb90 f4f2 	sdiv	r4, r0, r2
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000654:	fb02 0314 	mls	r3, r2, r4, r0
1a000658:	3323      	adds	r3, #35	; 0x23
1a00065a:	1c6e      	adds	r6, r5, #1
1a00065c:	4f0f      	ldr	r7, [pc, #60]	; (1a00069c <itoa+0x64>)
1a00065e:	5cfb      	ldrb	r3, [r7, r3]
1a000660:	702b      	strb	r3, [r5, #0]
	} while ( value );
1a000662:	2c00      	cmp	r4, #0
1a000664:	d1f2      	bne.n	1a00064c <itoa+0x14>
	if (tmp_value < 0) *ptr++ = '-';
1a000666:	2800      	cmp	r0, #0
1a000668:	db04      	blt.n	1a000674 <itoa+0x3c>
	*ptr-- = '\0';
1a00066a:	1e72      	subs	r2, r6, #1
1a00066c:	2300      	movs	r3, #0
1a00066e:	7033      	strb	r3, [r6, #0]
	char* ptr = result, *ptr1 = result, tmp_char;
1a000670:	460b      	mov	r3, r1
	while(ptr1 < ptr) {
1a000672:	e00d      	b.n	1a000690 <itoa+0x58>
	if (tmp_value < 0) *ptr++ = '-';
1a000674:	1cae      	adds	r6, r5, #2
1a000676:	232d      	movs	r3, #45	; 0x2d
1a000678:	706b      	strb	r3, [r5, #1]
1a00067a:	e7f6      	b.n	1a00066a <itoa+0x32>
		tmp_char = *ptr;
1a00067c:	4614      	mov	r4, r2
1a00067e:	f814 0901 	ldrb.w	r0, [r4], #-1
		*ptr--= *ptr1;
1a000682:	461d      	mov	r5, r3
1a000684:	f815 6b01 	ldrb.w	r6, [r5], #1
1a000688:	7016      	strb	r6, [r2, #0]
		*ptr1++ = tmp_char;
1a00068a:	7018      	strb	r0, [r3, #0]
1a00068c:	462b      	mov	r3, r5
		*ptr--= *ptr1;
1a00068e:	4622      	mov	r2, r4
	while(ptr1 < ptr) {
1a000690:	429a      	cmp	r2, r3
1a000692:	d8f3      	bhi.n	1a00067c <itoa+0x44>
}
1a000694:	4608      	mov	r0, r1
1a000696:	bcf0      	pop	{r4, r5, r6, r7}
1a000698:	4770      	bx	lr
1a00069a:	bf00      	nop
1a00069c:	1a005614 	.word	0x1a005614

1a0006a0 <Service>:
/*=================================================================================
 	 	 	 	 	 	 	     	Servicio
 =================================================================================*/

void Service(Module_Data_t *obj ){
1a0006a0:	b530      	push	{r4, r5, lr}
1a0006a2:	b085      	sub	sp, #20
1a0006a4:	4604      	mov	r4, r0
	PcStringToSend = NULL;
	static uint8_t firstEntry = 0;


	/*Proteger datos para hacer copia local*/
	taskENTER_CRITICAL();
1a0006a6:	f002 f8d5 	bl	1a002854 <vPortEnterCritical>
		Frame_parameters.BufferAux = obj->MemoryAllocFunction(sizeof(Data.Buffer));
1a0006aa:	6963      	ldr	r3, [r4, #20]
1a0006ac:	206a      	movs	r0, #106	; 0x6a
1a0006ae:	2100      	movs	r1, #0
1a0006b0:	4798      	blx	r3
1a0006b2:	4d26      	ldr	r5, [pc, #152]	; (1a00074c <Service+0xac>)
1a0006b4:	6068      	str	r0, [r5, #4]
		//Frame_parameters.T = obj->MemoryAllocFunction(sizeof(uint8_t));
		//Frame_parameters.Operation = obj->MemoryAllocFunction(2 );
		strcpy((char*)Frame_parameters.BufferAux ,(const char*)Data.Buffer);
1a0006b6:	4926      	ldr	r1, [pc, #152]	; (1a000750 <Service+0xb0>)
1a0006b8:	f004 fb35 	bl	1a004d26 <strcpy>
	taskEXIT_CRITICAL();
1a0006bc:	f002 f8ec 	bl	1a002898 <vPortExitCritical>

	/*Buscar posición del inicio de la trama*/
	PtrSOF = strchr((const char*)Frame_parameters.BufferAux,_SOF);
1a0006c0:	217b      	movs	r1, #123	; 0x7b
1a0006c2:	6868      	ldr	r0, [r5, #4]
1a0006c4:	f004 fb22 	bl	1a004d0c <strchr>

	if( PtrSOF != NULL ){
1a0006c8:	b178      	cbz	r0, 1a0006ea <Service+0x4a>
1a0006ca:	4601      	mov	r1, r0
		/** Decodificar T :  T[0] -'0' *10 + T[1] - '0'*/
		Frame_parameters.T =  ( *(PtrSOF +  OFFSET_TAMANO)-'0' )*10 + (*(PtrSOF +  OFFSET_TAMANO + 1)-'0' ) ;
1a0006cc:	7882      	ldrb	r2, [r0, #2]
1a0006ce:	78c3      	ldrb	r3, [r0, #3]
1a0006d0:	3a30      	subs	r2, #48	; 0x30
1a0006d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0006d6:	0050      	lsls	r0, r2, #1
1a0006d8:	4403      	add	r3, r0
1a0006da:	3b30      	subs	r3, #48	; 0x30
1a0006dc:	b2db      	uxtb	r3, r3
1a0006de:	706b      	strb	r3, [r5, #1]
		/** Decodificar OP */
		Frame_parameters.Operation = *(PtrSOF +  OFFSET_OP)-'0';
1a0006e0:	784a      	ldrb	r2, [r1, #1]
1a0006e2:	3a30      	subs	r2, #48	; 0x30
1a0006e4:	702a      	strb	r2, [r5, #0]
		/* Cantidad de memoria a reservar*/
		obj->xMaxStringLength = Frame_parameters.T + NUM_ELEMENTOS_REST_FRAME;
1a0006e6:	3306      	adds	r3, #6
1a0006e8:	7123      	strb	r3, [r4, #4]
	}
	//-----------------------------------------------------
	if(Frame_parameters.Operation == OP4){
1a0006ea:	4b18      	ldr	r3, [pc, #96]	; (1a00074c <Service+0xac>)
1a0006ec:	781b      	ldrb	r3, [r3, #0]
1a0006ee:	2b04      	cmp	r3, #4
1a0006f0:	d11a      	bne.n	1a000728 <Service+0x88>
		Frame_parameters.Token = obj->MemoryAllocFunction(sizeof(Token_t));
1a0006f2:	6963      	ldr	r3, [r4, #20]
1a0006f4:	202c      	movs	r0, #44	; 0x2c
1a0006f6:	2100      	movs	r1, #0
1a0006f8:	4798      	blx	r3
1a0006fa:	4d14      	ldr	r5, [pc, #80]	; (1a00074c <Service+0xac>)
1a0006fc:	60a8      	str	r0, [r5, #8]
		taskENTER_CRITICAL();
1a0006fe:	f002 f8a9 	bl	1a002854 <vPortEnterCritical>
		Frame_parameters.Token->PayLoad = Frame_parameters.BufferAux; //{402ab}
1a000702:	68ab      	ldr	r3, [r5, #8]
1a000704:	686a      	ldr	r2, [r5, #4]
1a000706:	609a      	str	r2, [r3, #8]
		Frame_parameters.Token->t_sof = Data.t_sof;
1a000708:	68ab      	ldr	r3, [r5, #8]
1a00070a:	4a11      	ldr	r2, [pc, #68]	; (1a000750 <Service+0xb0>)
1a00070c:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
1a00070e:	60d9      	str	r1, [r3, #12]
		Frame_parameters.Token->t_eof = Data.t_eof;
1a000710:	6f12      	ldr	r2, [r2, #112]	; 0x70
1a000712:	611a      	str	r2, [r3, #16]
		if(!firstEntry){
1a000714:	4a0f      	ldr	r2, [pc, #60]	; (1a000754 <Service+0xb4>)
1a000716:	7812      	ldrb	r2, [r2, #0]
1a000718:	b922      	cbnz	r2, 1a000724 <Service+0x84>
			firstEntry = 1;
1a00071a:	4a0e      	ldr	r2, [pc, #56]	; (1a000754 <Service+0xb4>)
1a00071c:	2101      	movs	r1, #1
1a00071e:	7011      	strb	r1, [r2, #0]
			Frame_parameters.Token->Id_de_paquete =0;
1a000720:	2200      	movs	r2, #0
1a000722:	605a      	str	r2, [r3, #4]
		}
		taskEXIT_CRITICAL();
1a000724:	f002 f8b8 	bl	1a002898 <vPortExitCritical>

	}
	/*Selecionar operaacion*/
	XPointerQueUe = SelecQueueFromOperation(Frame_parameters.Operation);
1a000728:	4b08      	ldr	r3, [pc, #32]	; (1a00074c <Service+0xac>)
1a00072a:	7818      	ldrb	r0, [r3, #0]
1a00072c:	f7ff fe7c 	bl	1a000428 <SelecQueueFromOperation>
	if(XPointerQueUe != NULL){
1a000730:	b150      	cbz	r0, 1a000748 <Service+0xa8>
		/*Envía el puntero al buffer con la trama a la cola*/
		ModuleDinamicMemory_send2(obj,&Frame_parameters,0,NULL,NULL,XPointerQueUe ,portMAX_DELAY);
1a000732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000736:	9202      	str	r2, [sp, #8]
1a000738:	9001      	str	r0, [sp, #4]
1a00073a:	2200      	movs	r2, #0
1a00073c:	9200      	str	r2, [sp, #0]
1a00073e:	4613      	mov	r3, r2
1a000740:	4902      	ldr	r1, [pc, #8]	; (1a00074c <Service+0xac>)
1a000742:	4620      	mov	r0, r4
1a000744:	f000 f9ee 	bl	1a000b24 <ModuleDinamicMemory_send2>
	}

}
1a000748:	b005      	add	sp, #20
1a00074a:	bd30      	pop	{r4, r5, pc}
1a00074c:	10000140 	.word	0x10000140
1a000750:	10003030 	.word	0x10003030
1a000754:	1000014c 	.word	0x1000014c

1a000758 <Report>:
/*=================================================================================
* 	 	 	 	 	 	 	     	Report  Heap = 1 or stack = 0
 =================================================================================*/

void Report( Module_Data_t *obj , char * XpointerQueue, uint8_t SelectHeapOrStack){
1a000758:	b530      	push	{r4, r5, lr}
1a00075a:	b08d      	sub	sp, #52	; 0x34
1a00075c:	4605      	mov	r5, r0
1a00075e:	4614      	mov	r4, r2
	char BuffA[20];
	char * PcStringToSend = NULL;


	PcStringToSend = NULL;
	ModuleDinamicMemory_receive(obj,XpointerQueue, &Frame_parameters, portMAX_DELAY);
1a000760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000764:	aa09      	add	r2, sp, #36	; 0x24
1a000766:	f000 f9f8 	bl	1a000b5a <ModuleDinamicMemory_receive>


	Heap_Stack = SelectHeapOrStack ? xPortGetFreeHeapSize() : uxTaskGetStackHighWaterMark(NULL);
1a00076a:	2c00      	cmp	r4, #0
1a00076c:	d031      	beq.n	1a0007d2 <Report+0x7a>
1a00076e:	f000 fbd7 	bl	1a000f20 <xPortGetFreeHeapSize>

	itoa(Heap_Stack ,BuffA,10);
1a000772:	220a      	movs	r2, #10
1a000774:	a904      	add	r1, sp, #16
1a000776:	f7ff ff5f 	bl	1a000638 <itoa>

	/*Puntero donde se copia el stack*/

	if (PcStringToSend == NULL) PcStringToSend = obj->MemoryAllocFunction(strlen(BuffA)+ NUM_ELEMENTOS_REST_FRAME);
1a00077a:	696c      	ldr	r4, [r5, #20]
1a00077c:	a804      	add	r0, sp, #16
1a00077e:	f004 fada 	bl	1a004d36 <strlen>
1a000782:	3006      	adds	r0, #6
1a000784:	2100      	movs	r1, #0
1a000786:	47a0      	blx	r4

	if(PcStringToSend != NULL){
1a000788:	4604      	mov	r4, r0
1a00078a:	b170      	cbz	r0, 1a0007aa <Report+0x52>

		//TOKEN 10.6.19
		sprintf(PcStringToSend+2,"%02d%s%}",strlen(BuffA),BuffA);
1a00078c:	a804      	add	r0, sp, #16
1a00078e:	f004 fad2 	bl	1a004d36 <strlen>
1a000792:	ab04      	add	r3, sp, #16
1a000794:	4602      	mov	r2, r0
1a000796:	4911      	ldr	r1, [pc, #68]	; (1a0007dc <Report+0x84>)
1a000798:	1ca0      	adds	r0, r4, #2
1a00079a:	f004 fa97 	bl	1a004ccc <siprintf>

		*PcStringToSend = *(Frame_parameters.BufferAux);
1a00079e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0007a0:	781b      	ldrb	r3, [r3, #0]
1a0007a2:	7023      	strb	r3, [r4, #0]
		*(PcStringToSend + 1) = *(Frame_parameters.BufferAux + 1);
1a0007a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0007a6:	785b      	ldrb	r3, [r3, #1]
1a0007a8:	7063      	strb	r3, [r4, #1]
	}
	ModuleData.MemoryFreeFunction( Frame_parameters.BufferAux);
1a0007aa:	4b0d      	ldr	r3, [pc, #52]	; (1a0007e0 <Report+0x88>)
1a0007ac:	699b      	ldr	r3, [r3, #24]
1a0007ae:	980a      	ldr	r0, [sp, #40]	; 0x28
1a0007b0:	4798      	blx	r3
	 Frame_parameters.BufferAux = PcStringToSend;
1a0007b2:	940a      	str	r4, [sp, #40]	; 0x28
	// Enviar a cola de TaskTxUARt
	ModuleDinamicMemory_send2(obj,&Frame_parameters,0,NULL,NULL, xPointerQueue_3,portMAX_DELAY);
1a0007b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0007b8:	9302      	str	r3, [sp, #8]
1a0007ba:	4b0a      	ldr	r3, [pc, #40]	; (1a0007e4 <Report+0x8c>)
1a0007bc:	681b      	ldr	r3, [r3, #0]
1a0007be:	9301      	str	r3, [sp, #4]
1a0007c0:	2200      	movs	r2, #0
1a0007c2:	9200      	str	r2, [sp, #0]
1a0007c4:	4613      	mov	r3, r2
1a0007c6:	a909      	add	r1, sp, #36	; 0x24
1a0007c8:	4628      	mov	r0, r5
1a0007ca:	f000 f9ab 	bl	1a000b24 <ModuleDinamicMemory_send2>

	/*Libera memoria dinamica {300} recibido del buffer*/

}
1a0007ce:	b00d      	add	sp, #52	; 0x34
1a0007d0:	bd30      	pop	{r4, r5, pc}
	Heap_Stack = SelectHeapOrStack ? xPortGetFreeHeapSize() : uxTaskGetStackHighWaterMark(NULL);
1a0007d2:	2000      	movs	r0, #0
1a0007d4:	f001 fc24 	bl	1a002020 <uxTaskGetStackHighWaterMark>
1a0007d8:	e7cb      	b.n	1a000772 <Report+0x1a>
1a0007da:	bf00      	nop
1a0007dc:	1a005584 	.word	0x1a005584
1a0007e0:	100030ac 	.word	0x100030ac
1a0007e4:	10003024 	.word	0x10003024

1a0007e8 <TaskService>:

/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea  |
 =================================================================================*/

void TaskService( void* taskParmPtr ){
1a0007e8:	b508      	push	{r3, lr}
	while(TRUE) {
		/*Notifica que llego trama Buena*/
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
1a0007ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0007ee:	2200      	movs	r2, #0
1a0007f0:	4611      	mov	r1, r2
1a0007f2:	4610      	mov	r0, r2
1a0007f4:	f001 fc88 	bl	1a002108 <xTaskNotifyWait>
		Service(&ModuleData);
1a0007f8:	4803      	ldr	r0, [pc, #12]	; (1a000808 <TaskService+0x20>)
1a0007fa:	f7ff ff51 	bl	1a0006a0 <Service>
		gpioToggle( LEDB );
1a0007fe:	202c      	movs	r0, #44	; 0x2c
1a000800:	f003 fbb5 	bl	1a003f6e <gpioToggle>
1a000804:	e7f1      	b.n	1a0007ea <TaskService+0x2>
1a000806:	bf00      	nop
1a000808:	100030ac 	.word	0x100030ac

1a00080c <Task_ToMayusculas_OP0>:
}

/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea Mayusculizar |
 =================================================================================*/
void Task_ToMayusculas_OP0( void* taskParmPtr ){
1a00080c:	b500      	push	{lr}
1a00080e:	b089      	sub	sp, #36	; 0x24
	Frame_parameters_t Frame_parameters;
	while(1){
		ModuleDinamicMemory_receive(&ModuleData, xPointerQueue_OP0,&Frame_parameters, portMAX_DELAY);
1a000810:	4c0c      	ldr	r4, [pc, #48]	; (1a000844 <Task_ToMayusculas_OP0+0x38>)
1a000812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000816:	aa05      	add	r2, sp, #20
1a000818:	490b      	ldr	r1, [pc, #44]	; (1a000848 <Task_ToMayusculas_OP0+0x3c>)
1a00081a:	6809      	ldr	r1, [r1, #0]
1a00081c:	4620      	mov	r0, r4
1a00081e:	f000 f99c 	bl	1a000b5a <ModuleDinamicMemory_receive>
		packetToUpper((Frame_parameters.BufferAux));
1a000822:	9806      	ldr	r0, [sp, #24]
1a000824:	f7ff fe41 	bl	1a0004aa <packetToUpper>
		// Enviar a cola de TaskTxUARt
		ModuleDinamicMemory_send2(&ModuleData,&Frame_parameters,0,NULL,NULL, xPointerQueue_3,portMAX_DELAY);
1a000828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00082c:	9302      	str	r3, [sp, #8]
1a00082e:	4b07      	ldr	r3, [pc, #28]	; (1a00084c <Task_ToMayusculas_OP0+0x40>)
1a000830:	681b      	ldr	r3, [r3, #0]
1a000832:	9301      	str	r3, [sp, #4]
1a000834:	2200      	movs	r2, #0
1a000836:	9200      	str	r2, [sp, #0]
1a000838:	4613      	mov	r3, r2
1a00083a:	a905      	add	r1, sp, #20
1a00083c:	4620      	mov	r0, r4
1a00083e:	f000 f971 	bl	1a000b24 <ModuleDinamicMemory_send2>
1a000842:	e7e5      	b.n	1a000810 <Task_ToMayusculas_OP0+0x4>
1a000844:	100030ac 	.word	0x100030ac
1a000848:	100030dc 	.word	0x100030dc
1a00084c:	10003024 	.word	0x10003024

1a000850 <Task_ToMinusculas_OP1>:
}

/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea Minusculizar |
 =================================================================================*/
void Task_ToMinusculas_OP1( void* taskParmPtr ){
1a000850:	b500      	push	{lr}
1a000852:	b089      	sub	sp, #36	; 0x24
	Frame_parameters_t Frame_parameters;
	while(1){
		ModuleDinamicMemory_receive(&ModuleData, xPointerQueue_OP1,&Frame_parameters, portMAX_DELAY);
1a000854:	4c0c      	ldr	r4, [pc, #48]	; (1a000888 <Task_ToMinusculas_OP1+0x38>)
1a000856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00085a:	aa05      	add	r2, sp, #20
1a00085c:	490b      	ldr	r1, [pc, #44]	; (1a00088c <Task_ToMinusculas_OP1+0x3c>)
1a00085e:	6809      	ldr	r1, [r1, #0]
1a000860:	4620      	mov	r0, r4
1a000862:	f000 f97a 	bl	1a000b5a <ModuleDinamicMemory_receive>
		packetToLower((Frame_parameters.BufferAux));
1a000866:	9806      	ldr	r0, [sp, #24]
1a000868:	f7ff fe00 	bl	1a00046c <packetToLower>
		// Enviar a cola de TaskTxUARt
		ModuleDinamicMemory_send2(&ModuleData,&Frame_parameters,0,NULL,NULL, xPointerQueue_3,portMAX_DELAY);
1a00086c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000870:	9302      	str	r3, [sp, #8]
1a000872:	4b07      	ldr	r3, [pc, #28]	; (1a000890 <Task_ToMinusculas_OP1+0x40>)
1a000874:	681b      	ldr	r3, [r3, #0]
1a000876:	9301      	str	r3, [sp, #4]
1a000878:	2200      	movs	r2, #0
1a00087a:	9200      	str	r2, [sp, #0]
1a00087c:	4613      	mov	r3, r2
1a00087e:	a905      	add	r1, sp, #20
1a000880:	4620      	mov	r0, r4
1a000882:	f000 f94f 	bl	1a000b24 <ModuleDinamicMemory_send2>
1a000886:	e7e5      	b.n	1a000854 <Task_ToMinusculas_OP1+0x4>
1a000888:	100030ac 	.word	0x100030ac
1a00088c:	100030d8 	.word	0x100030d8
1a000890:	10003024 	.word	0x10003024

1a000894 <Task_ReportStack_OP2>:
}

/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea Reportar stack disponible |
 =================================================================================*/
void Task_ReportStack_OP2( void* taskParmPtr ){
1a000894:	b508      	push	{r3, lr}
	while(1){
		Report(&ModuleData,xPointerQueue_OP2,STACK_);
1a000896:	2200      	movs	r2, #0
1a000898:	4b02      	ldr	r3, [pc, #8]	; (1a0008a4 <Task_ReportStack_OP2+0x10>)
1a00089a:	6819      	ldr	r1, [r3, #0]
1a00089c:	4802      	ldr	r0, [pc, #8]	; (1a0008a8 <Task_ReportStack_OP2+0x14>)
1a00089e:	f7ff ff5b 	bl	1a000758 <Report>
1a0008a2:	e7f8      	b.n	1a000896 <Task_ReportStack_OP2+0x2>
1a0008a4:	1000301c 	.word	0x1000301c
1a0008a8:	100030ac 	.word	0x100030ac

1a0008ac <Task_ReportHeap_OP3>:
	}
}
/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea Reportar heap disponible |
 =================================================================================*/
void Task_ReportHeap_OP3( void* taskParmPtr ){
1a0008ac:	b508      	push	{r3, lr}
	while(1){
		Report(&ModuleData,xPointerQueue_OP3,HEAP_);
1a0008ae:	2201      	movs	r2, #1
1a0008b0:	4b02      	ldr	r3, [pc, #8]	; (1a0008bc <Task_ReportHeap_OP3+0x10>)
1a0008b2:	6819      	ldr	r1, [r3, #0]
1a0008b4:	4802      	ldr	r0, [pc, #8]	; (1a0008c0 <Task_ReportHeap_OP3+0x14>)
1a0008b6:	f7ff ff4f 	bl	1a000758 <Report>
1a0008ba:	e7f8      	b.n	1a0008ae <Task_ReportHeap_OP3+0x2>
1a0008bc:	1000302c 	.word	0x1000302c
1a0008c0:	100030ac 	.word	0x100030ac

1a0008c4 <Task_OP4>:
}

/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea Reportar heap disponible |
 =================================================================================*/
void Task_OP4( void* taskParmPtr ){
1a0008c4:	b500      	push	{lr}
1a0008c6:	b085      	sub	sp, #20
	static Frame_parameters_t Frame_parameters;
	while(1){
		ModuleDinamicMemory_receive(&ModuleData, xPointerQueue_OP4,&Frame_parameters, portMAX_DELAY);
1a0008c8:	4c16      	ldr	r4, [pc, #88]	; (1a000924 <Task_OP4+0x60>)
1a0008ca:	4d17      	ldr	r5, [pc, #92]	; (1a000928 <Task_OP4+0x64>)
1a0008cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0008d0:	4622      	mov	r2, r4
1a0008d2:	4916      	ldr	r1, [pc, #88]	; (1a00092c <Task_OP4+0x68>)
1a0008d4:	6809      	ldr	r1, [r1, #0]
1a0008d6:	4628      	mov	r0, r5
1a0008d8:	f000 f93f 	bl	1a000b5a <ModuleDinamicMemory_receive>


		Frame_parameters.Token->t_InitConvert =cyclesCounterToUs(*_DWT_CYCCNT);
1a0008dc:	4e14      	ldr	r6, [pc, #80]	; (1a000930 <Task_OP4+0x6c>)
1a0008de:	6833      	ldr	r3, [r6, #0]
1a0008e0:	6818      	ldr	r0, [r3, #0]
1a0008e2:	f002 ffb5 	bl	1a003850 <cyclesCounterToUs>
1a0008e6:	68a3      	ldr	r3, [r4, #8]
1a0008e8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
1a0008ec:	ed83 0a05 	vstr	s0, [r3, #20]
		packetToUpper((Frame_parameters.Token->PayLoad));
1a0008f0:	6898      	ldr	r0, [r3, #8]
1a0008f2:	f7ff fdda 	bl	1a0004aa <packetToUpper>
		Frame_parameters.Token->t_EndConvert = cyclesCounterToUs(*_DWT_CYCCNT);
1a0008f6:	6833      	ldr	r3, [r6, #0]
1a0008f8:	6818      	ldr	r0, [r3, #0]
1a0008fa:	f002 ffa9 	bl	1a003850 <cyclesCounterToUs>
1a0008fe:	68a3      	ldr	r3, [r4, #8]
1a000900:	eebc 0ac0 	vcvt.u32.f32	s0, s0
1a000904:	ed83 0a06 	vstr	s0, [r3, #24]
		// Enviar a cola de TaskTxUARt
		ModuleDinamicMemory_send2(&ModuleData,&Frame_parameters,0,NULL,NULL, xPointerQueue_3,portMAX_DELAY);
1a000908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00090c:	9302      	str	r3, [sp, #8]
1a00090e:	4b09      	ldr	r3, [pc, #36]	; (1a000934 <Task_OP4+0x70>)
1a000910:	681b      	ldr	r3, [r3, #0]
1a000912:	9301      	str	r3, [sp, #4]
1a000914:	2200      	movs	r2, #0
1a000916:	9200      	str	r2, [sp, #0]
1a000918:	4613      	mov	r3, r2
1a00091a:	4621      	mov	r1, r4
1a00091c:	4628      	mov	r0, r5
1a00091e:	f000 f901 	bl	1a000b24 <ModuleDinamicMemory_send2>
1a000922:	e7d1      	b.n	1a0008c8 <Task_OP4+0x4>
1a000924:	10000150 	.word	0x10000150
1a000928:	100030ac 	.word	0x100030ac
1a00092c:	10003014 	.word	0x10003014
1a000930:	1000000c 	.word	0x1000000c
1a000934:	10003024 	.word	0x10003024

1a000938 <TaskTxUart>:
	}
}
/*=================================================================================
 	 	 	 	 	 	 	 	 | Tarea tx |
 =================================================================================*/
void TaskTxUart( void* taskParmPtr ){
1a000938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00093c:	b0bc      	sub	sp, #240	; 0xf0
	char Txbuffer[200];
	char *PtrSOF;
	Frame_parameters_t Frame_parameters = {0 , 0, NULL,NULL};
1a00093e:	2300      	movs	r3, #0
1a000940:	9307      	str	r3, [sp, #28]
1a000942:	9308      	str	r3, [sp, #32]
1a000944:	9309      	str	r3, [sp, #36]	; 0x24
1a000946:	e061      	b.n	1a000a0c <TaskTxUart+0xd4>
			if(Frame_parameters.Operation != OP4){
				sprintf( Txbuffer, "%s",(Frame_parameters.BufferAux));
				uartWriteString(UART_USB,Txbuffer);
			}
			else{
				sprintf( Txbuffer, "\r\nPerformances:\r\n05%s ID:%d\r\nTiempos en us:\r\nTsof:%lu Teof:%lu Ticonv:%lu Teconv:%lu Tstx:%lu",(Frame_parameters.Token->PayLoad),Frame_parameters.Token->Id_de_paquete, Frame_parameters.Token->t_sof, Frame_parameters.Token->t_eof,Frame_parameters.Token->t_InitConvert,Frame_parameters.Token->t_EndConvert, (Frame_parameters.Token->t_InitTx = cyclesCounterToUs(*_DWT_CYCCNT)));
1a000948:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00094a:	689c      	ldr	r4, [r3, #8]
1a00094c:	685e      	ldr	r6, [r3, #4]
1a00094e:	68df      	ldr	r7, [r3, #12]
1a000950:	f8d3 8010 	ldr.w	r8, [r3, #16]
1a000954:	f8d3 9014 	ldr.w	r9, [r3, #20]
1a000958:	f8d3 a018 	ldr.w	sl, [r3, #24]
1a00095c:	4d40      	ldr	r5, [pc, #256]	; (1a000a60 <TaskTxUart+0x128>)
1a00095e:	682b      	ldr	r3, [r5, #0]
1a000960:	6818      	ldr	r0, [r3, #0]
1a000962:	f002 ff75 	bl	1a003850 <cyclesCounterToUs>
1a000966:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a00096a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00096c:	edc2 7a07 	vstr	s15, [r2, #28]
1a000970:	edcd 7a04 	vstr	s15, [sp, #16]
1a000974:	f8cd a00c 	str.w	sl, [sp, #12]
1a000978:	f8cd 9008 	str.w	r9, [sp, #8]
1a00097c:	f8cd 8004 	str.w	r8, [sp, #4]
1a000980:	9700      	str	r7, [sp, #0]
1a000982:	4633      	mov	r3, r6
1a000984:	4622      	mov	r2, r4
1a000986:	4937      	ldr	r1, [pc, #220]	; (1a000a64 <TaskTxUart+0x12c>)
1a000988:	a80a      	add	r0, sp, #40	; 0x28
1a00098a:	f004 f99f 	bl	1a004ccc <siprintf>
				uartWriteString(UART_USB,Txbuffer);
1a00098e:	a90a      	add	r1, sp, #40	; 0x28
1a000990:	2003      	movs	r0, #3
1a000992:	f003 f8d6 	bl	1a003b42 <uartWriteString>
				memset(Txbuffer,0,sizeof(Txbuffer));
1a000996:	24c8      	movs	r4, #200	; 0xc8
1a000998:	4622      	mov	r2, r4
1a00099a:	2100      	movs	r1, #0
1a00099c:	a80a      	add	r0, sp, #40	; 0x28
1a00099e:	f004 f98c 	bl	1a004cba <memset>
				sprintf( Txbuffer, " Tetx:%lu\r\n",(Frame_parameters.Token->t_EndTx = cyclesCounterToUs(*_DWT_CYCCNT)));
1a0009a2:	682b      	ldr	r3, [r5, #0]
1a0009a4:	6818      	ldr	r0, [r3, #0]
1a0009a6:	f002 ff53 	bl	1a003850 <cyclesCounterToUs>
1a0009aa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a0009ae:	ee17 2a90 	vmov	r2, s15
1a0009b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0009b4:	edc3 7a08 	vstr	s15, [r3, #32]
1a0009b8:	492b      	ldr	r1, [pc, #172]	; (1a000a68 <TaskTxUart+0x130>)
1a0009ba:	a80a      	add	r0, sp, #40	; 0x28
1a0009bc:	f004 f986 	bl	1a004ccc <siprintf>
				uartWriteString(UART_USB,Txbuffer);
1a0009c0:	a90a      	add	r1, sp, #40	; 0x28
1a0009c2:	2003      	movs	r0, #3
1a0009c4:	f003 f8bd 	bl	1a003b42 <uartWriteString>
				memset(Txbuffer,0,sizeof(Txbuffer));
1a0009c8:	4622      	mov	r2, r4
1a0009ca:	2100      	movs	r1, #0
1a0009cc:	a80a      	add	r0, sp, #40	; 0x28
1a0009ce:	f004 f974 	bl	1a004cba <memset>
				sprintf( Txbuffer, "[TimeProcPack] : %lu\r\n[TimeProcMayus] : %lu\r\n[TxTimeProc] : %lu\r\n",(Frame_parameters.Token->t_eof),(Frame_parameters.Token->t_EndConvert -Frame_parameters.Token->t_InitConvert), (Frame_parameters.Token->t_EndTx -Frame_parameters.Token->t_InitTx ) );
1a0009d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0009d4:	6990      	ldr	r0, [r2, #24]
1a0009d6:	6953      	ldr	r3, [r2, #20]
1a0009d8:	6a11      	ldr	r1, [r2, #32]
1a0009da:	69d4      	ldr	r4, [r2, #28]
1a0009dc:	6912      	ldr	r2, [r2, #16]
1a0009de:	1b09      	subs	r1, r1, r4
1a0009e0:	9100      	str	r1, [sp, #0]
1a0009e2:	1ac3      	subs	r3, r0, r3
1a0009e4:	4921      	ldr	r1, [pc, #132]	; (1a000a6c <TaskTxUart+0x134>)
1a0009e6:	a80a      	add	r0, sp, #40	; 0x28
1a0009e8:	f004 f970 	bl	1a004ccc <siprintf>
				uartWriteString(UART_USB,Txbuffer);
1a0009ec:	a90a      	add	r1, sp, #40	; 0x28
1a0009ee:	2003      	movs	r0, #3
1a0009f0:	f003 f8a7 	bl	1a003b42 <uartWriteString>
				Frame_parameters.Token->Id_de_paquete ++;
1a0009f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0009f6:	6853      	ldr	r3, [r2, #4]
1a0009f8:	3301      	adds	r3, #1
1a0009fa:	6053      	str	r3, [r2, #4]
			}
			//Transmit_UART( 0 );   // La primera vez – con esto arranca


		}
		ModuleData.MemoryFreeFunction((Frame_parameters.BufferAux));
1a0009fc:	4b1c      	ldr	r3, [pc, #112]	; (1a000a70 <TaskTxUart+0x138>)
1a0009fe:	699b      	ldr	r3, [r3, #24]
1a000a00:	9808      	ldr	r0, [sp, #32]
1a000a02:	4798      	blx	r3
		if(Frame_parameters.Operation == OP4) ModuleData.MemoryFreeFunction((Frame_parameters.Token)); //TOKEN 10.6.19
1a000a04:	f89d 301c 	ldrb.w	r3, [sp, #28]
1a000a08:	2b04      	cmp	r3, #4
1a000a0a:	d024      	beq.n	1a000a56 <TaskTxUart+0x11e>
		ModuleDinamicMemory_receive(&ModuleData, xPointerQueue_3,&Frame_parameters, portMAX_DELAY);
1a000a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000a10:	aa07      	add	r2, sp, #28
1a000a12:	4918      	ldr	r1, [pc, #96]	; (1a000a74 <TaskTxUart+0x13c>)
1a000a14:	6809      	ldr	r1, [r1, #0]
1a000a16:	4816      	ldr	r0, [pc, #88]	; (1a000a70 <TaskTxUart+0x138>)
1a000a18:	f000 f89f 	bl	1a000b5a <ModuleDinamicMemory_receive>
		gpioToggle( LED3 );
1a000a1c:	202f      	movs	r0, #47	; 0x2f
1a000a1e:	f003 faa6 	bl	1a003f6e <gpioToggle>
		if( uartTxReady( UART_USB ) ){
1a000a22:	2003      	movs	r0, #3
1a000a24:	f003 f822 	bl	1a003a6c <uartTxReady>
1a000a28:	2800      	cmp	r0, #0
1a000a2a:	d0e7      	beq.n	1a0009fc <TaskTxUart+0xc4>
			PtrSOF = strchr((const char*)Frame_parameters.BufferAux,_SOF);
1a000a2c:	9c08      	ldr	r4, [sp, #32]
1a000a2e:	217b      	movs	r1, #123	; 0x7b
1a000a30:	4620      	mov	r0, r4
1a000a32:	f004 f96b 	bl	1a004d0c <strchr>
			Frame_parameters.Operation = *(PtrSOF +  OFFSET_OP)-'0';
1a000a36:	7843      	ldrb	r3, [r0, #1]
1a000a38:	3b30      	subs	r3, #48	; 0x30
1a000a3a:	b2db      	uxtb	r3, r3
1a000a3c:	f88d 301c 	strb.w	r3, [sp, #28]
			if(Frame_parameters.Operation != OP4){
1a000a40:	2b04      	cmp	r3, #4
1a000a42:	d081      	beq.n	1a000948 <TaskTxUart+0x10>
				sprintf( Txbuffer, "%s",(Frame_parameters.BufferAux));
1a000a44:	4621      	mov	r1, r4
1a000a46:	a80a      	add	r0, sp, #40	; 0x28
1a000a48:	f004 f96d 	bl	1a004d26 <strcpy>
				uartWriteString(UART_USB,Txbuffer);
1a000a4c:	a90a      	add	r1, sp, #40	; 0x28
1a000a4e:	2003      	movs	r0, #3
1a000a50:	f003 f877 	bl	1a003b42 <uartWriteString>
1a000a54:	e7d2      	b.n	1a0009fc <TaskTxUart+0xc4>
		if(Frame_parameters.Operation == OP4) ModuleData.MemoryFreeFunction((Frame_parameters.Token)); //TOKEN 10.6.19
1a000a56:	4b06      	ldr	r3, [pc, #24]	; (1a000a70 <TaskTxUart+0x138>)
1a000a58:	699b      	ldr	r3, [r3, #24]
1a000a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
1a000a5c:	4798      	blx	r3
1a000a5e:	e7d5      	b.n	1a000a0c <TaskTxUart+0xd4>
1a000a60:	1000000c 	.word	0x1000000c
1a000a64:	1a00565c 	.word	0x1a00565c
1a000a68:	1a0056bc 	.word	0x1a0056bc
1a000a6c:	1a0056c8 	.word	0x1a0056c8
1a000a70:	100030ac 	.word	0x100030ac
1a000a74:	10003024 	.word	0x10003024

1a000a78 <CallbackRx>:
}

/*=================================================================================
 	 	 	 	 	 	 	 	 | Callback IT RX |
 =================================================================================*/
void CallbackRx( void *noUsado ){
1a000a78:	b500      	push	{lr}
1a000a7a:	b083      	sub	sp, #12

	UBaseType_t uxSavedInterruptStatus;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;

	volatile char c = uartRxRead( UART_USB );  /*Char received*/
1a000a7c:	2003      	movs	r0, #3
1a000a7e:	f003 f801 	bl	1a003a84 <uartRxRead>
1a000a82:	f88d 0007 	strb.w	r0, [sp, #7]

	/*Funcion pertenece al driver   R6*/
	ModuleData.Add_IncommingFrameFunction(uxSavedInterruptStatus ,xHigherPriorityTaskWoken,c);
1a000a86:	4b05      	ldr	r3, [pc, #20]	; (1a000a9c <CallbackRx+0x24>)
1a000a88:	6a1b      	ldr	r3, [r3, #32]
1a000a8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000a8e:	2100      	movs	r1, #0
1a000a90:	4608      	mov	r0, r1
1a000a92:	4798      	blx	r3

	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}
1a000a94:	b003      	add	sp, #12
1a000a96:	f85d fb04 	ldr.w	pc, [sp], #4
1a000a9a:	bf00      	nop
1a000a9c:	100030ac 	.word	0x100030ac

1a000aa0 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
1a000aa0:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock *fb;
    uint_fast16_t nblocks;
	
    me->free_head = poolSto;
1a000aa2:	6001      	str	r1, [r0, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
1a000aa4:	2404      	movs	r4, #4
1a000aa6:	8184      	strh	r4, [r0, #12]
    nblocks = (uint_fast16_t)1;/* #free blocks that fit in one memory block */
1a000aa8:	2601      	movs	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) {
1a000aaa:	e002      	b.n	1a000ab2 <QMPool_init+0x12>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
1a000aac:	3404      	adds	r4, #4
1a000aae:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a000ab0:	3601      	adds	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) {
1a000ab2:	8984      	ldrh	r4, [r0, #12]
1a000ab4:	b29d      	uxth	r5, r3
1a000ab6:	42ac      	cmp	r4, r5
1a000ab8:	d3f8      	bcc.n	1a000aac <QMPool_init+0xc>
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
1a000aba:	4627      	mov	r7, r4

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
1a000abc:	1b14      	subs	r4, r2, r4
    me->nTot  = (QMPoolCtr)1;    /* the last block already in the pool */
1a000abe:	2301      	movs	r3, #1
1a000ac0:	81c3      	strh	r3, [r0, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
1a000ac2:	6803      	ldr	r3, [r0, #0]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
1a000ac4:	e007      	b.n	1a000ad6 <QMPool_init+0x36>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
1a000ac6:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a000aca:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
1a000acc:	681b      	ldr	r3, [r3, #0]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
1a000ace:	1be4      	subs	r4, r4, r7
        ++me->nTot;              /* increment the number of blocks so far */
1a000ad0:	89c5      	ldrh	r5, [r0, #14]
1a000ad2:	3501      	adds	r5, #1
1a000ad4:	81c5      	strh	r5, [r0, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {
1a000ad6:	42bc      	cmp	r4, r7
1a000ad8:	d2f5      	bcs.n	1a000ac6 <QMPool_init+0x26>
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
1a000ada:	2200      	movs	r2, #0
1a000adc:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
1a000ade:	89c2      	ldrh	r2, [r0, #14]
1a000ae0:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
1a000ae2:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;         /* the original start this pool buffer */
1a000ae4:	6041      	str	r1, [r0, #4]
    me->end   = fb;              /* the last block in this pool */
1a000ae6:	6083      	str	r3, [r0, #8]
}
1a000ae8:	bcf0      	pop	{r4, r5, r6, r7}
1a000aea:	4770      	bx	lr

1a000aec <QMPools_inicializar>:
// Tamaño chico
static uint8_t mem_for_small_pool[SMALL_MEM_POOL_SPACE * BIG_MEM_POOL_BLOCK_QTY];  // Small pool storage (large qty blocks, of small space)
QMPool mem_pool_small;														       // Small pool ctrl-struct


void QMPools_inicializar(void){
1a000aec:	b508      	push	{r3, lr}
	//Inicialización del Pool grande
	QMPool_init(&mem_pool_small,
1a000aee:	2340      	movs	r3, #64	; 0x40
1a000af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000af4:	4902      	ldr	r1, [pc, #8]	; (1a000b00 <QMPools_inicializar+0x14>)
1a000af6:	4803      	ldr	r0, [pc, #12]	; (1a000b04 <QMPools_inicializar+0x18>)
1a000af8:	f7ff ffd2 	bl	1a000aa0 <QMPool_init>
			mem_for_small_pool,
			sizeof(mem_for_small_pool),
			SMALL_MEM_POOL_BLOCK_QTY);
}
1a000afc:	bd08      	pop	{r3, pc}
1a000afe:	bf00      	nop
1a000b00:	10000160 	.word	0x10000160
1a000b04:	10003108 	.word	0x10003108

1a000b08 <ModuleDinamicMemory_initialize>:

void ModuleDinamicMemory_initialize( Module_Data_t *obj , uint32_t MaxLength, xQueueSendFCN xQueueSendFCN,
		xQueueSendFromISRFCN xQueueSendFromISRFCN, xQueueReceiveFCN xQueueReceiveFCN, xQueueCreateFCN xQueueCreateFCN,
		 MemoryAllocFCN MemoryAllocFCN,MemoryFreeFCN MemoryFreeFCN, Add_IncommingFrameFCN Add_IncommingFrameFCN){

	obj->xMaxStringLength = MaxLength;
1a000b08:	7101      	strb	r1, [r0, #4]
	obj->xQueueCreateFunction =xQueueCreateFCN;
1a000b0a:	9901      	ldr	r1, [sp, #4]
1a000b0c:	61c1      	str	r1, [r0, #28]
	obj->xQueueSendFunction = xQueueSendFCN;
1a000b0e:	6082      	str	r2, [r0, #8]
	obj->xQueueSendFromISRFunction = xQueueSendFromISRFCN;
1a000b10:	60c3      	str	r3, [r0, #12]
	obj->xQueueReceiveFunction = xQueueReceiveFCN;
1a000b12:	9b00      	ldr	r3, [sp, #0]
1a000b14:	6103      	str	r3, [r0, #16]
	obj->MemoryAllocFunction = MemoryAllocFCN;
1a000b16:	9b02      	ldr	r3, [sp, #8]
1a000b18:	6143      	str	r3, [r0, #20]
	obj->MemoryFreeFunction = MemoryFreeFCN;
1a000b1a:	9b03      	ldr	r3, [sp, #12]
1a000b1c:	6183      	str	r3, [r0, #24]
	obj->Add_IncommingFrameFunction = Add_IncommingFrameFCN;
1a000b1e:	9b04      	ldr	r3, [sp, #16]
1a000b20:	6203      	str	r3, [r0, #32]
}
1a000b22:	4770      	bx	lr

1a000b24 <ModuleDinamicMemory_send2>:

void ModuleDinamicMemory_send2( Module_Data_t *obj ,void *PcStringToSend, uint8_t Isr, long * const xHigherPriorityTaskWoken, void * pbuf ,char * XpointerQueue, uint32_t portMaxDelay){
1a000b24:	b570      	push	{r4, r5, r6, lr}
1a000b26:	b082      	sub	sp, #8
1a000b28:	4604      	mov	r4, r0
1a000b2a:	9101      	str	r1, [sp, #4]
1a000b2c:	4615      	mov	r5, r2
1a000b2e:	461e      	mov	r6, r3
	if(PcStringToSend != NULL) strcpy(PcStringToSend ,pbuf);
1a000b30:	b119      	cbz	r1, 1a000b3a <ModuleDinamicMemory_send2+0x16>
1a000b32:	4608      	mov	r0, r1
1a000b34:	9906      	ldr	r1, [sp, #24]
1a000b36:	f004 f8f6 	bl	1a004d26 <strcpy>

	/*Si uso el enviar en una isr*/
	if(Isr) obj->xQueueSendFromISRFunction(XpointerQueue ,&PcStringToSend,xHigherPriorityTaskWoken, 0);
1a000b3a:	b93d      	cbnz	r5, 1a000b4c <ModuleDinamicMemory_send2+0x28>
	else  obj->xQueueSendFunction(XpointerQueue ,PcStringToSend,portMaxDelay, 0);
1a000b3c:	68a4      	ldr	r4, [r4, #8]
1a000b3e:	2300      	movs	r3, #0
1a000b40:	9a08      	ldr	r2, [sp, #32]
1a000b42:	9901      	ldr	r1, [sp, #4]
1a000b44:	9807      	ldr	r0, [sp, #28]
1a000b46:	47a0      	blx	r4
}
1a000b48:	b002      	add	sp, #8
1a000b4a:	bd70      	pop	{r4, r5, r6, pc}
	if(Isr) obj->xQueueSendFromISRFunction(XpointerQueue ,&PcStringToSend,xHigherPriorityTaskWoken, 0);
1a000b4c:	68e4      	ldr	r4, [r4, #12]
1a000b4e:	2300      	movs	r3, #0
1a000b50:	4632      	mov	r2, r6
1a000b52:	a901      	add	r1, sp, #4
1a000b54:	9807      	ldr	r0, [sp, #28]
1a000b56:	47a0      	blx	r4
1a000b58:	e7f6      	b.n	1a000b48 <ModuleDinamicMemory_send2+0x24>

1a000b5a <ModuleDinamicMemory_receive>:

void  ModuleDinamicMemory_receive(Module_Data_t *obj ,void * XpointerQueue, void * Frame_parameters, uint32_t portMaxDelay){
1a000b5a:	b538      	push	{r3, r4, r5, lr}
1a000b5c:	460d      	mov	r5, r1
1a000b5e:	4611      	mov	r1, r2

	//char* pbuffer; /*Dato recibido*/
	obj->xQueueReceiveFunction(XpointerQueue , Frame_parameters, portMaxDelay );
1a000b60:	6904      	ldr	r4, [r0, #16]
1a000b62:	461a      	mov	r2, r3
1a000b64:	4628      	mov	r0, r5
1a000b66:	47a0      	blx	r4
	//return pbuffer;
}
1a000b68:	bd38      	pop	{r3, r4, r5, pc}
1a000b6a:	Address 0x000000001a000b6a is out of bounds.


1a000b6c <main>:
#include "sapi_uart.h"


//float lala = cyclesCounterToUs(*DWT_CYCCNT);

int main(void){
1a000b6c:	b500      	push	{lr}
1a000b6e:	b087      	sub	sp, #28

	boardConfig();
1a000b70:	f003 fa16 	bl	1a003fa0 <boardInit>

	QmPoolOrMalloc = eUseMalloc ;//eUseQMPool;
1a000b74:	2400      	movs	r4, #0
1a000b76:	4b1e      	ldr	r3, [pc, #120]	; (1a000bf0 <main+0x84>)
1a000b78:	701c      	strb	r4, [r3, #0]

	// Timer para task_Medir_Performance
	*_DEMCR = *_DEMCR | 0x01000000;     // enable trace
1a000b7a:	4b1e      	ldr	r3, [pc, #120]	; (1a000bf4 <main+0x88>)
1a000b7c:	681a      	ldr	r2, [r3, #0]
1a000b7e:	6813      	ldr	r3, [r2, #0]
1a000b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
1a000b84:	6013      	str	r3, [r2, #0]
	*_LAR = 0xC5ACCE55;                // <-- added unlock access to DWT (ITM, etc.)registers
1a000b86:	4b1c      	ldr	r3, [pc, #112]	; (1a000bf8 <main+0x8c>)
1a000b88:	681b      	ldr	r3, [r3, #0]
1a000b8a:	4a1c      	ldr	r2, [pc, #112]	; (1a000bfc <main+0x90>)
1a000b8c:	601a      	str	r2, [r3, #0]
	*_DWT_CTRL |= 1;
1a000b8e:	4b1c      	ldr	r3, [pc, #112]	; (1a000c00 <main+0x94>)
1a000b90:	681a      	ldr	r2, [r3, #0]
1a000b92:	6813      	ldr	r3, [r2, #0]
1a000b94:	f043 0301 	orr.w	r3, r3, #1
1a000b98:	6013      	str	r3, [r2, #0]


	/*=======Config Uart===============================*/
	uartConfig(UART_USB, 115200);
1a000b9a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000b9e:	2003      	movs	r0, #3
1a000ba0:	f002 ff84 	bl	1a003aac <uartInit>
	/*Callback interrupt*/
	uartCallbackSet(UART_USB, UART_RECEIVE, CallbackRx, NULL);
1a000ba4:	4623      	mov	r3, r4
1a000ba6:	4a17      	ldr	r2, [pc, #92]	; (1a000c04 <main+0x98>)
1a000ba8:	4621      	mov	r1, r4
1a000baa:	2003      	movs	r0, #3
1a000bac:	f002 ff18 	bl	1a0039e0 <uartCallbackSet>
	/*Habilito todas las interrupciones de UART_USB*/
	uartInterrupt(UART_USB, true);
1a000bb0:	2101      	movs	r1, #1
1a000bb2:	2003      	movs	r0, #3
1a000bb4:	f002 fecc 	bl	1a003950 <uartInterrupt>

	semaphoreCreateAll();
1a000bb8:	f7ff fd2c 	bl	1a000614 <semaphoreCreateAll>
	QueueCreateAll();
1a000bbc:	f7ff fcf2 	bl	1a0005a4 <QueueCreateAll>
	TaskCreateAll();
1a000bc0:	f7ff fc92 	bl	1a0004e8 <TaskCreateAll>
	QMPools_inicializar();
1a000bc4:	f7ff ff92 	bl	1a000aec <QMPools_inicializar>


	/*Inicializar Driver memoria dinamica*/
	ModuleDinamicMemory_initialize(&ModuleData,50,xQueueGenericSend,xQueueGenericSendFromISR, xQueueReceive,xQueueGenericCreate, Memory_Get_,Memory_Free_, Add_IncommingFrame);
1a000bc8:	4b0f      	ldr	r3, [pc, #60]	; (1a000c08 <main+0x9c>)
1a000bca:	9304      	str	r3, [sp, #16]
1a000bcc:	4b0f      	ldr	r3, [pc, #60]	; (1a000c0c <main+0xa0>)
1a000bce:	9303      	str	r3, [sp, #12]
1a000bd0:	4b0f      	ldr	r3, [pc, #60]	; (1a000c10 <main+0xa4>)
1a000bd2:	9302      	str	r3, [sp, #8]
1a000bd4:	4b0f      	ldr	r3, [pc, #60]	; (1a000c14 <main+0xa8>)
1a000bd6:	9301      	str	r3, [sp, #4]
1a000bd8:	4b0f      	ldr	r3, [pc, #60]	; (1a000c18 <main+0xac>)
1a000bda:	9300      	str	r3, [sp, #0]
1a000bdc:	4b0f      	ldr	r3, [pc, #60]	; (1a000c1c <main+0xb0>)
1a000bde:	4a10      	ldr	r2, [pc, #64]	; (1a000c20 <main+0xb4>)
1a000be0:	2132      	movs	r1, #50	; 0x32
1a000be2:	4810      	ldr	r0, [pc, #64]	; (1a000c24 <main+0xb8>)
1a000be4:	f7ff ff90 	bl	1a000b08 <ModuleDinamicMemory_initialize>

	/* Iniciar scheduler*/
	vTaskStartScheduler();
1a000be8:	f000 ff8c 	bl	1a001b04 <vTaskStartScheduler>
1a000bec:	e7fe      	b.n	1a000bec <main+0x80>
1a000bee:	bf00      	nop
1a000bf0:	10003010 	.word	0x10003010
1a000bf4:	10000004 	.word	0x10000004
1a000bf8:	10000010 	.word	0x10000010
1a000bfc:	c5acce55 	.word	0xc5acce55
1a000c00:	10000008 	.word	0x10000008
1a000c04:	1a000a79 	.word	0x1a000a79
1a000c08:	1a000301 	.word	0x1a000301
1a000c0c:	1a000eb1 	.word	0x1a000eb1
1a000c10:	1a000d95 	.word	0x1a000d95
1a000c14:	1a0011a3 	.word	0x1a0011a3
1a000c18:	1a001469 	.word	0x1a001469
1a000c1c:	1a00139b 	.word	0x1a00139b
1a000c20:	1a0011f1 	.word	0x1a0011f1
1a000c24:	100030ac 	.word	0x100030ac

1a000c28 <initialise_monitor_handles>:
}
1a000c28:	4770      	bx	lr
1a000c2a:	Address 0x000000001a000c2a is out of bounds.


1a000c2c <Reset_Handler>:
void Reset_Handler(void) {
1a000c2c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000c2e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c30:	4b19      	ldr	r3, [pc, #100]	; (1a000c98 <Reset_Handler+0x6c>)
1a000c32:	4a1a      	ldr	r2, [pc, #104]	; (1a000c9c <Reset_Handler+0x70>)
1a000c34:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c36:	3304      	adds	r3, #4
1a000c38:	4a19      	ldr	r2, [pc, #100]	; (1a000ca0 <Reset_Handler+0x74>)
1a000c3a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c3c:	2300      	movs	r3, #0
1a000c3e:	e005      	b.n	1a000c4c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c40:	4a18      	ldr	r2, [pc, #96]	; (1a000ca4 <Reset_Handler+0x78>)
1a000c42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000c46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c4a:	3301      	adds	r3, #1
1a000c4c:	2b07      	cmp	r3, #7
1a000c4e:	d9f7      	bls.n	1a000c40 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000c50:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000c52:	4b15      	ldr	r3, [pc, #84]	; (1a000ca8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000c54:	e007      	b.n	1a000c66 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000c56:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000c5a:	689a      	ldr	r2, [r3, #8]
1a000c5c:	6859      	ldr	r1, [r3, #4]
1a000c5e:	6818      	ldr	r0, [r3, #0]
1a000c60:	f7ff fa93 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000c64:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000c66:	4a11      	ldr	r2, [pc, #68]	; (1a000cac <Reset_Handler+0x80>)
1a000c68:	4293      	cmp	r3, r2
1a000c6a:	d3f4      	bcc.n	1a000c56 <Reset_Handler+0x2a>
1a000c6c:	e006      	b.n	1a000c7c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000c6e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000c70:	6859      	ldr	r1, [r3, #4]
1a000c72:	f854 0b08 	ldr.w	r0, [r4], #8
1a000c76:	f7ff fa97 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000c7a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000c7c:	4a0c      	ldr	r2, [pc, #48]	; (1a000cb0 <Reset_Handler+0x84>)
1a000c7e:	4293      	cmp	r3, r2
1a000c80:	d3f5      	bcc.n	1a000c6e <Reset_Handler+0x42>
    SystemInit();
1a000c82:	f002 fdb9 	bl	1a0037f8 <SystemInit>
    __libc_init_array();
1a000c86:	f003 ffe9 	bl	1a004c5c <__libc_init_array>
    initialise_monitor_handles();
1a000c8a:	f7ff ffcd 	bl	1a000c28 <initialise_monitor_handles>
    main();
1a000c8e:	f7ff ff6d 	bl	1a000b6c <main>
        __asm__ volatile("wfi");
1a000c92:	bf30      	wfi
1a000c94:	e7fd      	b.n	1a000c92 <Reset_Handler+0x66>
1a000c96:	bf00      	nop
1a000c98:	40053100 	.word	0x40053100
1a000c9c:	10df1000 	.word	0x10df1000
1a000ca0:	01dff7ff 	.word	0x01dff7ff
1a000ca4:	e000e280 	.word	0xe000e280
1a000ca8:	1a000114 	.word	0x1a000114
1a000cac:	1a000150 	.word	0x1a000150
1a000cb0:	1a000178 	.word	0x1a000178

1a000cb4 <_fini>:
void _fini(void) {}
1a000cb4:	4770      	bx	lr

1a000cb6 <_init>:
void _init(void) {}
1a000cb6:	4770      	bx	lr

1a000cb8 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000cb8:	4b05      	ldr	r3, [pc, #20]	; (1a000cd0 <_sbrk_r+0x18>)
1a000cba:	681b      	ldr	r3, [r3, #0]
1a000cbc:	b123      	cbz	r3, 1a000cc8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000cbe:	4b04      	ldr	r3, [pc, #16]	; (1a000cd0 <_sbrk_r+0x18>)
1a000cc0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000cc2:	4401      	add	r1, r0
1a000cc4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000cc6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000cc8:	4b01      	ldr	r3, [pc, #4]	; (1a000cd0 <_sbrk_r+0x18>)
1a000cca:	4a02      	ldr	r2, [pc, #8]	; (1a000cd4 <_sbrk_r+0x1c>)
1a000ccc:	601a      	str	r2, [r3, #0]
1a000cce:	e7f6      	b.n	1a000cbe <_sbrk_r+0x6>
1a000cd0:	10000560 	.word	0x10000560
1a000cd4:	10003164 	.word	0x10003164

1a000cd8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000cd8:	4a12      	ldr	r2, [pc, #72]	; (1a000d24 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000cda:	f012 0f07 	tst.w	r2, #7
1a000cde:	d01e      	beq.n	1a000d1e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000ce0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000ce2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000ce6:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000cea:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000cec:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000cee:	480e      	ldr	r0, [pc, #56]	; (1a000d28 <prvHeapInit+0x50>)
1a000cf0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000cf2:	2100      	movs	r1, #0
1a000cf4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000cf6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000cf8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000cfa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000cfe:	480b      	ldr	r0, [pc, #44]	; (1a000d2c <prvHeapInit+0x54>)
1a000d00:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000d02:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000d04:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000d06:	1a99      	subs	r1, r3, r2
1a000d08:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000d0a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000d0c:	4b08      	ldr	r3, [pc, #32]	; (1a000d30 <prvHeapInit+0x58>)
1a000d0e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000d10:	4b08      	ldr	r3, [pc, #32]	; (1a000d34 <prvHeapInit+0x5c>)
1a000d12:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000d14:	4b08      	ldr	r3, [pc, #32]	; (1a000d38 <prvHeapInit+0x60>)
1a000d16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000d1a:	601a      	str	r2, [r3, #0]
}
1a000d1c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000d22:	e7e4      	b.n	1a000cee <prvHeapInit+0x16>
1a000d24:	10000568 	.word	0x10000568
1a000d28:	10002574 	.word	0x10002574
1a000d2c:	10000564 	.word	0x10000564
1a000d30:	10002570 	.word	0x10002570
1a000d34:	1000256c 	.word	0x1000256c
1a000d38:	10002568 	.word	0x10002568

1a000d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000d3c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000d3e:	4b13      	ldr	r3, [pc, #76]	; (1a000d8c <prvInsertBlockIntoFreeList+0x50>)
1a000d40:	681a      	ldr	r2, [r3, #0]
1a000d42:	4282      	cmp	r2, r0
1a000d44:	d31b      	bcc.n	1a000d7e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000d46:	6859      	ldr	r1, [r3, #4]
1a000d48:	185c      	adds	r4, r3, r1
1a000d4a:	4284      	cmp	r4, r0
1a000d4c:	d103      	bne.n	1a000d56 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000d4e:	6840      	ldr	r0, [r0, #4]
1a000d50:	4401      	add	r1, r0
1a000d52:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000d54:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000d56:	6841      	ldr	r1, [r0, #4]
1a000d58:	1844      	adds	r4, r0, r1
1a000d5a:	42a2      	cmp	r2, r4
1a000d5c:	d113      	bne.n	1a000d86 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000d5e:	4c0c      	ldr	r4, [pc, #48]	; (1a000d90 <prvInsertBlockIntoFreeList+0x54>)
1a000d60:	6824      	ldr	r4, [r4, #0]
1a000d62:	42a2      	cmp	r2, r4
1a000d64:	d00d      	beq.n	1a000d82 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000d66:	6852      	ldr	r2, [r2, #4]
1a000d68:	4411      	add	r1, r2
1a000d6a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000d6c:	681a      	ldr	r2, [r3, #0]
1a000d6e:	6812      	ldr	r2, [r2, #0]
1a000d70:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000d72:	4298      	cmp	r0, r3
1a000d74:	d000      	beq.n	1a000d78 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000d76:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000d78:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d7c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000d7e:	4613      	mov	r3, r2
1a000d80:	e7de      	b.n	1a000d40 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000d82:	6004      	str	r4, [r0, #0]
1a000d84:	e7f5      	b.n	1a000d72 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000d86:	6002      	str	r2, [r0, #0]
1a000d88:	e7f3      	b.n	1a000d72 <prvInsertBlockIntoFreeList+0x36>
1a000d8a:	bf00      	nop
1a000d8c:	10002574 	.word	0x10002574
1a000d90:	10000564 	.word	0x10000564

1a000d94 <pvPortMalloc>:
{
1a000d94:	b570      	push	{r4, r5, r6, lr}
1a000d96:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000d98:	f000 fefe 	bl	1a001b98 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000d9c:	4b3f      	ldr	r3, [pc, #252]	; (1a000e9c <pvPortMalloc+0x108>)
1a000d9e:	681b      	ldr	r3, [r3, #0]
1a000da0:	b1a3      	cbz	r3, 1a000dcc <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000da2:	4b3f      	ldr	r3, [pc, #252]	; (1a000ea0 <pvPortMalloc+0x10c>)
1a000da4:	681b      	ldr	r3, [r3, #0]
1a000da6:	421c      	tst	r4, r3
1a000da8:	d013      	beq.n	1a000dd2 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a000daa:	f000 ff8f 	bl	1a001ccc <xTaskResumeAll>
void *pvReturn = NULL;
1a000dae:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000db0:	f000 fca5 	bl	1a0016fe <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000db4:	f016 0f07 	tst.w	r6, #7
1a000db8:	d06e      	beq.n	1a000e98 <pvPortMalloc+0x104>
	__asm volatile
1a000dba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dbe:	f383 8811 	msr	BASEPRI, r3
1a000dc2:	f3bf 8f6f 	isb	sy
1a000dc6:	f3bf 8f4f 	dsb	sy
1a000dca:	e7fe      	b.n	1a000dca <pvPortMalloc+0x36>
			prvHeapInit();
1a000dcc:	f7ff ff84 	bl	1a000cd8 <prvHeapInit>
1a000dd0:	e7e7      	b.n	1a000da2 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000dd2:	b194      	cbz	r4, 1a000dfa <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000dd4:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000dd6:	f014 0f07 	tst.w	r4, #7
1a000dda:	d00e      	beq.n	1a000dfa <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000ddc:	f024 0407 	bic.w	r4, r4, #7
1a000de0:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000de2:	f004 0307 	and.w	r3, r4, #7
1a000de6:	b143      	cbz	r3, 1a000dfa <pvPortMalloc+0x66>
1a000de8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dec:	f383 8811 	msr	BASEPRI, r3
1a000df0:	f3bf 8f6f 	isb	sy
1a000df4:	f3bf 8f4f 	dsb	sy
1a000df8:	e7fe      	b.n	1a000df8 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000dfa:	b134      	cbz	r4, 1a000e0a <pvPortMalloc+0x76>
1a000dfc:	4b29      	ldr	r3, [pc, #164]	; (1a000ea4 <pvPortMalloc+0x110>)
1a000dfe:	681b      	ldr	r3, [r3, #0]
1a000e00:	42a3      	cmp	r3, r4
1a000e02:	d306      	bcc.n	1a000e12 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000e04:	4b28      	ldr	r3, [pc, #160]	; (1a000ea8 <pvPortMalloc+0x114>)
1a000e06:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000e08:	e009      	b.n	1a000e1e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000e0a:	f000 ff5f 	bl	1a001ccc <xTaskResumeAll>
void *pvReturn = NULL;
1a000e0e:	2600      	movs	r6, #0
1a000e10:	e7ce      	b.n	1a000db0 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a000e12:	f000 ff5b 	bl	1a001ccc <xTaskResumeAll>
void *pvReturn = NULL;
1a000e16:	2600      	movs	r6, #0
1a000e18:	e7ca      	b.n	1a000db0 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000e1a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000e1c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000e1e:	686a      	ldr	r2, [r5, #4]
1a000e20:	42a2      	cmp	r2, r4
1a000e22:	d202      	bcs.n	1a000e2a <pvPortMalloc+0x96>
1a000e24:	682a      	ldr	r2, [r5, #0]
1a000e26:	2a00      	cmp	r2, #0
1a000e28:	d1f7      	bne.n	1a000e1a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000e2a:	4a1c      	ldr	r2, [pc, #112]	; (1a000e9c <pvPortMalloc+0x108>)
1a000e2c:	6812      	ldr	r2, [r2, #0]
1a000e2e:	42aa      	cmp	r2, r5
1a000e30:	d014      	beq.n	1a000e5c <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000e32:	681e      	ldr	r6, [r3, #0]
1a000e34:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000e36:	682a      	ldr	r2, [r5, #0]
1a000e38:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000e3a:	686b      	ldr	r3, [r5, #4]
1a000e3c:	1b1b      	subs	r3, r3, r4
1a000e3e:	2b10      	cmp	r3, #16
1a000e40:	d914      	bls.n	1a000e6c <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000e42:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000e44:	f010 0f07 	tst.w	r0, #7
1a000e48:	d00c      	beq.n	1a000e64 <pvPortMalloc+0xd0>
1a000e4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e4e:	f383 8811 	msr	BASEPRI, r3
1a000e52:	f3bf 8f6f 	isb	sy
1a000e56:	f3bf 8f4f 	dsb	sy
1a000e5a:	e7fe      	b.n	1a000e5a <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000e5c:	f000 ff36 	bl	1a001ccc <xTaskResumeAll>
void *pvReturn = NULL;
1a000e60:	2600      	movs	r6, #0
1a000e62:	e7a5      	b.n	1a000db0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000e64:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000e66:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000e68:	f7ff ff68 	bl	1a000d3c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000e6c:	686a      	ldr	r2, [r5, #4]
1a000e6e:	490d      	ldr	r1, [pc, #52]	; (1a000ea4 <pvPortMalloc+0x110>)
1a000e70:	680b      	ldr	r3, [r1, #0]
1a000e72:	1a9b      	subs	r3, r3, r2
1a000e74:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000e76:	490d      	ldr	r1, [pc, #52]	; (1a000eac <pvPortMalloc+0x118>)
1a000e78:	6809      	ldr	r1, [r1, #0]
1a000e7a:	428b      	cmp	r3, r1
1a000e7c:	d201      	bcs.n	1a000e82 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000e7e:	490b      	ldr	r1, [pc, #44]	; (1a000eac <pvPortMalloc+0x118>)
1a000e80:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000e82:	4b07      	ldr	r3, [pc, #28]	; (1a000ea0 <pvPortMalloc+0x10c>)
1a000e84:	681b      	ldr	r3, [r3, #0]
1a000e86:	4313      	orrs	r3, r2
1a000e88:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000e8a:	2300      	movs	r3, #0
1a000e8c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000e8e:	f000 ff1d 	bl	1a001ccc <xTaskResumeAll>
		if( pvReturn == NULL )
1a000e92:	2e00      	cmp	r6, #0
1a000e94:	d18e      	bne.n	1a000db4 <pvPortMalloc+0x20>
1a000e96:	e78b      	b.n	1a000db0 <pvPortMalloc+0x1c>
}
1a000e98:	4630      	mov	r0, r6
1a000e9a:	bd70      	pop	{r4, r5, r6, pc}
1a000e9c:	10000564 	.word	0x10000564
1a000ea0:	10002568 	.word	0x10002568
1a000ea4:	1000256c 	.word	0x1000256c
1a000ea8:	10002574 	.word	0x10002574
1a000eac:	10002570 	.word	0x10002570

1a000eb0 <vPortFree>:
	if( pv != NULL )
1a000eb0:	b380      	cbz	r0, 1a000f14 <vPortFree+0x64>
{
1a000eb2:	b538      	push	{r3, r4, r5, lr}
1a000eb4:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000eb6:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000eba:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000ebe:	4916      	ldr	r1, [pc, #88]	; (1a000f18 <vPortFree+0x68>)
1a000ec0:	6809      	ldr	r1, [r1, #0]
1a000ec2:	420a      	tst	r2, r1
1a000ec4:	d108      	bne.n	1a000ed8 <vPortFree+0x28>
1a000ec6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eca:	f383 8811 	msr	BASEPRI, r3
1a000ece:	f3bf 8f6f 	isb	sy
1a000ed2:	f3bf 8f4f 	dsb	sy
1a000ed6:	e7fe      	b.n	1a000ed6 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000ed8:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000edc:	b140      	cbz	r0, 1a000ef0 <vPortFree+0x40>
1a000ede:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ee2:	f383 8811 	msr	BASEPRI, r3
1a000ee6:	f3bf 8f6f 	isb	sy
1a000eea:	f3bf 8f4f 	dsb	sy
1a000eee:	e7fe      	b.n	1a000eee <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000ef0:	ea22 0201 	bic.w	r2, r2, r1
1a000ef4:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000ef8:	f000 fe4e 	bl	1a001b98 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000efc:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000f00:	4a06      	ldr	r2, [pc, #24]	; (1a000f1c <vPortFree+0x6c>)
1a000f02:	6813      	ldr	r3, [r2, #0]
1a000f04:	440b      	add	r3, r1
1a000f06:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000f08:	4628      	mov	r0, r5
1a000f0a:	f7ff ff17 	bl	1a000d3c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000f0e:	f000 fedd 	bl	1a001ccc <xTaskResumeAll>
}
1a000f12:	bd38      	pop	{r3, r4, r5, pc}
1a000f14:	4770      	bx	lr
1a000f16:	bf00      	nop
1a000f18:	10002568 	.word	0x10002568
1a000f1c:	1000256c 	.word	0x1000256c

1a000f20 <xPortGetFreeHeapSize>:
}
1a000f20:	4b01      	ldr	r3, [pc, #4]	; (1a000f28 <xPortGetFreeHeapSize+0x8>)
1a000f22:	6818      	ldr	r0, [r3, #0]
1a000f24:	4770      	bx	lr
1a000f26:	bf00      	nop
1a000f28:	1000256c 	.word	0x1000256c

1a000f2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000f2c:	b510      	push	{r4, lr}
1a000f2e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000f30:	f001 fc90 	bl	1a002854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000f34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f38:	429a      	cmp	r2, r3
1a000f3a:	d004      	beq.n	1a000f46 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000f3c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000f3e:	f001 fcab 	bl	1a002898 <vPortExitCritical>

	return xReturn;
}
1a000f42:	4620      	mov	r0, r4
1a000f44:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f46:	2401      	movs	r4, #1
1a000f48:	e7f9      	b.n	1a000f3e <prvIsQueueFull+0x12>

1a000f4a <prvIsQueueEmpty>:
{
1a000f4a:	b510      	push	{r4, lr}
1a000f4c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000f4e:	f001 fc81 	bl	1a002854 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000f52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000f54:	b123      	cbz	r3, 1a000f60 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000f56:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000f58:	f001 fc9e 	bl	1a002898 <vPortExitCritical>
}
1a000f5c:	4620      	mov	r0, r4
1a000f5e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000f60:	2401      	movs	r4, #1
1a000f62:	e7f9      	b.n	1a000f58 <prvIsQueueEmpty+0xe>

1a000f64 <prvCopyDataToQueue>:
{
1a000f64:	b570      	push	{r4, r5, r6, lr}
1a000f66:	4604      	mov	r4, r0
1a000f68:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f6a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000f6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000f6e:	b95a      	cbnz	r2, 1a000f88 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f70:	6803      	ldr	r3, [r0, #0]
1a000f72:	b11b      	cbz	r3, 1a000f7c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000f74:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000f76:	3501      	adds	r5, #1
1a000f78:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000f7a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000f7c:	6840      	ldr	r0, [r0, #4]
1a000f7e:	f001 f86b 	bl	1a002058 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000f82:	2300      	movs	r3, #0
1a000f84:	6063      	str	r3, [r4, #4]
1a000f86:	e7f6      	b.n	1a000f76 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000f88:	b96e      	cbnz	r6, 1a000fa6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000f8a:	6880      	ldr	r0, [r0, #8]
1a000f8c:	f003 fe8a 	bl	1a004ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000f90:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000f92:	68a3      	ldr	r3, [r4, #8]
1a000f94:	4413      	add	r3, r2
1a000f96:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000f98:	6862      	ldr	r2, [r4, #4]
1a000f9a:	4293      	cmp	r3, r2
1a000f9c:	d319      	bcc.n	1a000fd2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000f9e:	6823      	ldr	r3, [r4, #0]
1a000fa0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000fa2:	2000      	movs	r0, #0
1a000fa4:	e7e7      	b.n	1a000f76 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000fa6:	68c0      	ldr	r0, [r0, #12]
1a000fa8:	f003 fe7c 	bl	1a004ca4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000fac:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000fae:	4252      	negs	r2, r2
1a000fb0:	68e3      	ldr	r3, [r4, #12]
1a000fb2:	4413      	add	r3, r2
1a000fb4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000fb6:	6821      	ldr	r1, [r4, #0]
1a000fb8:	428b      	cmp	r3, r1
1a000fba:	d202      	bcs.n	1a000fc2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000fbc:	6863      	ldr	r3, [r4, #4]
1a000fbe:	441a      	add	r2, r3
1a000fc0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000fc2:	2e02      	cmp	r6, #2
1a000fc4:	d001      	beq.n	1a000fca <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000fc6:	2000      	movs	r0, #0
1a000fc8:	e7d5      	b.n	1a000f76 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000fca:	b125      	cbz	r5, 1a000fd6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000fcc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000fce:	2000      	movs	r0, #0
1a000fd0:	e7d1      	b.n	1a000f76 <prvCopyDataToQueue+0x12>
1a000fd2:	2000      	movs	r0, #0
1a000fd4:	e7cf      	b.n	1a000f76 <prvCopyDataToQueue+0x12>
1a000fd6:	2000      	movs	r0, #0
1a000fd8:	e7cd      	b.n	1a000f76 <prvCopyDataToQueue+0x12>

1a000fda <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000fda:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000fdc:	b172      	cbz	r2, 1a000ffc <prvCopyDataFromQueue+0x22>
{
1a000fde:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000fe0:	68c3      	ldr	r3, [r0, #12]
1a000fe2:	4413      	add	r3, r2
1a000fe4:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000fe6:	6844      	ldr	r4, [r0, #4]
1a000fe8:	42a3      	cmp	r3, r4
1a000fea:	d301      	bcc.n	1a000ff0 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000fec:	6803      	ldr	r3, [r0, #0]
1a000fee:	60c3      	str	r3, [r0, #12]
1a000ff0:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000ff2:	68c1      	ldr	r1, [r0, #12]
1a000ff4:	4620      	mov	r0, r4
1a000ff6:	f003 fe55 	bl	1a004ca4 <memcpy>
}
1a000ffa:	bd10      	pop	{r4, pc}
1a000ffc:	4770      	bx	lr

1a000ffe <prvUnlockQueue>:
{
1a000ffe:	b538      	push	{r3, r4, r5, lr}
1a001000:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a001002:	f001 fc27 	bl	1a002854 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a001006:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00100a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00100c:	e003      	b.n	1a001016 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a00100e:	f001 f801 	bl	1a002014 <vTaskMissedYield>
			--cTxLock;
1a001012:	3c01      	subs	r4, #1
1a001014:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001016:	2c00      	cmp	r4, #0
1a001018:	dd08      	ble.n	1a00102c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00101a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a00101c:	b133      	cbz	r3, 1a00102c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00101e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001022:	f000 ff65 	bl	1a001ef0 <xTaskRemoveFromEventList>
1a001026:	2800      	cmp	r0, #0
1a001028:	d0f3      	beq.n	1a001012 <prvUnlockQueue+0x14>
1a00102a:	e7f0      	b.n	1a00100e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a00102c:	23ff      	movs	r3, #255	; 0xff
1a00102e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001032:	f001 fc31 	bl	1a002898 <vPortExitCritical>
	taskENTER_CRITICAL();
1a001036:	f001 fc0d 	bl	1a002854 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00103a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a00103e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001040:	e003      	b.n	1a00104a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a001042:	f000 ffe7 	bl	1a002014 <vTaskMissedYield>
				--cRxLock;
1a001046:	3c01      	subs	r4, #1
1a001048:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00104a:	2c00      	cmp	r4, #0
1a00104c:	dd08      	ble.n	1a001060 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00104e:	692b      	ldr	r3, [r5, #16]
1a001050:	b133      	cbz	r3, 1a001060 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001052:	f105 0010 	add.w	r0, r5, #16
1a001056:	f000 ff4b 	bl	1a001ef0 <xTaskRemoveFromEventList>
1a00105a:	2800      	cmp	r0, #0
1a00105c:	d0f3      	beq.n	1a001046 <prvUnlockQueue+0x48>
1a00105e:	e7f0      	b.n	1a001042 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001060:	23ff      	movs	r3, #255	; 0xff
1a001062:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a001066:	f001 fc17 	bl	1a002898 <vPortExitCritical>
}
1a00106a:	bd38      	pop	{r3, r4, r5, pc}

1a00106c <xQueueGenericReset>:
{
1a00106c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a00106e:	b940      	cbnz	r0, 1a001082 <xQueueGenericReset+0x16>
1a001070:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001074:	f383 8811 	msr	BASEPRI, r3
1a001078:	f3bf 8f6f 	isb	sy
1a00107c:	f3bf 8f4f 	dsb	sy
1a001080:	e7fe      	b.n	1a001080 <xQueueGenericReset+0x14>
1a001082:	4604      	mov	r4, r0
1a001084:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a001086:	f001 fbe5 	bl	1a002854 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00108a:	6821      	ldr	r1, [r4, #0]
1a00108c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00108e:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001090:	fb03 1002 	mla	r0, r3, r2, r1
1a001094:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a001096:	2000      	movs	r0, #0
1a001098:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00109a:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a00109c:	3a01      	subs	r2, #1
1a00109e:	fb02 1303 	mla	r3, r2, r3, r1
1a0010a2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0010a4:	23ff      	movs	r3, #255	; 0xff
1a0010a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0010aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0010ae:	b9a5      	cbnz	r5, 1a0010da <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0010b0:	6923      	ldr	r3, [r4, #16]
1a0010b2:	b91b      	cbnz	r3, 1a0010bc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0010b4:	f001 fbf0 	bl	1a002898 <vPortExitCritical>
}
1a0010b8:	2001      	movs	r0, #1
1a0010ba:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0010bc:	f104 0010 	add.w	r0, r4, #16
1a0010c0:	f000 ff16 	bl	1a001ef0 <xTaskRemoveFromEventList>
1a0010c4:	2800      	cmp	r0, #0
1a0010c6:	d0f5      	beq.n	1a0010b4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0010c8:	4b08      	ldr	r3, [pc, #32]	; (1a0010ec <xQueueGenericReset+0x80>)
1a0010ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010ce:	601a      	str	r2, [r3, #0]
1a0010d0:	f3bf 8f4f 	dsb	sy
1a0010d4:	f3bf 8f6f 	isb	sy
1a0010d8:	e7ec      	b.n	1a0010b4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0010da:	f104 0010 	add.w	r0, r4, #16
1a0010de:	f000 faac 	bl	1a00163a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0010e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010e6:	f000 faa8 	bl	1a00163a <vListInitialise>
1a0010ea:	e7e3      	b.n	1a0010b4 <xQueueGenericReset+0x48>
1a0010ec:	e000ed04 	.word	0xe000ed04

1a0010f0 <prvInitialiseNewQueue>:
{
1a0010f0:	b538      	push	{r3, r4, r5, lr}
1a0010f2:	461d      	mov	r5, r3
1a0010f4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0010f6:	460b      	mov	r3, r1
1a0010f8:	b149      	cbz	r1, 1a00110e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0010fa:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0010fc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0010fe:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001100:	2101      	movs	r1, #1
1a001102:	4620      	mov	r0, r4
1a001104:	f7ff ffb2 	bl	1a00106c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a001108:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a00110c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a00110e:	6024      	str	r4, [r4, #0]
1a001110:	e7f4      	b.n	1a0010fc <prvInitialiseNewQueue+0xc>

1a001112 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001112:	b940      	cbnz	r0, 1a001126 <xQueueGenericCreateStatic+0x14>
1a001114:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001118:	f383 8811 	msr	BASEPRI, r3
1a00111c:	f3bf 8f6f 	isb	sy
1a001120:	f3bf 8f4f 	dsb	sy
1a001124:	e7fe      	b.n	1a001124 <xQueueGenericCreateStatic+0x12>
	{
1a001126:	b510      	push	{r4, lr}
1a001128:	b084      	sub	sp, #16
1a00112a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a00112c:	b153      	cbz	r3, 1a001144 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a00112e:	b192      	cbz	r2, 1a001156 <xQueueGenericCreateStatic+0x44>
1a001130:	b989      	cbnz	r1, 1a001156 <xQueueGenericCreateStatic+0x44>
1a001132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001136:	f383 8811 	msr	BASEPRI, r3
1a00113a:	f3bf 8f6f 	isb	sy
1a00113e:	f3bf 8f4f 	dsb	sy
1a001142:	e7fe      	b.n	1a001142 <xQueueGenericCreateStatic+0x30>
1a001144:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001148:	f383 8811 	msr	BASEPRI, r3
1a00114c:	f3bf 8f6f 	isb	sy
1a001150:	f3bf 8f4f 	dsb	sy
1a001154:	e7fe      	b.n	1a001154 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a001156:	b94a      	cbnz	r2, 1a00116c <xQueueGenericCreateStatic+0x5a>
1a001158:	b141      	cbz	r1, 1a00116c <xQueueGenericCreateStatic+0x5a>
1a00115a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00115e:	f383 8811 	msr	BASEPRI, r3
1a001162:	f3bf 8f6f 	isb	sy
1a001166:	f3bf 8f4f 	dsb	sy
1a00116a:	e7fe      	b.n	1a00116a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a00116c:	2050      	movs	r0, #80	; 0x50
1a00116e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001170:	9803      	ldr	r0, [sp, #12]
1a001172:	2850      	cmp	r0, #80	; 0x50
1a001174:	d008      	beq.n	1a001188 <xQueueGenericCreateStatic+0x76>
1a001176:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00117a:	f383 8811 	msr	BASEPRI, r3
1a00117e:	f3bf 8f6f 	isb	sy
1a001182:	f3bf 8f4f 	dsb	sy
1a001186:	e7fe      	b.n	1a001186 <xQueueGenericCreateStatic+0x74>
1a001188:	4620      	mov	r0, r4
1a00118a:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a00118c:	2301      	movs	r3, #1
1a00118e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001192:	9400      	str	r4, [sp, #0]
1a001194:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001198:	f7ff ffaa 	bl	1a0010f0 <prvInitialiseNewQueue>
	}
1a00119c:	4620      	mov	r0, r4
1a00119e:	b004      	add	sp, #16
1a0011a0:	bd10      	pop	{r4, pc}

1a0011a2 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0011a2:	b940      	cbnz	r0, 1a0011b6 <xQueueGenericCreate+0x14>
1a0011a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011a8:	f383 8811 	msr	BASEPRI, r3
1a0011ac:	f3bf 8f6f 	isb	sy
1a0011b0:	f3bf 8f4f 	dsb	sy
1a0011b4:	e7fe      	b.n	1a0011b4 <xQueueGenericCreate+0x12>
	{
1a0011b6:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011b8:	b083      	sub	sp, #12
1a0011ba:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0011bc:	b111      	cbz	r1, 1a0011c4 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011be:	fb01 f000 	mul.w	r0, r1, r0
1a0011c2:	e000      	b.n	1a0011c6 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a0011c4:	2000      	movs	r0, #0
1a0011c6:	4617      	mov	r7, r2
1a0011c8:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0011ca:	3050      	adds	r0, #80	; 0x50
1a0011cc:	f7ff fde2 	bl	1a000d94 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0011d0:	4605      	mov	r5, r0
1a0011d2:	b150      	cbz	r0, 1a0011ea <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0011d4:	2300      	movs	r3, #0
1a0011d6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0011da:	9000      	str	r0, [sp, #0]
1a0011dc:	463b      	mov	r3, r7
1a0011de:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0011e2:	4621      	mov	r1, r4
1a0011e4:	4630      	mov	r0, r6
1a0011e6:	f7ff ff83 	bl	1a0010f0 <prvInitialiseNewQueue>
	}
1a0011ea:	4628      	mov	r0, r5
1a0011ec:	b003      	add	sp, #12
1a0011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0011f0 <xQueueGenericSend>:
{
1a0011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0011f2:	b085      	sub	sp, #20
1a0011f4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0011f6:	b160      	cbz	r0, 1a001212 <xQueueGenericSend+0x22>
1a0011f8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0011fa:	b999      	cbnz	r1, 1a001224 <xQueueGenericSend+0x34>
1a0011fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0011fe:	b18a      	cbz	r2, 1a001224 <xQueueGenericSend+0x34>
1a001200:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001204:	f383 8811 	msr	BASEPRI, r3
1a001208:	f3bf 8f6f 	isb	sy
1a00120c:	f3bf 8f4f 	dsb	sy
1a001210:	e7fe      	b.n	1a001210 <xQueueGenericSend+0x20>
1a001212:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001216:	f383 8811 	msr	BASEPRI, r3
1a00121a:	f3bf 8f6f 	isb	sy
1a00121e:	f3bf 8f4f 	dsb	sy
1a001222:	e7fe      	b.n	1a001222 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001224:	2b02      	cmp	r3, #2
1a001226:	d10b      	bne.n	1a001240 <xQueueGenericSend+0x50>
1a001228:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00122a:	2a01      	cmp	r2, #1
1a00122c:	d008      	beq.n	1a001240 <xQueueGenericSend+0x50>
1a00122e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001232:	f383 8811 	msr	BASEPRI, r3
1a001236:	f3bf 8f6f 	isb	sy
1a00123a:	f3bf 8f4f 	dsb	sy
1a00123e:	e7fe      	b.n	1a00123e <xQueueGenericSend+0x4e>
1a001240:	461e      	mov	r6, r3
1a001242:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001244:	f000 fef8 	bl	1a002038 <xTaskGetSchedulerState>
1a001248:	b950      	cbnz	r0, 1a001260 <xQueueGenericSend+0x70>
1a00124a:	9b01      	ldr	r3, [sp, #4]
1a00124c:	b153      	cbz	r3, 1a001264 <xQueueGenericSend+0x74>
1a00124e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001252:	f383 8811 	msr	BASEPRI, r3
1a001256:	f3bf 8f6f 	isb	sy
1a00125a:	f3bf 8f4f 	dsb	sy
1a00125e:	e7fe      	b.n	1a00125e <xQueueGenericSend+0x6e>
1a001260:	2500      	movs	r5, #0
1a001262:	e03a      	b.n	1a0012da <xQueueGenericSend+0xea>
1a001264:	2500      	movs	r5, #0
1a001266:	e038      	b.n	1a0012da <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001268:	4632      	mov	r2, r6
1a00126a:	4639      	mov	r1, r7
1a00126c:	4620      	mov	r0, r4
1a00126e:	f7ff fe79 	bl	1a000f64 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001272:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001274:	b94b      	cbnz	r3, 1a00128a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a001276:	b1a8      	cbz	r0, 1a0012a4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001278:	4b3b      	ldr	r3, [pc, #236]	; (1a001368 <xQueueGenericSend+0x178>)
1a00127a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00127e:	601a      	str	r2, [r3, #0]
1a001280:	f3bf 8f4f 	dsb	sy
1a001284:	f3bf 8f6f 	isb	sy
1a001288:	e00c      	b.n	1a0012a4 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00128a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00128e:	f000 fe2f 	bl	1a001ef0 <xTaskRemoveFromEventList>
1a001292:	b138      	cbz	r0, 1a0012a4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001294:	4b34      	ldr	r3, [pc, #208]	; (1a001368 <xQueueGenericSend+0x178>)
1a001296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00129a:	601a      	str	r2, [r3, #0]
1a00129c:	f3bf 8f4f 	dsb	sy
1a0012a0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0012a4:	f001 faf8 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a0012a8:	2001      	movs	r0, #1
}
1a0012aa:	b005      	add	sp, #20
1a0012ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0012ae:	f001 faf3 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_FULL;
1a0012b2:	2000      	movs	r0, #0
1a0012b4:	e7f9      	b.n	1a0012aa <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0012b6:	a802      	add	r0, sp, #8
1a0012b8:	f000 fe60 	bl	1a001f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0012bc:	2501      	movs	r5, #1
1a0012be:	e019      	b.n	1a0012f4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0012c0:	2300      	movs	r3, #0
1a0012c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0012c6:	e021      	b.n	1a00130c <xQueueGenericSend+0x11c>
1a0012c8:	2300      	movs	r3, #0
1a0012ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0012ce:	e023      	b.n	1a001318 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0012d0:	4620      	mov	r0, r4
1a0012d2:	f7ff fe94 	bl	1a000ffe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0012d6:	f000 fcf9 	bl	1a001ccc <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0012da:	f001 fabb 	bl	1a002854 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0012de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0012e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0012e2:	429a      	cmp	r2, r3
1a0012e4:	d3c0      	bcc.n	1a001268 <xQueueGenericSend+0x78>
1a0012e6:	2e02      	cmp	r6, #2
1a0012e8:	d0be      	beq.n	1a001268 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0012ea:	9b01      	ldr	r3, [sp, #4]
1a0012ec:	2b00      	cmp	r3, #0
1a0012ee:	d0de      	beq.n	1a0012ae <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0012f0:	2d00      	cmp	r5, #0
1a0012f2:	d0e0      	beq.n	1a0012b6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0012f4:	f001 fad0 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a0012f8:	f000 fc4e 	bl	1a001b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0012fc:	f001 faaa 	bl	1a002854 <vPortEnterCritical>
1a001300:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001304:	b25b      	sxtb	r3, r3
1a001306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00130a:	d0d9      	beq.n	1a0012c0 <xQueueGenericSend+0xd0>
1a00130c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001310:	b25b      	sxtb	r3, r3
1a001312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001316:	d0d7      	beq.n	1a0012c8 <xQueueGenericSend+0xd8>
1a001318:	f001 fabe 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00131c:	a901      	add	r1, sp, #4
1a00131e:	a802      	add	r0, sp, #8
1a001320:	f000 fe38 	bl	1a001f94 <xTaskCheckForTimeOut>
1a001324:	b9c8      	cbnz	r0, 1a00135a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001326:	4620      	mov	r0, r4
1a001328:	f7ff fe00 	bl	1a000f2c <prvIsQueueFull>
1a00132c:	2800      	cmp	r0, #0
1a00132e:	d0cf      	beq.n	1a0012d0 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001330:	9901      	ldr	r1, [sp, #4]
1a001332:	f104 0010 	add.w	r0, r4, #16
1a001336:	f000 fda7 	bl	1a001e88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00133a:	4620      	mov	r0, r4
1a00133c:	f7ff fe5f 	bl	1a000ffe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001340:	f000 fcc4 	bl	1a001ccc <xTaskResumeAll>
1a001344:	2800      	cmp	r0, #0
1a001346:	d1c8      	bne.n	1a0012da <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001348:	4b07      	ldr	r3, [pc, #28]	; (1a001368 <xQueueGenericSend+0x178>)
1a00134a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00134e:	601a      	str	r2, [r3, #0]
1a001350:	f3bf 8f4f 	dsb	sy
1a001354:	f3bf 8f6f 	isb	sy
1a001358:	e7bf      	b.n	1a0012da <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00135a:	4620      	mov	r0, r4
1a00135c:	f7ff fe4f 	bl	1a000ffe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001360:	f000 fcb4 	bl	1a001ccc <xTaskResumeAll>
			return errQUEUE_FULL;
1a001364:	2000      	movs	r0, #0
1a001366:	e7a0      	b.n	1a0012aa <xQueueGenericSend+0xba>
1a001368:	e000ed04 	.word	0xe000ed04

1a00136c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a00136c:	b148      	cbz	r0, 1a001382 <prvInitialiseMutex+0x16>
	{
1a00136e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a001370:	2100      	movs	r1, #0
1a001372:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a001374:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a001376:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a001378:	460b      	mov	r3, r1
1a00137a:	460a      	mov	r2, r1
1a00137c:	f7ff ff38 	bl	1a0011f0 <xQueueGenericSend>
	}
1a001380:	bd08      	pop	{r3, pc}
1a001382:	4770      	bx	lr

1a001384 <xQueueCreateMutex>:
	{
1a001384:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a001386:	4602      	mov	r2, r0
1a001388:	2100      	movs	r1, #0
1a00138a:	2001      	movs	r0, #1
1a00138c:	f7ff ff09 	bl	1a0011a2 <xQueueGenericCreate>
1a001390:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a001392:	f7ff ffeb 	bl	1a00136c <prvInitialiseMutex>
	}
1a001396:	4620      	mov	r0, r4
1a001398:	bd10      	pop	{r4, pc}

1a00139a <xQueueGenericSendFromISR>:
{
1a00139a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00139e:	b160      	cbz	r0, 1a0013ba <xQueueGenericSendFromISR+0x20>
1a0013a0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0013a2:	b999      	cbnz	r1, 1a0013cc <xQueueGenericSendFromISR+0x32>
1a0013a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0013a6:	b188      	cbz	r0, 1a0013cc <xQueueGenericSendFromISR+0x32>
1a0013a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ac:	f383 8811 	msr	BASEPRI, r3
1a0013b0:	f3bf 8f6f 	isb	sy
1a0013b4:	f3bf 8f4f 	dsb	sy
1a0013b8:	e7fe      	b.n	1a0013b8 <xQueueGenericSendFromISR+0x1e>
1a0013ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013be:	f383 8811 	msr	BASEPRI, r3
1a0013c2:	f3bf 8f6f 	isb	sy
1a0013c6:	f3bf 8f4f 	dsb	sy
1a0013ca:	e7fe      	b.n	1a0013ca <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0013cc:	2b02      	cmp	r3, #2
1a0013ce:	d10b      	bne.n	1a0013e8 <xQueueGenericSendFromISR+0x4e>
1a0013d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0013d2:	2801      	cmp	r0, #1
1a0013d4:	d008      	beq.n	1a0013e8 <xQueueGenericSendFromISR+0x4e>
1a0013d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013da:	f383 8811 	msr	BASEPRI, r3
1a0013de:	f3bf 8f6f 	isb	sy
1a0013e2:	f3bf 8f4f 	dsb	sy
1a0013e6:	e7fe      	b.n	1a0013e6 <xQueueGenericSendFromISR+0x4c>
1a0013e8:	461f      	mov	r7, r3
1a0013ea:	4690      	mov	r8, r2
1a0013ec:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0013ee:	f001 fb5b 	bl	1a002aa8 <vPortValidateInterruptPriority>
	__asm volatile
1a0013f2:	f3ef 8611 	mrs	r6, BASEPRI
1a0013f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013fa:	f383 8811 	msr	BASEPRI, r3
1a0013fe:	f3bf 8f6f 	isb	sy
1a001402:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001406:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00140a:	429a      	cmp	r2, r3
1a00140c:	d303      	bcc.n	1a001416 <xQueueGenericSendFromISR+0x7c>
1a00140e:	2f02      	cmp	r7, #2
1a001410:	d001      	beq.n	1a001416 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001412:	2000      	movs	r0, #0
1a001414:	e00f      	b.n	1a001436 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001416:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a00141a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00141c:	463a      	mov	r2, r7
1a00141e:	4649      	mov	r1, r9
1a001420:	4620      	mov	r0, r4
1a001422:	f7ff fd9f 	bl	1a000f64 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001426:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00142a:	d008      	beq.n	1a00143e <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a00142c:	1c6b      	adds	r3, r5, #1
1a00142e:	b25b      	sxtb	r3, r3
1a001430:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001434:	2001      	movs	r0, #1
	__asm volatile
1a001436:	f386 8811 	msr	BASEPRI, r6
}
1a00143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00143e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001440:	b15b      	cbz	r3, 1a00145a <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001442:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001446:	f000 fd53 	bl	1a001ef0 <xTaskRemoveFromEventList>
1a00144a:	b140      	cbz	r0, 1a00145e <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a00144c:	f1b8 0f00 	cmp.w	r8, #0
1a001450:	d007      	beq.n	1a001462 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001452:	2001      	movs	r0, #1
1a001454:	f8c8 0000 	str.w	r0, [r8]
1a001458:	e7ed      	b.n	1a001436 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a00145a:	2001      	movs	r0, #1
1a00145c:	e7eb      	b.n	1a001436 <xQueueGenericSendFromISR+0x9c>
1a00145e:	2001      	movs	r0, #1
1a001460:	e7e9      	b.n	1a001436 <xQueueGenericSendFromISR+0x9c>
1a001462:	2001      	movs	r0, #1
1a001464:	e7e7      	b.n	1a001436 <xQueueGenericSendFromISR+0x9c>
1a001466:	Address 0x000000001a001466 is out of bounds.


1a001468 <xQueueReceive>:
{
1a001468:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00146a:	b085      	sub	sp, #20
1a00146c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00146e:	b160      	cbz	r0, 1a00148a <xQueueReceive+0x22>
1a001470:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001472:	b999      	cbnz	r1, 1a00149c <xQueueReceive+0x34>
1a001474:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001476:	b18b      	cbz	r3, 1a00149c <xQueueReceive+0x34>
	__asm volatile
1a001478:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00147c:	f383 8811 	msr	BASEPRI, r3
1a001480:	f3bf 8f6f 	isb	sy
1a001484:	f3bf 8f4f 	dsb	sy
1a001488:	e7fe      	b.n	1a001488 <xQueueReceive+0x20>
1a00148a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00148e:	f383 8811 	msr	BASEPRI, r3
1a001492:	f3bf 8f6f 	isb	sy
1a001496:	f3bf 8f4f 	dsb	sy
1a00149a:	e7fe      	b.n	1a00149a <xQueueReceive+0x32>
1a00149c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00149e:	f000 fdcb 	bl	1a002038 <xTaskGetSchedulerState>
1a0014a2:	b950      	cbnz	r0, 1a0014ba <xQueueReceive+0x52>
1a0014a4:	9b01      	ldr	r3, [sp, #4]
1a0014a6:	b153      	cbz	r3, 1a0014be <xQueueReceive+0x56>
1a0014a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ac:	f383 8811 	msr	BASEPRI, r3
1a0014b0:	f3bf 8f6f 	isb	sy
1a0014b4:	f3bf 8f4f 	dsb	sy
1a0014b8:	e7fe      	b.n	1a0014b8 <xQueueReceive+0x50>
1a0014ba:	2600      	movs	r6, #0
1a0014bc:	e03e      	b.n	1a00153c <xQueueReceive+0xd4>
1a0014be:	2600      	movs	r6, #0
1a0014c0:	e03c      	b.n	1a00153c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0014c2:	4639      	mov	r1, r7
1a0014c4:	4620      	mov	r0, r4
1a0014c6:	f7ff fd88 	bl	1a000fda <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0014ca:	3d01      	subs	r5, #1
1a0014cc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014ce:	6923      	ldr	r3, [r4, #16]
1a0014d0:	b923      	cbnz	r3, 1a0014dc <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0014d2:	f001 f9e1 	bl	1a002898 <vPortExitCritical>
				return pdPASS;
1a0014d6:	2001      	movs	r0, #1
}
1a0014d8:	b005      	add	sp, #20
1a0014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014dc:	f104 0010 	add.w	r0, r4, #16
1a0014e0:	f000 fd06 	bl	1a001ef0 <xTaskRemoveFromEventList>
1a0014e4:	2800      	cmp	r0, #0
1a0014e6:	d0f4      	beq.n	1a0014d2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0014e8:	4b34      	ldr	r3, [pc, #208]	; (1a0015bc <xQueueReceive+0x154>)
1a0014ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014ee:	601a      	str	r2, [r3, #0]
1a0014f0:	f3bf 8f4f 	dsb	sy
1a0014f4:	f3bf 8f6f 	isb	sy
1a0014f8:	e7eb      	b.n	1a0014d2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0014fa:	f001 f9cd 	bl	1a002898 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0014fe:	2000      	movs	r0, #0
1a001500:	e7ea      	b.n	1a0014d8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001502:	a802      	add	r0, sp, #8
1a001504:	f000 fd3a 	bl	1a001f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001508:	2601      	movs	r6, #1
1a00150a:	e021      	b.n	1a001550 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a00150c:	2300      	movs	r3, #0
1a00150e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001512:	e029      	b.n	1a001568 <xQueueReceive+0x100>
1a001514:	2300      	movs	r3, #0
1a001516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00151a:	e02b      	b.n	1a001574 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a00151c:	4620      	mov	r0, r4
1a00151e:	f7ff fd6e 	bl	1a000ffe <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001522:	f000 fbd3 	bl	1a001ccc <xTaskResumeAll>
1a001526:	e009      	b.n	1a00153c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001528:	4620      	mov	r0, r4
1a00152a:	f7ff fd68 	bl	1a000ffe <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00152e:	f000 fbcd 	bl	1a001ccc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001532:	4620      	mov	r0, r4
1a001534:	f7ff fd09 	bl	1a000f4a <prvIsQueueEmpty>
1a001538:	2800      	cmp	r0, #0
1a00153a:	d13d      	bne.n	1a0015b8 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a00153c:	f001 f98a 	bl	1a002854 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001540:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001542:	2d00      	cmp	r5, #0
1a001544:	d1bd      	bne.n	1a0014c2 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001546:	9b01      	ldr	r3, [sp, #4]
1a001548:	2b00      	cmp	r3, #0
1a00154a:	d0d6      	beq.n	1a0014fa <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a00154c:	2e00      	cmp	r6, #0
1a00154e:	d0d8      	beq.n	1a001502 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001550:	f001 f9a2 	bl	1a002898 <vPortExitCritical>
		vTaskSuspendAll();
1a001554:	f000 fb20 	bl	1a001b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001558:	f001 f97c 	bl	1a002854 <vPortEnterCritical>
1a00155c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001560:	b25b      	sxtb	r3, r3
1a001562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001566:	d0d1      	beq.n	1a00150c <xQueueReceive+0xa4>
1a001568:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00156c:	b25b      	sxtb	r3, r3
1a00156e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001572:	d0cf      	beq.n	1a001514 <xQueueReceive+0xac>
1a001574:	f001 f990 	bl	1a002898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001578:	a901      	add	r1, sp, #4
1a00157a:	a802      	add	r0, sp, #8
1a00157c:	f000 fd0a 	bl	1a001f94 <xTaskCheckForTimeOut>
1a001580:	2800      	cmp	r0, #0
1a001582:	d1d1      	bne.n	1a001528 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001584:	4620      	mov	r0, r4
1a001586:	f7ff fce0 	bl	1a000f4a <prvIsQueueEmpty>
1a00158a:	2800      	cmp	r0, #0
1a00158c:	d0c6      	beq.n	1a00151c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00158e:	9901      	ldr	r1, [sp, #4]
1a001590:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001594:	f000 fc78 	bl	1a001e88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001598:	4620      	mov	r0, r4
1a00159a:	f7ff fd30 	bl	1a000ffe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00159e:	f000 fb95 	bl	1a001ccc <xTaskResumeAll>
1a0015a2:	2800      	cmp	r0, #0
1a0015a4:	d1ca      	bne.n	1a00153c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0015a6:	4b05      	ldr	r3, [pc, #20]	; (1a0015bc <xQueueReceive+0x154>)
1a0015a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015ac:	601a      	str	r2, [r3, #0]
1a0015ae:	f3bf 8f4f 	dsb	sy
1a0015b2:	f3bf 8f6f 	isb	sy
1a0015b6:	e7c1      	b.n	1a00153c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a0015b8:	2000      	movs	r0, #0
1a0015ba:	e78d      	b.n	1a0014d8 <xQueueReceive+0x70>
1a0015bc:	e000ed04 	.word	0xe000ed04

1a0015c0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0015c0:	2300      	movs	r3, #0
1a0015c2:	2b07      	cmp	r3, #7
1a0015c4:	d80c      	bhi.n	1a0015e0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0015c6:	4a07      	ldr	r2, [pc, #28]	; (1a0015e4 <vQueueAddToRegistry+0x24>)
1a0015c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0015cc:	b10a      	cbz	r2, 1a0015d2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0015ce:	3301      	adds	r3, #1
1a0015d0:	e7f7      	b.n	1a0015c2 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0015d2:	4a04      	ldr	r2, [pc, #16]	; (1a0015e4 <vQueueAddToRegistry+0x24>)
1a0015d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0015d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0015dc:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0015de:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0015e0:	4770      	bx	lr
1a0015e2:	bf00      	nop
1a0015e4:	1000311c 	.word	0x1000311c

1a0015e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a0015e8:	b570      	push	{r4, r5, r6, lr}
1a0015ea:	4604      	mov	r4, r0
1a0015ec:	460d      	mov	r5, r1
1a0015ee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0015f0:	f001 f930 	bl	1a002854 <vPortEnterCritical>
1a0015f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0015f8:	b25b      	sxtb	r3, r3
1a0015fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015fe:	d00d      	beq.n	1a00161c <vQueueWaitForMessageRestricted+0x34>
1a001600:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001604:	b25b      	sxtb	r3, r3
1a001606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00160a:	d00b      	beq.n	1a001624 <vQueueWaitForMessageRestricted+0x3c>
1a00160c:	f001 f944 	bl	1a002898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001612:	b15b      	cbz	r3, 1a00162c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001614:	4620      	mov	r0, r4
1a001616:	f7ff fcf2 	bl	1a000ffe <prvUnlockQueue>
	}
1a00161a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00161c:	2300      	movs	r3, #0
1a00161e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001622:	e7ed      	b.n	1a001600 <vQueueWaitForMessageRestricted+0x18>
1a001624:	2300      	movs	r3, #0
1a001626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00162a:	e7ef      	b.n	1a00160c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00162c:	4632      	mov	r2, r6
1a00162e:	4629      	mov	r1, r5
1a001630:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001634:	f000 fc40 	bl	1a001eb8 <vTaskPlaceOnEventListRestricted>
1a001638:	e7ec      	b.n	1a001614 <vQueueWaitForMessageRestricted+0x2c>

1a00163a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00163a:	f100 0308 	add.w	r3, r0, #8
1a00163e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001644:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001646:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001648:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00164a:	2300      	movs	r3, #0
1a00164c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00164e:	4770      	bx	lr

1a001650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001650:	2300      	movs	r3, #0
1a001652:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001654:	4770      	bx	lr

1a001656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001656:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001658:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00165a:	689a      	ldr	r2, [r3, #8]
1a00165c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00165e:	689a      	ldr	r2, [r3, #8]
1a001660:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001662:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001664:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001666:	6803      	ldr	r3, [r0, #0]
1a001668:	3301      	adds	r3, #1
1a00166a:	6003      	str	r3, [r0, #0]
}
1a00166c:	4770      	bx	lr

1a00166e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00166e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001670:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001672:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001676:	d002      	beq.n	1a00167e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001678:	f100 0208 	add.w	r2, r0, #8
1a00167c:	e002      	b.n	1a001684 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00167e:	6902      	ldr	r2, [r0, #16]
1a001680:	e004      	b.n	1a00168c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001682:	461a      	mov	r2, r3
1a001684:	6853      	ldr	r3, [r2, #4]
1a001686:	681c      	ldr	r4, [r3, #0]
1a001688:	42ac      	cmp	r4, r5
1a00168a:	d9fa      	bls.n	1a001682 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00168c:	6853      	ldr	r3, [r2, #4]
1a00168e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001690:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001692:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001694:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001696:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001698:	6803      	ldr	r3, [r0, #0]
1a00169a:	3301      	adds	r3, #1
1a00169c:	6003      	str	r3, [r0, #0]
}
1a00169e:	bc30      	pop	{r4, r5}
1a0016a0:	4770      	bx	lr

1a0016a2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0016a2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0016a4:	6842      	ldr	r2, [r0, #4]
1a0016a6:	6881      	ldr	r1, [r0, #8]
1a0016a8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0016aa:	6882      	ldr	r2, [r0, #8]
1a0016ac:	6841      	ldr	r1, [r0, #4]
1a0016ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0016b0:	685a      	ldr	r2, [r3, #4]
1a0016b2:	4282      	cmp	r2, r0
1a0016b4:	d006      	beq.n	1a0016c4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0016b6:	2200      	movs	r2, #0
1a0016b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0016ba:	681a      	ldr	r2, [r3, #0]
1a0016bc:	3a01      	subs	r2, #1
1a0016be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0016c0:	6818      	ldr	r0, [r3, #0]
}
1a0016c2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0016c4:	6882      	ldr	r2, [r0, #8]
1a0016c6:	605a      	str	r2, [r3, #4]
1a0016c8:	e7f5      	b.n	1a0016b6 <uxListRemove+0x14>
1a0016ca:	Address 0x000000001a0016ca is out of bounds.


1a0016cc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0016cc:	4b03      	ldr	r3, [pc, #12]	; (1a0016dc <vApplicationGetIdleTaskMemory+0x10>)
1a0016ce:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0016d0:	4b03      	ldr	r3, [pc, #12]	; (1a0016e0 <vApplicationGetIdleTaskMemory+0x14>)
1a0016d2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0016d4:	235a      	movs	r3, #90	; 0x5a
1a0016d6:	6013      	str	r3, [r2, #0]
}
1a0016d8:	4770      	bx	lr
1a0016da:	bf00      	nop
1a0016dc:	10002c84 	.word	0x10002c84
1a0016e0:	1000257c 	.word	0x1000257c

1a0016e4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0016e4:	4b03      	ldr	r3, [pc, #12]	; (1a0016f4 <vApplicationGetTimerTaskMemory+0x10>)
1a0016e6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0016e8:	4b03      	ldr	r3, [pc, #12]	; (1a0016f8 <vApplicationGetTimerTaskMemory+0x14>)
1a0016ea:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0016ec:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0016f0:	6013      	str	r3, [r2, #0]
1a0016f2:	4770      	bx	lr
1a0016f4:	10002ce4 	.word	0x10002ce4
1a0016f8:	100026e4 	.word	0x100026e4

1a0016fc <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a0016fc:	e7fe      	b.n	1a0016fc <vApplicationStackOverflowHook>

1a0016fe <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a0016fe:	e7fe      	b.n	1a0016fe <vApplicationMallocFailedHook>

1a001700 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
1a001700:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
1a001702:	e001      	b.n	1a001708 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
1a001704:	3001      	adds	r0, #1
			ulCount++;
1a001706:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
1a001708:	7802      	ldrb	r2, [r0, #0]
1a00170a:	2aa5      	cmp	r2, #165	; 0xa5
1a00170c:	d0fa      	beq.n	1a001704 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
1a00170e:	f3c3 008f 	ubfx	r0, r3, #2, #16
1a001712:	4770      	bx	lr

1a001714 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001714:	4b08      	ldr	r3, [pc, #32]	; (1a001738 <prvResetNextTaskUnblockTime+0x24>)
1a001716:	681b      	ldr	r3, [r3, #0]
1a001718:	681b      	ldr	r3, [r3, #0]
1a00171a:	b13b      	cbz	r3, 1a00172c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00171c:	4b06      	ldr	r3, [pc, #24]	; (1a001738 <prvResetNextTaskUnblockTime+0x24>)
1a00171e:	681b      	ldr	r3, [r3, #0]
1a001720:	68db      	ldr	r3, [r3, #12]
1a001722:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001724:	685a      	ldr	r2, [r3, #4]
1a001726:	4b05      	ldr	r3, [pc, #20]	; (1a00173c <prvResetNextTaskUnblockTime+0x28>)
1a001728:	601a      	str	r2, [r3, #0]
	}
}
1a00172a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a00172c:	4b03      	ldr	r3, [pc, #12]	; (1a00173c <prvResetNextTaskUnblockTime+0x28>)
1a00172e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001732:	601a      	str	r2, [r3, #0]
1a001734:	4770      	bx	lr
1a001736:	bf00      	nop
1a001738:	10002d48 	.word	0x10002d48
1a00173c:	10002e1c 	.word	0x10002e1c

1a001740 <prvInitialiseNewTask>:
{
1a001740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001744:	4681      	mov	r9, r0
1a001746:	460d      	mov	r5, r1
1a001748:	4617      	mov	r7, r2
1a00174a:	469a      	mov	sl, r3
1a00174c:	9e08      	ldr	r6, [sp, #32]
1a00174e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001752:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001754:	0092      	lsls	r2, r2, #2
1a001756:	21a5      	movs	r1, #165	; 0xa5
1a001758:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00175a:	f003 faae 	bl	1a004cba <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00175e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001760:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001764:	3a01      	subs	r2, #1
1a001766:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00176a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00176e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001770:	2300      	movs	r3, #0
1a001772:	2b0f      	cmp	r3, #15
1a001774:	d807      	bhi.n	1a001786 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001776:	5ce9      	ldrb	r1, [r5, r3]
1a001778:	18e2      	adds	r2, r4, r3
1a00177a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00177e:	5cea      	ldrb	r2, [r5, r3]
1a001780:	b10a      	cbz	r2, 1a001786 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001782:	3301      	adds	r3, #1
1a001784:	e7f5      	b.n	1a001772 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001786:	2300      	movs	r3, #0
1a001788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00178c:	2e06      	cmp	r6, #6
1a00178e:	d900      	bls.n	1a001792 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001790:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001792:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001794:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001796:	2500      	movs	r5, #0
1a001798:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00179a:	1d20      	adds	r0, r4, #4
1a00179c:	f7ff ff58 	bl	1a001650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0017a0:	f104 0018 	add.w	r0, r4, #24
1a0017a4:	f7ff ff54 	bl	1a001650 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0017a8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0017aa:	f1c6 0607 	rsb	r6, r6, #7
1a0017ae:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0017b0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0017b2:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0017b4:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0017b8:	4652      	mov	r2, sl
1a0017ba:	4649      	mov	r1, r9
1a0017bc:	4638      	mov	r0, r7
1a0017be:	f001 f81d 	bl	1a0027fc <pxPortInitialiseStack>
1a0017c2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0017c4:	f1b8 0f00 	cmp.w	r8, #0
1a0017c8:	d001      	beq.n	1a0017ce <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0017ca:	f8c8 4000 	str.w	r4, [r8]
}
1a0017ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017d2:	Address 0x000000001a0017d2 is out of bounds.


1a0017d4 <prvInitialiseTaskLists>:
{
1a0017d4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0017d6:	2400      	movs	r4, #0
1a0017d8:	e007      	b.n	1a0017ea <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0017da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0017de:	0093      	lsls	r3, r2, #2
1a0017e0:	480e      	ldr	r0, [pc, #56]	; (1a00181c <prvInitialiseTaskLists+0x48>)
1a0017e2:	4418      	add	r0, r3
1a0017e4:	f7ff ff29 	bl	1a00163a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0017e8:	3401      	adds	r4, #1
1a0017ea:	2c06      	cmp	r4, #6
1a0017ec:	d9f5      	bls.n	1a0017da <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0017ee:	4d0c      	ldr	r5, [pc, #48]	; (1a001820 <prvInitialiseTaskLists+0x4c>)
1a0017f0:	4628      	mov	r0, r5
1a0017f2:	f7ff ff22 	bl	1a00163a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0017f6:	4c0b      	ldr	r4, [pc, #44]	; (1a001824 <prvInitialiseTaskLists+0x50>)
1a0017f8:	4620      	mov	r0, r4
1a0017fa:	f7ff ff1e 	bl	1a00163a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0017fe:	480a      	ldr	r0, [pc, #40]	; (1a001828 <prvInitialiseTaskLists+0x54>)
1a001800:	f7ff ff1b 	bl	1a00163a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001804:	4809      	ldr	r0, [pc, #36]	; (1a00182c <prvInitialiseTaskLists+0x58>)
1a001806:	f7ff ff18 	bl	1a00163a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00180a:	4809      	ldr	r0, [pc, #36]	; (1a001830 <prvInitialiseTaskLists+0x5c>)
1a00180c:	f7ff ff15 	bl	1a00163a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001810:	4b08      	ldr	r3, [pc, #32]	; (1a001834 <prvInitialiseTaskLists+0x60>)
1a001812:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001814:	4b08      	ldr	r3, [pc, #32]	; (1a001838 <prvInitialiseTaskLists+0x64>)
1a001816:	601c      	str	r4, [r3, #0]
}
1a001818:	bd38      	pop	{r3, r4, r5, pc}
1a00181a:	bf00      	nop
1a00181c:	10002d50 	.word	0x10002d50
1a001820:	10002df4 	.word	0x10002df4
1a001824:	10002e08 	.word	0x10002e08
1a001828:	10002e24 	.word	0x10002e24
1a00182c:	10002e50 	.word	0x10002e50
1a001830:	10002e3c 	.word	0x10002e3c
1a001834:	10002d48 	.word	0x10002d48
1a001838:	10002d4c 	.word	0x10002d4c

1a00183c <prvAddNewTaskToReadyList>:
{
1a00183c:	b510      	push	{r4, lr}
1a00183e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001840:	f001 f808 	bl	1a002854 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001844:	4a21      	ldr	r2, [pc, #132]	; (1a0018cc <prvAddNewTaskToReadyList+0x90>)
1a001846:	6813      	ldr	r3, [r2, #0]
1a001848:	3301      	adds	r3, #1
1a00184a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a00184c:	4b20      	ldr	r3, [pc, #128]	; (1a0018d0 <prvAddNewTaskToReadyList+0x94>)
1a00184e:	681b      	ldr	r3, [r3, #0]
1a001850:	b15b      	cbz	r3, 1a00186a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001852:	4b20      	ldr	r3, [pc, #128]	; (1a0018d4 <prvAddNewTaskToReadyList+0x98>)
1a001854:	681b      	ldr	r3, [r3, #0]
1a001856:	b96b      	cbnz	r3, 1a001874 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001858:	4b1d      	ldr	r3, [pc, #116]	; (1a0018d0 <prvAddNewTaskToReadyList+0x94>)
1a00185a:	681b      	ldr	r3, [r3, #0]
1a00185c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00185e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001860:	429a      	cmp	r2, r3
1a001862:	d807      	bhi.n	1a001874 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001864:	4b1a      	ldr	r3, [pc, #104]	; (1a0018d0 <prvAddNewTaskToReadyList+0x94>)
1a001866:	601c      	str	r4, [r3, #0]
1a001868:	e004      	b.n	1a001874 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00186a:	4b19      	ldr	r3, [pc, #100]	; (1a0018d0 <prvAddNewTaskToReadyList+0x94>)
1a00186c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00186e:	6813      	ldr	r3, [r2, #0]
1a001870:	2b01      	cmp	r3, #1
1a001872:	d027      	beq.n	1a0018c4 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001874:	4a18      	ldr	r2, [pc, #96]	; (1a0018d8 <prvAddNewTaskToReadyList+0x9c>)
1a001876:	6813      	ldr	r3, [r2, #0]
1a001878:	3301      	adds	r3, #1
1a00187a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00187c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00187e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001880:	2201      	movs	r2, #1
1a001882:	409a      	lsls	r2, r3
1a001884:	4915      	ldr	r1, [pc, #84]	; (1a0018dc <prvAddNewTaskToReadyList+0xa0>)
1a001886:	6808      	ldr	r0, [r1, #0]
1a001888:	4302      	orrs	r2, r0
1a00188a:	600a      	str	r2, [r1, #0]
1a00188c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001890:	009a      	lsls	r2, r3, #2
1a001892:	1d21      	adds	r1, r4, #4
1a001894:	4812      	ldr	r0, [pc, #72]	; (1a0018e0 <prvAddNewTaskToReadyList+0xa4>)
1a001896:	4410      	add	r0, r2
1a001898:	f7ff fedd 	bl	1a001656 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00189c:	f000 fffc 	bl	1a002898 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0018a0:	4b0c      	ldr	r3, [pc, #48]	; (1a0018d4 <prvAddNewTaskToReadyList+0x98>)
1a0018a2:	681b      	ldr	r3, [r3, #0]
1a0018a4:	b16b      	cbz	r3, 1a0018c2 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0018a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0018d0 <prvAddNewTaskToReadyList+0x94>)
1a0018a8:	681b      	ldr	r3, [r3, #0]
1a0018aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018ae:	429a      	cmp	r2, r3
1a0018b0:	d207      	bcs.n	1a0018c2 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0018b2:	4b0c      	ldr	r3, [pc, #48]	; (1a0018e4 <prvAddNewTaskToReadyList+0xa8>)
1a0018b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0018b8:	601a      	str	r2, [r3, #0]
1a0018ba:	f3bf 8f4f 	dsb	sy
1a0018be:	f3bf 8f6f 	isb	sy
}
1a0018c2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0018c4:	f7ff ff86 	bl	1a0017d4 <prvInitialiseTaskLists>
1a0018c8:	e7d4      	b.n	1a001874 <prvAddNewTaskToReadyList+0x38>
1a0018ca:	bf00      	nop
1a0018cc:	10002ddc 	.word	0x10002ddc
1a0018d0:	10002d44 	.word	0x10002d44
1a0018d4:	10002e38 	.word	0x10002e38
1a0018d8:	10002dec 	.word	0x10002dec
1a0018dc:	10002df0 	.word	0x10002df0
1a0018e0:	10002d50 	.word	0x10002d50
1a0018e4:	e000ed04 	.word	0xe000ed04

1a0018e8 <prvDeleteTCB>:
	{
1a0018e8:	b510      	push	{r4, lr}
1a0018ea:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0018ec:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0018f0:	b933      	cbnz	r3, 1a001900 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0018f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0018f4:	f7ff fadc 	bl	1a000eb0 <vPortFree>
				vPortFree( pxTCB );
1a0018f8:	4620      	mov	r0, r4
1a0018fa:	f7ff fad9 	bl	1a000eb0 <vPortFree>
	}
1a0018fe:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001900:	2b01      	cmp	r3, #1
1a001902:	d00a      	beq.n	1a00191a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001904:	2b02      	cmp	r3, #2
1a001906:	d0fa      	beq.n	1a0018fe <prvDeleteTCB+0x16>
1a001908:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00190c:	f383 8811 	msr	BASEPRI, r3
1a001910:	f3bf 8f6f 	isb	sy
1a001914:	f3bf 8f4f 	dsb	sy
1a001918:	e7fe      	b.n	1a001918 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00191a:	f7ff fac9 	bl	1a000eb0 <vPortFree>
1a00191e:	e7ee      	b.n	1a0018fe <prvDeleteTCB+0x16>

1a001920 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001920:	4b0f      	ldr	r3, [pc, #60]	; (1a001960 <prvCheckTasksWaitingTermination+0x40>)
1a001922:	681b      	ldr	r3, [r3, #0]
1a001924:	b1d3      	cbz	r3, 1a00195c <prvCheckTasksWaitingTermination+0x3c>
{
1a001926:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001928:	f000 ff94 	bl	1a002854 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00192c:	4b0d      	ldr	r3, [pc, #52]	; (1a001964 <prvCheckTasksWaitingTermination+0x44>)
1a00192e:	68db      	ldr	r3, [r3, #12]
1a001930:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001932:	1d20      	adds	r0, r4, #4
1a001934:	f7ff feb5 	bl	1a0016a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001938:	4a0b      	ldr	r2, [pc, #44]	; (1a001968 <prvCheckTasksWaitingTermination+0x48>)
1a00193a:	6813      	ldr	r3, [r2, #0]
1a00193c:	3b01      	subs	r3, #1
1a00193e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001940:	4a07      	ldr	r2, [pc, #28]	; (1a001960 <prvCheckTasksWaitingTermination+0x40>)
1a001942:	6813      	ldr	r3, [r2, #0]
1a001944:	3b01      	subs	r3, #1
1a001946:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001948:	f000 ffa6 	bl	1a002898 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00194c:	4620      	mov	r0, r4
1a00194e:	f7ff ffcb 	bl	1a0018e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001952:	4b03      	ldr	r3, [pc, #12]	; (1a001960 <prvCheckTasksWaitingTermination+0x40>)
1a001954:	681b      	ldr	r3, [r3, #0]
1a001956:	2b00      	cmp	r3, #0
1a001958:	d1e6      	bne.n	1a001928 <prvCheckTasksWaitingTermination+0x8>
}
1a00195a:	bd10      	pop	{r4, pc}
1a00195c:	4770      	bx	lr
1a00195e:	bf00      	nop
1a001960:	10002de0 	.word	0x10002de0
1a001964:	10002e50 	.word	0x10002e50
1a001968:	10002ddc 	.word	0x10002ddc

1a00196c <prvIdleTask>:
{
1a00196c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00196e:	f7ff ffd7 	bl	1a001920 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001972:	4b06      	ldr	r3, [pc, #24]	; (1a00198c <prvIdleTask+0x20>)
1a001974:	681b      	ldr	r3, [r3, #0]
1a001976:	2b01      	cmp	r3, #1
1a001978:	d9f9      	bls.n	1a00196e <prvIdleTask+0x2>
				taskYIELD();
1a00197a:	4b05      	ldr	r3, [pc, #20]	; (1a001990 <prvIdleTask+0x24>)
1a00197c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001980:	601a      	str	r2, [r3, #0]
1a001982:	f3bf 8f4f 	dsb	sy
1a001986:	f3bf 8f6f 	isb	sy
1a00198a:	e7f0      	b.n	1a00196e <prvIdleTask+0x2>
1a00198c:	10002d50 	.word	0x10002d50
1a001990:	e000ed04 	.word	0xe000ed04

1a001994 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001994:	b570      	push	{r4, r5, r6, lr}
1a001996:	4604      	mov	r4, r0
1a001998:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00199a:	4b1d      	ldr	r3, [pc, #116]	; (1a001a10 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00199c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00199e:	4b1d      	ldr	r3, [pc, #116]	; (1a001a14 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019a0:	6818      	ldr	r0, [r3, #0]
1a0019a2:	3004      	adds	r0, #4
1a0019a4:	f7ff fe7d 	bl	1a0016a2 <uxListRemove>
1a0019a8:	b950      	cbnz	r0, 1a0019c0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0019aa:	4b1a      	ldr	r3, [pc, #104]	; (1a001a14 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019ac:	681b      	ldr	r3, [r3, #0]
1a0019ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0019b0:	2301      	movs	r3, #1
1a0019b2:	fa03 f202 	lsl.w	r2, r3, r2
1a0019b6:	4918      	ldr	r1, [pc, #96]	; (1a001a18 <prvAddCurrentTaskToDelayedList+0x84>)
1a0019b8:	680b      	ldr	r3, [r1, #0]
1a0019ba:	ea23 0302 	bic.w	r3, r3, r2
1a0019be:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0019c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0019c4:	d013      	beq.n	1a0019ee <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0019c6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0019c8:	4b12      	ldr	r3, [pc, #72]	; (1a001a14 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019ca:	681b      	ldr	r3, [r3, #0]
1a0019cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0019ce:	42a5      	cmp	r5, r4
1a0019d0:	d816      	bhi.n	1a001a00 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0019d2:	4b12      	ldr	r3, [pc, #72]	; (1a001a1c <prvAddCurrentTaskToDelayedList+0x88>)
1a0019d4:	6818      	ldr	r0, [r3, #0]
1a0019d6:	4b0f      	ldr	r3, [pc, #60]	; (1a001a14 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019d8:	6819      	ldr	r1, [r3, #0]
1a0019da:	3104      	adds	r1, #4
1a0019dc:	f7ff fe47 	bl	1a00166e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0019e0:	4b0f      	ldr	r3, [pc, #60]	; (1a001a20 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0019e2:	681b      	ldr	r3, [r3, #0]
1a0019e4:	42a3      	cmp	r3, r4
1a0019e6:	d912      	bls.n	1a001a0e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0019e8:	4b0d      	ldr	r3, [pc, #52]	; (1a001a20 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0019ea:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0019ec:	e00f      	b.n	1a001a0e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0019ee:	2e00      	cmp	r6, #0
1a0019f0:	d0e9      	beq.n	1a0019c6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0019f2:	4b08      	ldr	r3, [pc, #32]	; (1a001a14 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019f4:	6819      	ldr	r1, [r3, #0]
1a0019f6:	3104      	adds	r1, #4
1a0019f8:	480a      	ldr	r0, [pc, #40]	; (1a001a24 <prvAddCurrentTaskToDelayedList+0x90>)
1a0019fa:	f7ff fe2c 	bl	1a001656 <vListInsertEnd>
1a0019fe:	e006      	b.n	1a001a0e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a00:	4b09      	ldr	r3, [pc, #36]	; (1a001a28 <prvAddCurrentTaskToDelayedList+0x94>)
1a001a02:	6818      	ldr	r0, [r3, #0]
1a001a04:	4b03      	ldr	r3, [pc, #12]	; (1a001a14 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a06:	6819      	ldr	r1, [r3, #0]
1a001a08:	3104      	adds	r1, #4
1a001a0a:	f7ff fe30 	bl	1a00166e <vListInsert>
}
1a001a0e:	bd70      	pop	{r4, r5, r6, pc}
1a001a10:	10002e64 	.word	0x10002e64
1a001a14:	10002d44 	.word	0x10002d44
1a001a18:	10002df0 	.word	0x10002df0
1a001a1c:	10002d48 	.word	0x10002d48
1a001a20:	10002e1c 	.word	0x10002e1c
1a001a24:	10002e3c 	.word	0x10002e3c
1a001a28:	10002d4c 	.word	0x10002d4c

1a001a2c <xTaskCreateStatic>:
	{
1a001a2c:	b570      	push	{r4, r5, r6, lr}
1a001a2e:	b086      	sub	sp, #24
1a001a30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001a32:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001a34:	b945      	cbnz	r5, 1a001a48 <xTaskCreateStatic+0x1c>
1a001a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a3a:	f383 8811 	msr	BASEPRI, r3
1a001a3e:	f3bf 8f6f 	isb	sy
1a001a42:	f3bf 8f4f 	dsb	sy
1a001a46:	e7fe      	b.n	1a001a46 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001a48:	b944      	cbnz	r4, 1a001a5c <xTaskCreateStatic+0x30>
1a001a4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a4e:	f383 8811 	msr	BASEPRI, r3
1a001a52:	f3bf 8f6f 	isb	sy
1a001a56:	f3bf 8f4f 	dsb	sy
1a001a5a:	e7fe      	b.n	1a001a5a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001a5c:	2660      	movs	r6, #96	; 0x60
1a001a5e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001a60:	9e04      	ldr	r6, [sp, #16]
1a001a62:	2e60      	cmp	r6, #96	; 0x60
1a001a64:	d008      	beq.n	1a001a78 <xTaskCreateStatic+0x4c>
1a001a66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a6a:	f383 8811 	msr	BASEPRI, r3
1a001a6e:	f3bf 8f6f 	isb	sy
1a001a72:	f3bf 8f4f 	dsb	sy
1a001a76:	e7fe      	b.n	1a001a76 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001a78:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001a7a:	2502      	movs	r5, #2
1a001a7c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001a80:	2500      	movs	r5, #0
1a001a82:	9503      	str	r5, [sp, #12]
1a001a84:	9402      	str	r4, [sp, #8]
1a001a86:	ad05      	add	r5, sp, #20
1a001a88:	9501      	str	r5, [sp, #4]
1a001a8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001a8c:	9500      	str	r5, [sp, #0]
1a001a8e:	f7ff fe57 	bl	1a001740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001a92:	4620      	mov	r0, r4
1a001a94:	f7ff fed2 	bl	1a00183c <prvAddNewTaskToReadyList>
	}
1a001a98:	9805      	ldr	r0, [sp, #20]
1a001a9a:	b006      	add	sp, #24
1a001a9c:	bd70      	pop	{r4, r5, r6, pc}

1a001a9e <xTaskCreate>:
	{
1a001a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001aa2:	b085      	sub	sp, #20
1a001aa4:	4607      	mov	r7, r0
1a001aa6:	4688      	mov	r8, r1
1a001aa8:	4615      	mov	r5, r2
1a001aaa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001aac:	0090      	lsls	r0, r2, #2
1a001aae:	f7ff f971 	bl	1a000d94 <pvPortMalloc>
			if( pxStack != NULL )
1a001ab2:	b308      	cbz	r0, 1a001af8 <xTaskCreate+0x5a>
1a001ab4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001ab6:	2060      	movs	r0, #96	; 0x60
1a001ab8:	f7ff f96c 	bl	1a000d94 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001abc:	4604      	mov	r4, r0
1a001abe:	b1b8      	cbz	r0, 1a001af0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001ac0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001ac2:	b1e4      	cbz	r4, 1a001afe <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001ac4:	2300      	movs	r3, #0
1a001ac6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001aca:	9303      	str	r3, [sp, #12]
1a001acc:	9402      	str	r4, [sp, #8]
1a001ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001ad0:	9301      	str	r3, [sp, #4]
1a001ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001ad4:	9300      	str	r3, [sp, #0]
1a001ad6:	464b      	mov	r3, r9
1a001ad8:	462a      	mov	r2, r5
1a001ada:	4641      	mov	r1, r8
1a001adc:	4638      	mov	r0, r7
1a001ade:	f7ff fe2f 	bl	1a001740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001ae2:	4620      	mov	r0, r4
1a001ae4:	f7ff feaa 	bl	1a00183c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001ae8:	2001      	movs	r0, #1
	}
1a001aea:	b005      	add	sp, #20
1a001aec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001af0:	4630      	mov	r0, r6
1a001af2:	f7ff f9dd 	bl	1a000eb0 <vPortFree>
1a001af6:	e7e4      	b.n	1a001ac2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001afc:	e7f5      	b.n	1a001aea <xTaskCreate+0x4c>
1a001afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001b02:	e7f2      	b.n	1a001aea <xTaskCreate+0x4c>

1a001b04 <vTaskStartScheduler>:
{
1a001b04:	b510      	push	{r4, lr}
1a001b06:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001b08:	2400      	movs	r4, #0
1a001b0a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001b0c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001b0e:	aa07      	add	r2, sp, #28
1a001b10:	a906      	add	r1, sp, #24
1a001b12:	a805      	add	r0, sp, #20
1a001b14:	f7ff fdda 	bl	1a0016cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001b18:	9b05      	ldr	r3, [sp, #20]
1a001b1a:	9302      	str	r3, [sp, #8]
1a001b1c:	9b06      	ldr	r3, [sp, #24]
1a001b1e:	9301      	str	r3, [sp, #4]
1a001b20:	9400      	str	r4, [sp, #0]
1a001b22:	4623      	mov	r3, r4
1a001b24:	9a07      	ldr	r2, [sp, #28]
1a001b26:	4917      	ldr	r1, [pc, #92]	; (1a001b84 <vTaskStartScheduler+0x80>)
1a001b28:	4817      	ldr	r0, [pc, #92]	; (1a001b88 <vTaskStartScheduler+0x84>)
1a001b2a:	f7ff ff7f 	bl	1a001a2c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001b2e:	b140      	cbz	r0, 1a001b42 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001b30:	f000 fc52 	bl	1a0023d8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001b34:	2801      	cmp	r0, #1
1a001b36:	d006      	beq.n	1a001b46 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001b38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b3c:	d018      	beq.n	1a001b70 <vTaskStartScheduler+0x6c>
}
1a001b3e:	b008      	add	sp, #32
1a001b40:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001b42:	2000      	movs	r0, #0
1a001b44:	e7f6      	b.n	1a001b34 <vTaskStartScheduler+0x30>
1a001b46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b4a:	f383 8811 	msr	BASEPRI, r3
1a001b4e:	f3bf 8f6f 	isb	sy
1a001b52:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001b56:	4b0d      	ldr	r3, [pc, #52]	; (1a001b8c <vTaskStartScheduler+0x88>)
1a001b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001b5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001b5e:	4b0c      	ldr	r3, [pc, #48]	; (1a001b90 <vTaskStartScheduler+0x8c>)
1a001b60:	2201      	movs	r2, #1
1a001b62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001b64:	4b0b      	ldr	r3, [pc, #44]	; (1a001b94 <vTaskStartScheduler+0x90>)
1a001b66:	2200      	movs	r2, #0
1a001b68:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001b6a:	f000 ff15 	bl	1a002998 <xPortStartScheduler>
1a001b6e:	e7e6      	b.n	1a001b3e <vTaskStartScheduler+0x3a>
1a001b70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b74:	f383 8811 	msr	BASEPRI, r3
1a001b78:	f3bf 8f6f 	isb	sy
1a001b7c:	f3bf 8f4f 	dsb	sy
1a001b80:	e7fe      	b.n	1a001b80 <vTaskStartScheduler+0x7c>
1a001b82:	bf00      	nop
1a001b84:	1a00570c 	.word	0x1a00570c
1a001b88:	1a00196d 	.word	0x1a00196d
1a001b8c:	10002e1c 	.word	0x10002e1c
1a001b90:	10002e38 	.word	0x10002e38
1a001b94:	10002e64 	.word	0x10002e64

1a001b98 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001b98:	4a02      	ldr	r2, [pc, #8]	; (1a001ba4 <vTaskSuspendAll+0xc>)
1a001b9a:	6813      	ldr	r3, [r2, #0]
1a001b9c:	3301      	adds	r3, #1
1a001b9e:	6013      	str	r3, [r2, #0]
}
1a001ba0:	4770      	bx	lr
1a001ba2:	bf00      	nop
1a001ba4:	10002de8 	.word	0x10002de8

1a001ba8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001ba8:	4b01      	ldr	r3, [pc, #4]	; (1a001bb0 <xTaskGetTickCount+0x8>)
1a001baa:	6818      	ldr	r0, [r3, #0]
}
1a001bac:	4770      	bx	lr
1a001bae:	bf00      	nop
1a001bb0:	10002e64 	.word	0x10002e64

1a001bb4 <xTaskIncrementTick>:
{
1a001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001bb6:	4b3a      	ldr	r3, [pc, #232]	; (1a001ca0 <xTaskIncrementTick+0xec>)
1a001bb8:	681b      	ldr	r3, [r3, #0]
1a001bba:	2b00      	cmp	r3, #0
1a001bbc:	d164      	bne.n	1a001c88 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001bbe:	4b39      	ldr	r3, [pc, #228]	; (1a001ca4 <xTaskIncrementTick+0xf0>)
1a001bc0:	681d      	ldr	r5, [r3, #0]
1a001bc2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001bc4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001bc6:	b9c5      	cbnz	r5, 1a001bfa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001bc8:	4b37      	ldr	r3, [pc, #220]	; (1a001ca8 <xTaskIncrementTick+0xf4>)
1a001bca:	681b      	ldr	r3, [r3, #0]
1a001bcc:	681b      	ldr	r3, [r3, #0]
1a001bce:	b143      	cbz	r3, 1a001be2 <xTaskIncrementTick+0x2e>
1a001bd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bd4:	f383 8811 	msr	BASEPRI, r3
1a001bd8:	f3bf 8f6f 	isb	sy
1a001bdc:	f3bf 8f4f 	dsb	sy
1a001be0:	e7fe      	b.n	1a001be0 <xTaskIncrementTick+0x2c>
1a001be2:	4a31      	ldr	r2, [pc, #196]	; (1a001ca8 <xTaskIncrementTick+0xf4>)
1a001be4:	6811      	ldr	r1, [r2, #0]
1a001be6:	4b31      	ldr	r3, [pc, #196]	; (1a001cac <xTaskIncrementTick+0xf8>)
1a001be8:	6818      	ldr	r0, [r3, #0]
1a001bea:	6010      	str	r0, [r2, #0]
1a001bec:	6019      	str	r1, [r3, #0]
1a001bee:	4a30      	ldr	r2, [pc, #192]	; (1a001cb0 <xTaskIncrementTick+0xfc>)
1a001bf0:	6813      	ldr	r3, [r2, #0]
1a001bf2:	3301      	adds	r3, #1
1a001bf4:	6013      	str	r3, [r2, #0]
1a001bf6:	f7ff fd8d 	bl	1a001714 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001bfa:	4b2e      	ldr	r3, [pc, #184]	; (1a001cb4 <xTaskIncrementTick+0x100>)
1a001bfc:	681b      	ldr	r3, [r3, #0]
1a001bfe:	42ab      	cmp	r3, r5
1a001c00:	d938      	bls.n	1a001c74 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001c02:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001c04:	4b2c      	ldr	r3, [pc, #176]	; (1a001cb8 <xTaskIncrementTick+0x104>)
1a001c06:	681b      	ldr	r3, [r3, #0]
1a001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c0e:	009a      	lsls	r2, r3, #2
1a001c10:	4b2a      	ldr	r3, [pc, #168]	; (1a001cbc <xTaskIncrementTick+0x108>)
1a001c12:	589b      	ldr	r3, [r3, r2]
1a001c14:	2b01      	cmp	r3, #1
1a001c16:	d93c      	bls.n	1a001c92 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001c18:	2401      	movs	r4, #1
1a001c1a:	e03a      	b.n	1a001c92 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001c1c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001c1e:	4b22      	ldr	r3, [pc, #136]	; (1a001ca8 <xTaskIncrementTick+0xf4>)
1a001c20:	681b      	ldr	r3, [r3, #0]
1a001c22:	681b      	ldr	r3, [r3, #0]
1a001c24:	b343      	cbz	r3, 1a001c78 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001c26:	4b20      	ldr	r3, [pc, #128]	; (1a001ca8 <xTaskIncrementTick+0xf4>)
1a001c28:	681b      	ldr	r3, [r3, #0]
1a001c2a:	68db      	ldr	r3, [r3, #12]
1a001c2c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001c2e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001c30:	429d      	cmp	r5, r3
1a001c32:	d326      	bcc.n	1a001c82 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c34:	1d37      	adds	r7, r6, #4
1a001c36:	4638      	mov	r0, r7
1a001c38:	f7ff fd33 	bl	1a0016a2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001c3c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001c3e:	b11b      	cbz	r3, 1a001c48 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001c40:	f106 0018 	add.w	r0, r6, #24
1a001c44:	f7ff fd2d 	bl	1a0016a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001c48:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001c4a:	2201      	movs	r2, #1
1a001c4c:	409a      	lsls	r2, r3
1a001c4e:	491c      	ldr	r1, [pc, #112]	; (1a001cc0 <xTaskIncrementTick+0x10c>)
1a001c50:	6808      	ldr	r0, [r1, #0]
1a001c52:	4302      	orrs	r2, r0
1a001c54:	600a      	str	r2, [r1, #0]
1a001c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c5a:	009a      	lsls	r2, r3, #2
1a001c5c:	4639      	mov	r1, r7
1a001c5e:	4817      	ldr	r0, [pc, #92]	; (1a001cbc <xTaskIncrementTick+0x108>)
1a001c60:	4410      	add	r0, r2
1a001c62:	f7ff fcf8 	bl	1a001656 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001c66:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001c68:	4b13      	ldr	r3, [pc, #76]	; (1a001cb8 <xTaskIncrementTick+0x104>)
1a001c6a:	681b      	ldr	r3, [r3, #0]
1a001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c6e:	429a      	cmp	r2, r3
1a001c70:	d2d4      	bcs.n	1a001c1c <xTaskIncrementTick+0x68>
1a001c72:	e7d4      	b.n	1a001c1e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001c74:	2400      	movs	r4, #0
1a001c76:	e7d2      	b.n	1a001c1e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c78:	4b0e      	ldr	r3, [pc, #56]	; (1a001cb4 <xTaskIncrementTick+0x100>)
1a001c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c7e:	601a      	str	r2, [r3, #0]
					break;
1a001c80:	e7c0      	b.n	1a001c04 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001c82:	4a0c      	ldr	r2, [pc, #48]	; (1a001cb4 <xTaskIncrementTick+0x100>)
1a001c84:	6013      	str	r3, [r2, #0]
						break;
1a001c86:	e7bd      	b.n	1a001c04 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001c88:	4a0e      	ldr	r2, [pc, #56]	; (1a001cc4 <xTaskIncrementTick+0x110>)
1a001c8a:	6813      	ldr	r3, [r2, #0]
1a001c8c:	3301      	adds	r3, #1
1a001c8e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001c90:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001c92:	4b0d      	ldr	r3, [pc, #52]	; (1a001cc8 <xTaskIncrementTick+0x114>)
1a001c94:	681b      	ldr	r3, [r3, #0]
1a001c96:	b103      	cbz	r3, 1a001c9a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001c98:	2401      	movs	r4, #1
}
1a001c9a:	4620      	mov	r0, r4
1a001c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001c9e:	bf00      	nop
1a001ca0:	10002de8 	.word	0x10002de8
1a001ca4:	10002e64 	.word	0x10002e64
1a001ca8:	10002d48 	.word	0x10002d48
1a001cac:	10002d4c 	.word	0x10002d4c
1a001cb0:	10002e20 	.word	0x10002e20
1a001cb4:	10002e1c 	.word	0x10002e1c
1a001cb8:	10002d44 	.word	0x10002d44
1a001cbc:	10002d50 	.word	0x10002d50
1a001cc0:	10002df0 	.word	0x10002df0
1a001cc4:	10002de4 	.word	0x10002de4
1a001cc8:	10002e68 	.word	0x10002e68

1a001ccc <xTaskResumeAll>:
{
1a001ccc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001cce:	4b33      	ldr	r3, [pc, #204]	; (1a001d9c <xTaskResumeAll+0xd0>)
1a001cd0:	681b      	ldr	r3, [r3, #0]
1a001cd2:	b943      	cbnz	r3, 1a001ce6 <xTaskResumeAll+0x1a>
1a001cd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cd8:	f383 8811 	msr	BASEPRI, r3
1a001cdc:	f3bf 8f6f 	isb	sy
1a001ce0:	f3bf 8f4f 	dsb	sy
1a001ce4:	e7fe      	b.n	1a001ce4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001ce6:	f000 fdb5 	bl	1a002854 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001cea:	4b2c      	ldr	r3, [pc, #176]	; (1a001d9c <xTaskResumeAll+0xd0>)
1a001cec:	681a      	ldr	r2, [r3, #0]
1a001cee:	3a01      	subs	r2, #1
1a001cf0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001cf2:	681b      	ldr	r3, [r3, #0]
1a001cf4:	2b00      	cmp	r3, #0
1a001cf6:	d14d      	bne.n	1a001d94 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001cf8:	4b29      	ldr	r3, [pc, #164]	; (1a001da0 <xTaskResumeAll+0xd4>)
1a001cfa:	681b      	ldr	r3, [r3, #0]
1a001cfc:	b923      	cbnz	r3, 1a001d08 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001cfe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001d00:	f000 fdca 	bl	1a002898 <vPortExitCritical>
}
1a001d04:	4620      	mov	r0, r4
1a001d06:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001d08:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001d0a:	4b26      	ldr	r3, [pc, #152]	; (1a001da4 <xTaskResumeAll+0xd8>)
1a001d0c:	681b      	ldr	r3, [r3, #0]
1a001d0e:	b31b      	cbz	r3, 1a001d58 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001d10:	4b24      	ldr	r3, [pc, #144]	; (1a001da4 <xTaskResumeAll+0xd8>)
1a001d12:	68db      	ldr	r3, [r3, #12]
1a001d14:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001d16:	f104 0018 	add.w	r0, r4, #24
1a001d1a:	f7ff fcc2 	bl	1a0016a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d1e:	1d25      	adds	r5, r4, #4
1a001d20:	4628      	mov	r0, r5
1a001d22:	f7ff fcbe 	bl	1a0016a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d28:	2201      	movs	r2, #1
1a001d2a:	409a      	lsls	r2, r3
1a001d2c:	491e      	ldr	r1, [pc, #120]	; (1a001da8 <xTaskResumeAll+0xdc>)
1a001d2e:	6808      	ldr	r0, [r1, #0]
1a001d30:	4302      	orrs	r2, r0
1a001d32:	600a      	str	r2, [r1, #0]
1a001d34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d38:	009a      	lsls	r2, r3, #2
1a001d3a:	4629      	mov	r1, r5
1a001d3c:	481b      	ldr	r0, [pc, #108]	; (1a001dac <xTaskResumeAll+0xe0>)
1a001d3e:	4410      	add	r0, r2
1a001d40:	f7ff fc89 	bl	1a001656 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001d44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001d46:	4b1a      	ldr	r3, [pc, #104]	; (1a001db0 <xTaskResumeAll+0xe4>)
1a001d48:	681b      	ldr	r3, [r3, #0]
1a001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001d4c:	429a      	cmp	r2, r3
1a001d4e:	d3dc      	bcc.n	1a001d0a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001d50:	4b18      	ldr	r3, [pc, #96]	; (1a001db4 <xTaskResumeAll+0xe8>)
1a001d52:	2201      	movs	r2, #1
1a001d54:	601a      	str	r2, [r3, #0]
1a001d56:	e7d8      	b.n	1a001d0a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001d58:	b10c      	cbz	r4, 1a001d5e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001d5a:	f7ff fcdb 	bl	1a001714 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001d5e:	4b16      	ldr	r3, [pc, #88]	; (1a001db8 <xTaskResumeAll+0xec>)
1a001d60:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001d62:	b154      	cbz	r4, 1a001d7a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001d64:	f7ff ff26 	bl	1a001bb4 <xTaskIncrementTick>
1a001d68:	b110      	cbz	r0, 1a001d70 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001d6a:	4b12      	ldr	r3, [pc, #72]	; (1a001db4 <xTaskResumeAll+0xe8>)
1a001d6c:	2201      	movs	r2, #1
1a001d6e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001d70:	3c01      	subs	r4, #1
1a001d72:	d1f7      	bne.n	1a001d64 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001d74:	4b10      	ldr	r3, [pc, #64]	; (1a001db8 <xTaskResumeAll+0xec>)
1a001d76:	2200      	movs	r2, #0
1a001d78:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001d7a:	4b0e      	ldr	r3, [pc, #56]	; (1a001db4 <xTaskResumeAll+0xe8>)
1a001d7c:	681b      	ldr	r3, [r3, #0]
1a001d7e:	b15b      	cbz	r3, 1a001d98 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001d80:	4b0e      	ldr	r3, [pc, #56]	; (1a001dbc <xTaskResumeAll+0xf0>)
1a001d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001d86:	601a      	str	r2, [r3, #0]
1a001d88:	f3bf 8f4f 	dsb	sy
1a001d8c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001d90:	2401      	movs	r4, #1
1a001d92:	e7b5      	b.n	1a001d00 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001d94:	2400      	movs	r4, #0
1a001d96:	e7b3      	b.n	1a001d00 <xTaskResumeAll+0x34>
1a001d98:	2400      	movs	r4, #0
1a001d9a:	e7b1      	b.n	1a001d00 <xTaskResumeAll+0x34>
1a001d9c:	10002de8 	.word	0x10002de8
1a001da0:	10002ddc 	.word	0x10002ddc
1a001da4:	10002e24 	.word	0x10002e24
1a001da8:	10002df0 	.word	0x10002df0
1a001dac:	10002d50 	.word	0x10002d50
1a001db0:	10002d44 	.word	0x10002d44
1a001db4:	10002e68 	.word	0x10002e68
1a001db8:	10002de4 	.word	0x10002de4
1a001dbc:	e000ed04 	.word	0xe000ed04

1a001dc0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001dc0:	4b2c      	ldr	r3, [pc, #176]	; (1a001e74 <vTaskSwitchContext+0xb4>)
1a001dc2:	681b      	ldr	r3, [r3, #0]
1a001dc4:	b11b      	cbz	r3, 1a001dce <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001dc6:	4b2c      	ldr	r3, [pc, #176]	; (1a001e78 <vTaskSwitchContext+0xb8>)
1a001dc8:	2201      	movs	r2, #1
1a001dca:	601a      	str	r2, [r3, #0]
1a001dcc:	4770      	bx	lr
{
1a001dce:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001dd0:	4b29      	ldr	r3, [pc, #164]	; (1a001e78 <vTaskSwitchContext+0xb8>)
1a001dd2:	2200      	movs	r2, #0
1a001dd4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001dd6:	4b29      	ldr	r3, [pc, #164]	; (1a001e7c <vTaskSwitchContext+0xbc>)
1a001dd8:	681b      	ldr	r3, [r3, #0]
1a001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001ddc:	681a      	ldr	r2, [r3, #0]
1a001dde:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001de2:	d103      	bne.n	1a001dec <vTaskSwitchContext+0x2c>
1a001de4:	685a      	ldr	r2, [r3, #4]
1a001de6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001dea:	d01b      	beq.n	1a001e24 <vTaskSwitchContext+0x64>
1a001dec:	4b23      	ldr	r3, [pc, #140]	; (1a001e7c <vTaskSwitchContext+0xbc>)
1a001dee:	6818      	ldr	r0, [r3, #0]
1a001df0:	6819      	ldr	r1, [r3, #0]
1a001df2:	3134      	adds	r1, #52	; 0x34
1a001df4:	f7ff fc82 	bl	1a0016fc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001df8:	4b21      	ldr	r3, [pc, #132]	; (1a001e80 <vTaskSwitchContext+0xc0>)
1a001dfa:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001dfc:	fab3 f383 	clz	r3, r3
1a001e00:	b2db      	uxtb	r3, r3
1a001e02:	f1c3 031f 	rsb	r3, r3, #31
1a001e06:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001e0a:	008a      	lsls	r2, r1, #2
1a001e0c:	491d      	ldr	r1, [pc, #116]	; (1a001e84 <vTaskSwitchContext+0xc4>)
1a001e0e:	588a      	ldr	r2, [r1, r2]
1a001e10:	b98a      	cbnz	r2, 1a001e36 <vTaskSwitchContext+0x76>
	__asm volatile
1a001e12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e16:	f383 8811 	msr	BASEPRI, r3
1a001e1a:	f3bf 8f6f 	isb	sy
1a001e1e:	f3bf 8f4f 	dsb	sy
1a001e22:	e7fe      	b.n	1a001e22 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001e24:	689a      	ldr	r2, [r3, #8]
1a001e26:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001e2a:	d1df      	bne.n	1a001dec <vTaskSwitchContext+0x2c>
1a001e2c:	68db      	ldr	r3, [r3, #12]
1a001e2e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001e32:	d1db      	bne.n	1a001dec <vTaskSwitchContext+0x2c>
1a001e34:	e7e0      	b.n	1a001df8 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001e36:	4813      	ldr	r0, [pc, #76]	; (1a001e84 <vTaskSwitchContext+0xc4>)
1a001e38:	009a      	lsls	r2, r3, #2
1a001e3a:	18d4      	adds	r4, r2, r3
1a001e3c:	00a1      	lsls	r1, r4, #2
1a001e3e:	4401      	add	r1, r0
1a001e40:	684c      	ldr	r4, [r1, #4]
1a001e42:	6864      	ldr	r4, [r4, #4]
1a001e44:	604c      	str	r4, [r1, #4]
1a001e46:	441a      	add	r2, r3
1a001e48:	0091      	lsls	r1, r2, #2
1a001e4a:	3108      	adds	r1, #8
1a001e4c:	4408      	add	r0, r1
1a001e4e:	4284      	cmp	r4, r0
1a001e50:	d009      	beq.n	1a001e66 <vTaskSwitchContext+0xa6>
1a001e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e56:	009a      	lsls	r2, r3, #2
1a001e58:	4b0a      	ldr	r3, [pc, #40]	; (1a001e84 <vTaskSwitchContext+0xc4>)
1a001e5a:	4413      	add	r3, r2
1a001e5c:	685b      	ldr	r3, [r3, #4]
1a001e5e:	68da      	ldr	r2, [r3, #12]
1a001e60:	4b06      	ldr	r3, [pc, #24]	; (1a001e7c <vTaskSwitchContext+0xbc>)
1a001e62:	601a      	str	r2, [r3, #0]
}
1a001e64:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001e66:	6861      	ldr	r1, [r4, #4]
1a001e68:	4806      	ldr	r0, [pc, #24]	; (1a001e84 <vTaskSwitchContext+0xc4>)
1a001e6a:	2214      	movs	r2, #20
1a001e6c:	fb02 0203 	mla	r2, r2, r3, r0
1a001e70:	6051      	str	r1, [r2, #4]
1a001e72:	e7ee      	b.n	1a001e52 <vTaskSwitchContext+0x92>
1a001e74:	10002de8 	.word	0x10002de8
1a001e78:	10002e68 	.word	0x10002e68
1a001e7c:	10002d44 	.word	0x10002d44
1a001e80:	10002df0 	.word	0x10002df0
1a001e84:	10002d50 	.word	0x10002d50

1a001e88 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001e88:	b940      	cbnz	r0, 1a001e9c <vTaskPlaceOnEventList+0x14>
1a001e8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e8e:	f383 8811 	msr	BASEPRI, r3
1a001e92:	f3bf 8f6f 	isb	sy
1a001e96:	f3bf 8f4f 	dsb	sy
1a001e9a:	e7fe      	b.n	1a001e9a <vTaskPlaceOnEventList+0x12>
{
1a001e9c:	b510      	push	{r4, lr}
1a001e9e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001ea0:	4b04      	ldr	r3, [pc, #16]	; (1a001eb4 <vTaskPlaceOnEventList+0x2c>)
1a001ea2:	6819      	ldr	r1, [r3, #0]
1a001ea4:	3118      	adds	r1, #24
1a001ea6:	f7ff fbe2 	bl	1a00166e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001eaa:	2101      	movs	r1, #1
1a001eac:	4620      	mov	r0, r4
1a001eae:	f7ff fd71 	bl	1a001994 <prvAddCurrentTaskToDelayedList>
}
1a001eb2:	bd10      	pop	{r4, pc}
1a001eb4:	10002d44 	.word	0x10002d44

1a001eb8 <vTaskPlaceOnEventListRestricted>:
	{
1a001eb8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001eba:	b940      	cbnz	r0, 1a001ece <vTaskPlaceOnEventListRestricted+0x16>
1a001ebc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec0:	f383 8811 	msr	BASEPRI, r3
1a001ec4:	f3bf 8f6f 	isb	sy
1a001ec8:	f3bf 8f4f 	dsb	sy
1a001ecc:	e7fe      	b.n	1a001ecc <vTaskPlaceOnEventListRestricted+0x14>
1a001ece:	460c      	mov	r4, r1
1a001ed0:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001ed2:	4a06      	ldr	r2, [pc, #24]	; (1a001eec <vTaskPlaceOnEventListRestricted+0x34>)
1a001ed4:	6811      	ldr	r1, [r2, #0]
1a001ed6:	3118      	adds	r1, #24
1a001ed8:	f7ff fbbd 	bl	1a001656 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001edc:	b10d      	cbz	r5, 1a001ee2 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001ede:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001ee2:	4629      	mov	r1, r5
1a001ee4:	4620      	mov	r0, r4
1a001ee6:	f7ff fd55 	bl	1a001994 <prvAddCurrentTaskToDelayedList>
	}
1a001eea:	bd38      	pop	{r3, r4, r5, pc}
1a001eec:	10002d44 	.word	0x10002d44

1a001ef0 <xTaskRemoveFromEventList>:
{
1a001ef0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001ef2:	68c3      	ldr	r3, [r0, #12]
1a001ef4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001ef6:	b944      	cbnz	r4, 1a001f0a <xTaskRemoveFromEventList+0x1a>
1a001ef8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001efc:	f383 8811 	msr	BASEPRI, r3
1a001f00:	f3bf 8f6f 	isb	sy
1a001f04:	f3bf 8f4f 	dsb	sy
1a001f08:	e7fe      	b.n	1a001f08 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001f0a:	f104 0518 	add.w	r5, r4, #24
1a001f0e:	4628      	mov	r0, r5
1a001f10:	f7ff fbc7 	bl	1a0016a2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001f14:	4b13      	ldr	r3, [pc, #76]	; (1a001f64 <xTaskRemoveFromEventList+0x74>)
1a001f16:	681b      	ldr	r3, [r3, #0]
1a001f18:	b9e3      	cbnz	r3, 1a001f54 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001f1a:	1d25      	adds	r5, r4, #4
1a001f1c:	4628      	mov	r0, r5
1a001f1e:	f7ff fbc0 	bl	1a0016a2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001f22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001f24:	2201      	movs	r2, #1
1a001f26:	409a      	lsls	r2, r3
1a001f28:	490f      	ldr	r1, [pc, #60]	; (1a001f68 <xTaskRemoveFromEventList+0x78>)
1a001f2a:	6808      	ldr	r0, [r1, #0]
1a001f2c:	4302      	orrs	r2, r0
1a001f2e:	600a      	str	r2, [r1, #0]
1a001f30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f34:	009a      	lsls	r2, r3, #2
1a001f36:	4629      	mov	r1, r5
1a001f38:	480c      	ldr	r0, [pc, #48]	; (1a001f6c <xTaskRemoveFromEventList+0x7c>)
1a001f3a:	4410      	add	r0, r2
1a001f3c:	f7ff fb8b 	bl	1a001656 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001f40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f42:	4b0b      	ldr	r3, [pc, #44]	; (1a001f70 <xTaskRemoveFromEventList+0x80>)
1a001f44:	681b      	ldr	r3, [r3, #0]
1a001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f48:	429a      	cmp	r2, r3
1a001f4a:	d908      	bls.n	1a001f5e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001f4c:	2001      	movs	r0, #1
1a001f4e:	4b09      	ldr	r3, [pc, #36]	; (1a001f74 <xTaskRemoveFromEventList+0x84>)
1a001f50:	6018      	str	r0, [r3, #0]
}
1a001f52:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001f54:	4629      	mov	r1, r5
1a001f56:	4808      	ldr	r0, [pc, #32]	; (1a001f78 <xTaskRemoveFromEventList+0x88>)
1a001f58:	f7ff fb7d 	bl	1a001656 <vListInsertEnd>
1a001f5c:	e7f0      	b.n	1a001f40 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001f5e:	2000      	movs	r0, #0
	return xReturn;
1a001f60:	e7f7      	b.n	1a001f52 <xTaskRemoveFromEventList+0x62>
1a001f62:	bf00      	nop
1a001f64:	10002de8 	.word	0x10002de8
1a001f68:	10002df0 	.word	0x10002df0
1a001f6c:	10002d50 	.word	0x10002d50
1a001f70:	10002d44 	.word	0x10002d44
1a001f74:	10002e68 	.word	0x10002e68
1a001f78:	10002e24 	.word	0x10002e24

1a001f7c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001f7c:	4b03      	ldr	r3, [pc, #12]	; (1a001f8c <vTaskInternalSetTimeOutState+0x10>)
1a001f7e:	681b      	ldr	r3, [r3, #0]
1a001f80:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001f82:	4b03      	ldr	r3, [pc, #12]	; (1a001f90 <vTaskInternalSetTimeOutState+0x14>)
1a001f84:	681b      	ldr	r3, [r3, #0]
1a001f86:	6043      	str	r3, [r0, #4]
}
1a001f88:	4770      	bx	lr
1a001f8a:	bf00      	nop
1a001f8c:	10002e20 	.word	0x10002e20
1a001f90:	10002e64 	.word	0x10002e64

1a001f94 <xTaskCheckForTimeOut>:
{
1a001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001f96:	b150      	cbz	r0, 1a001fae <xTaskCheckForTimeOut+0x1a>
1a001f98:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001f9a:	b989      	cbnz	r1, 1a001fc0 <xTaskCheckForTimeOut+0x2c>
1a001f9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fa0:	f383 8811 	msr	BASEPRI, r3
1a001fa4:	f3bf 8f6f 	isb	sy
1a001fa8:	f3bf 8f4f 	dsb	sy
1a001fac:	e7fe      	b.n	1a001fac <xTaskCheckForTimeOut+0x18>
1a001fae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fb2:	f383 8811 	msr	BASEPRI, r3
1a001fb6:	f3bf 8f6f 	isb	sy
1a001fba:	f3bf 8f4f 	dsb	sy
1a001fbe:	e7fe      	b.n	1a001fbe <xTaskCheckForTimeOut+0x2a>
1a001fc0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001fc2:	f000 fc47 	bl	1a002854 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001fc6:	4b11      	ldr	r3, [pc, #68]	; (1a00200c <xTaskCheckForTimeOut+0x78>)
1a001fc8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001fca:	6868      	ldr	r0, [r5, #4]
1a001fcc:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001fce:	6823      	ldr	r3, [r4, #0]
1a001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001fd4:	d016      	beq.n	1a002004 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001fd6:	682f      	ldr	r7, [r5, #0]
1a001fd8:	4e0d      	ldr	r6, [pc, #52]	; (1a002010 <xTaskCheckForTimeOut+0x7c>)
1a001fda:	6836      	ldr	r6, [r6, #0]
1a001fdc:	42b7      	cmp	r7, r6
1a001fde:	d001      	beq.n	1a001fe4 <xTaskCheckForTimeOut+0x50>
1a001fe0:	4288      	cmp	r0, r1
1a001fe2:	d911      	bls.n	1a002008 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001fe4:	4293      	cmp	r3, r2
1a001fe6:	d803      	bhi.n	1a001ff0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001fe8:	2300      	movs	r3, #0
1a001fea:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001fec:	2401      	movs	r4, #1
1a001fee:	e005      	b.n	1a001ffc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001ff0:	1a9b      	subs	r3, r3, r2
1a001ff2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001ff4:	4628      	mov	r0, r5
1a001ff6:	f7ff ffc1 	bl	1a001f7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001ffa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001ffc:	f000 fc4c 	bl	1a002898 <vPortExitCritical>
}
1a002000:	4620      	mov	r0, r4
1a002002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002004:	2400      	movs	r4, #0
1a002006:	e7f9      	b.n	1a001ffc <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002008:	2401      	movs	r4, #1
1a00200a:	e7f7      	b.n	1a001ffc <xTaskCheckForTimeOut+0x68>
1a00200c:	10002e64 	.word	0x10002e64
1a002010:	10002e20 	.word	0x10002e20

1a002014 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002014:	4b01      	ldr	r3, [pc, #4]	; (1a00201c <vTaskMissedYield+0x8>)
1a002016:	2201      	movs	r2, #1
1a002018:	601a      	str	r2, [r3, #0]
}
1a00201a:	4770      	bx	lr
1a00201c:	10002e68 	.word	0x10002e68

1a002020 <uxTaskGetStackHighWaterMark>:
	{
1a002020:	b508      	push	{r3, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
1a002022:	4603      	mov	r3, r0
1a002024:	b118      	cbz	r0, 1a00202e <uxTaskGetStackHighWaterMark+0xe>
		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
1a002026:	6b18      	ldr	r0, [r3, #48]	; 0x30
1a002028:	f7ff fb6a 	bl	1a001700 <prvTaskCheckFreeStackSpace>
	}
1a00202c:	bd08      	pop	{r3, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
1a00202e:	4b01      	ldr	r3, [pc, #4]	; (1a002034 <uxTaskGetStackHighWaterMark+0x14>)
1a002030:	681b      	ldr	r3, [r3, #0]
1a002032:	e7f8      	b.n	1a002026 <uxTaskGetStackHighWaterMark+0x6>
1a002034:	10002d44 	.word	0x10002d44

1a002038 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a002038:	4b05      	ldr	r3, [pc, #20]	; (1a002050 <xTaskGetSchedulerState+0x18>)
1a00203a:	681b      	ldr	r3, [r3, #0]
1a00203c:	b133      	cbz	r3, 1a00204c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00203e:	4b05      	ldr	r3, [pc, #20]	; (1a002054 <xTaskGetSchedulerState+0x1c>)
1a002040:	681b      	ldr	r3, [r3, #0]
1a002042:	b10b      	cbz	r3, 1a002048 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002044:	2000      	movs	r0, #0
	}
1a002046:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a002048:	2002      	movs	r0, #2
1a00204a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a00204c:	2001      	movs	r0, #1
1a00204e:	4770      	bx	lr
1a002050:	10002e38 	.word	0x10002e38
1a002054:	10002de8 	.word	0x10002de8

1a002058 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002058:	2800      	cmp	r0, #0
1a00205a:	d049      	beq.n	1a0020f0 <xTaskPriorityDisinherit+0x98>
	{
1a00205c:	b538      	push	{r3, r4, r5, lr}
1a00205e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002060:	4a26      	ldr	r2, [pc, #152]	; (1a0020fc <xTaskPriorityDisinherit+0xa4>)
1a002062:	6812      	ldr	r2, [r2, #0]
1a002064:	4282      	cmp	r2, r0
1a002066:	d008      	beq.n	1a00207a <xTaskPriorityDisinherit+0x22>
1a002068:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00206c:	f383 8811 	msr	BASEPRI, r3
1a002070:	f3bf 8f6f 	isb	sy
1a002074:	f3bf 8f4f 	dsb	sy
1a002078:	e7fe      	b.n	1a002078 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00207a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a00207c:	b942      	cbnz	r2, 1a002090 <xTaskPriorityDisinherit+0x38>
1a00207e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002082:	f383 8811 	msr	BASEPRI, r3
1a002086:	f3bf 8f6f 	isb	sy
1a00208a:	f3bf 8f4f 	dsb	sy
1a00208e:	e7fe      	b.n	1a00208e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002090:	3a01      	subs	r2, #1
1a002092:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002094:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002096:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002098:	4288      	cmp	r0, r1
1a00209a:	d02b      	beq.n	1a0020f4 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a00209c:	bb62      	cbnz	r2, 1a0020f8 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00209e:	1d25      	adds	r5, r4, #4
1a0020a0:	4628      	mov	r0, r5
1a0020a2:	f7ff fafe 	bl	1a0016a2 <uxListRemove>
1a0020a6:	b970      	cbnz	r0, 1a0020c6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0020a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0020aa:	2314      	movs	r3, #20
1a0020ac:	fb03 f302 	mul.w	r3, r3, r2
1a0020b0:	4913      	ldr	r1, [pc, #76]	; (1a002100 <xTaskPriorityDisinherit+0xa8>)
1a0020b2:	58cb      	ldr	r3, [r1, r3]
1a0020b4:	b93b      	cbnz	r3, 1a0020c6 <xTaskPriorityDisinherit+0x6e>
1a0020b6:	2301      	movs	r3, #1
1a0020b8:	fa03 f202 	lsl.w	r2, r3, r2
1a0020bc:	4911      	ldr	r1, [pc, #68]	; (1a002104 <xTaskPriorityDisinherit+0xac>)
1a0020be:	680b      	ldr	r3, [r1, #0]
1a0020c0:	ea23 0302 	bic.w	r3, r3, r2
1a0020c4:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0020c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0020c8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0020ca:	f1c3 0207 	rsb	r2, r3, #7
1a0020ce:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0020d0:	2401      	movs	r4, #1
1a0020d2:	fa04 f203 	lsl.w	r2, r4, r3
1a0020d6:	490b      	ldr	r1, [pc, #44]	; (1a002104 <xTaskPriorityDisinherit+0xac>)
1a0020d8:	6808      	ldr	r0, [r1, #0]
1a0020da:	4302      	orrs	r2, r0
1a0020dc:	600a      	str	r2, [r1, #0]
1a0020de:	4629      	mov	r1, r5
1a0020e0:	4a07      	ldr	r2, [pc, #28]	; (1a002100 <xTaskPriorityDisinherit+0xa8>)
1a0020e2:	2014      	movs	r0, #20
1a0020e4:	fb00 2003 	mla	r0, r0, r3, r2
1a0020e8:	f7ff fab5 	bl	1a001656 <vListInsertEnd>
					xReturn = pdTRUE;
1a0020ec:	4620      	mov	r0, r4
	}
1a0020ee:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0020f0:	2000      	movs	r0, #0
	}
1a0020f2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0020f4:	2000      	movs	r0, #0
1a0020f6:	e7fa      	b.n	1a0020ee <xTaskPriorityDisinherit+0x96>
1a0020f8:	2000      	movs	r0, #0
		return xReturn;
1a0020fa:	e7f8      	b.n	1a0020ee <xTaskPriorityDisinherit+0x96>
1a0020fc:	10002d44 	.word	0x10002d44
1a002100:	10002d50 	.word	0x10002d50
1a002104:	10002df0 	.word	0x10002df0

1a002108 <xTaskNotifyWait>:
	{
1a002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00210a:	4607      	mov	r7, r0
1a00210c:	460d      	mov	r5, r1
1a00210e:	4614      	mov	r4, r2
1a002110:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
1a002112:	f000 fb9f 	bl	1a002854 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
1a002116:	4b20      	ldr	r3, [pc, #128]	; (1a002198 <xTaskNotifyWait+0x90>)
1a002118:	681b      	ldr	r3, [r3, #0]
1a00211a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a00211e:	b2db      	uxtb	r3, r3
1a002120:	2b02      	cmp	r3, #2
1a002122:	d00a      	beq.n	1a00213a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
1a002124:	4b1c      	ldr	r3, [pc, #112]	; (1a002198 <xTaskNotifyWait+0x90>)
1a002126:	681a      	ldr	r2, [r3, #0]
1a002128:	6d90      	ldr	r0, [r2, #88]	; 0x58
1a00212a:	ea20 0007 	bic.w	r0, r0, r7
1a00212e:	6590      	str	r0, [r2, #88]	; 0x58
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
1a002130:	681b      	ldr	r3, [r3, #0]
1a002132:	2201      	movs	r2, #1
1a002134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				if( xTicksToWait > ( TickType_t ) 0 )
1a002138:	b9ce      	cbnz	r6, 1a00216e <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
1a00213a:	f000 fbad 	bl	1a002898 <vPortExitCritical>
		taskENTER_CRITICAL();
1a00213e:	f000 fb89 	bl	1a002854 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
1a002142:	b11c      	cbz	r4, 1a00214c <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
1a002144:	4b14      	ldr	r3, [pc, #80]	; (1a002198 <xTaskNotifyWait+0x90>)
1a002146:	681b      	ldr	r3, [r3, #0]
1a002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1a00214a:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
1a00214c:	4b12      	ldr	r3, [pc, #72]	; (1a002198 <xTaskNotifyWait+0x90>)
1a00214e:	681b      	ldr	r3, [r3, #0]
1a002150:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
1a002154:	b2db      	uxtb	r3, r3
1a002156:	2b02      	cmp	r3, #2
1a002158:	d016      	beq.n	1a002188 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
1a00215a:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a00215c:	4b0e      	ldr	r3, [pc, #56]	; (1a002198 <xTaskNotifyWait+0x90>)
1a00215e:	681b      	ldr	r3, [r3, #0]
1a002160:	2200      	movs	r2, #0
1a002162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		taskEXIT_CRITICAL();
1a002166:	f000 fb97 	bl	1a002898 <vPortExitCritical>
	}
1a00216a:	4620      	mov	r0, r4
1a00216c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00216e:	4611      	mov	r1, r2
1a002170:	4630      	mov	r0, r6
1a002172:	f7ff fc0f 	bl	1a001994 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
1a002176:	4b09      	ldr	r3, [pc, #36]	; (1a00219c <xTaskNotifyWait+0x94>)
1a002178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00217c:	601a      	str	r2, [r3, #0]
1a00217e:	f3bf 8f4f 	dsb	sy
1a002182:	f3bf 8f6f 	isb	sy
1a002186:	e7d8      	b.n	1a00213a <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
1a002188:	4b03      	ldr	r3, [pc, #12]	; (1a002198 <xTaskNotifyWait+0x90>)
1a00218a:	681a      	ldr	r2, [r3, #0]
1a00218c:	6d93      	ldr	r3, [r2, #88]	; 0x58
1a00218e:	ea23 0505 	bic.w	r5, r3, r5
1a002192:	6595      	str	r5, [r2, #88]	; 0x58
				xReturn = pdTRUE;
1a002194:	2401      	movs	r4, #1
1a002196:	e7e1      	b.n	1a00215c <xTaskNotifyWait+0x54>
1a002198:	10002d44 	.word	0x10002d44
1a00219c:	e000ed04 	.word	0xe000ed04

1a0021a0 <xTaskGenericNotifyFromISR>:
	{
1a0021a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0021a4:	9e08      	ldr	r6, [sp, #32]
		configASSERT( xTaskToNotify );
1a0021a6:	b940      	cbnz	r0, 1a0021ba <xTaskGenericNotifyFromISR+0x1a>
1a0021a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ac:	f383 8811 	msr	BASEPRI, r3
1a0021b0:	f3bf 8f6f 	isb	sy
1a0021b4:	f3bf 8f4f 	dsb	sy
1a0021b8:	e7fe      	b.n	1a0021b8 <xTaskGenericNotifyFromISR+0x18>
1a0021ba:	4604      	mov	r4, r0
1a0021bc:	4699      	mov	r9, r3
1a0021be:	4615      	mov	r5, r2
1a0021c0:	4688      	mov	r8, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0021c2:	f000 fc71 	bl	1a002aa8 <vPortValidateInterruptPriority>
	__asm volatile
1a0021c6:	f3ef 8711 	mrs	r7, BASEPRI
1a0021ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ce:	f383 8811 	msr	BASEPRI, r3
1a0021d2:	f3bf 8f6f 	isb	sy
1a0021d6:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
1a0021da:	f1b9 0f00 	cmp.w	r9, #0
1a0021de:	d002      	beq.n	1a0021e6 <xTaskGenericNotifyFromISR+0x46>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
1a0021e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
1a0021e2:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
1a0021e6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
1a0021ea:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
1a0021ec:	2202      	movs	r2, #2
1a0021ee:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
			switch( eAction )
1a0021f2:	1e6a      	subs	r2, r5, #1
1a0021f4:	2a03      	cmp	r2, #3
1a0021f6:	d81e      	bhi.n	1a002236 <xTaskGenericNotifyFromISR+0x96>
1a0021f8:	e8df f002 	tbb	[pc, r2]
1a0021fc:	17130e02 	.word	0x17130e02
					pxTCB->ulNotifiedValue |= ulValue;
1a002200:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a002202:	ea42 0208 	orr.w	r2, r2, r8
1a002206:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
1a002208:	2501      	movs	r5, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
1a00220a:	2b01      	cmp	r3, #1
1a00220c:	d017      	beq.n	1a00223e <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
1a00220e:	f387 8811 	msr	BASEPRI, r7
	}
1a002212:	4628      	mov	r0, r5
1a002214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
1a002218:	6da2      	ldr	r2, [r4, #88]	; 0x58
1a00221a:	3201      	adds	r2, #1
1a00221c:	65a2      	str	r2, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
1a00221e:	2501      	movs	r5, #1
					break;
1a002220:	e7f3      	b.n	1a00220a <xTaskGenericNotifyFromISR+0x6a>
					pxTCB->ulNotifiedValue = ulValue;
1a002222:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
1a002226:	2501      	movs	r5, #1
					break;
1a002228:	e7ef      	b.n	1a00220a <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
1a00222a:	2b02      	cmp	r3, #2
1a00222c:	d005      	beq.n	1a00223a <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
1a00222e:	f8c4 8058 	str.w	r8, [r4, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
1a002232:	2501      	movs	r5, #1
1a002234:	e7e9      	b.n	1a00220a <xTaskGenericNotifyFromISR+0x6a>
1a002236:	2501      	movs	r5, #1
1a002238:	e7e7      	b.n	1a00220a <xTaskGenericNotifyFromISR+0x6a>
						xReturn = pdFAIL;
1a00223a:	2500      	movs	r5, #0
1a00223c:	e7e5      	b.n	1a00220a <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
1a00223e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a002240:	b143      	cbz	r3, 1a002254 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
1a002242:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002246:	f383 8811 	msr	BASEPRI, r3
1a00224a:	f3bf 8f6f 	isb	sy
1a00224e:	f3bf 8f4f 	dsb	sy
1a002252:	e7fe      	b.n	1a002252 <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002254:	4b14      	ldr	r3, [pc, #80]	; (1a0022a8 <xTaskGenericNotifyFromISR+0x108>)
1a002256:	681b      	ldr	r3, [r3, #0]
1a002258:	b9e3      	cbnz	r3, 1a002294 <xTaskGenericNotifyFromISR+0xf4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00225a:	f104 0804 	add.w	r8, r4, #4
1a00225e:	4640      	mov	r0, r8
1a002260:	f7ff fa1f 	bl	1a0016a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002264:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002266:	2301      	movs	r3, #1
1a002268:	4093      	lsls	r3, r2
1a00226a:	4910      	ldr	r1, [pc, #64]	; (1a0022ac <xTaskGenericNotifyFromISR+0x10c>)
1a00226c:	6808      	ldr	r0, [r1, #0]
1a00226e:	4303      	orrs	r3, r0
1a002270:	600b      	str	r3, [r1, #0]
1a002272:	4641      	mov	r1, r8
1a002274:	4b0e      	ldr	r3, [pc, #56]	; (1a0022b0 <xTaskGenericNotifyFromISR+0x110>)
1a002276:	2014      	movs	r0, #20
1a002278:	fb00 3002 	mla	r0, r0, r2, r3
1a00227c:	f7ff f9eb 	bl	1a001656 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002282:	4b0c      	ldr	r3, [pc, #48]	; (1a0022b4 <xTaskGenericNotifyFromISR+0x114>)
1a002284:	681b      	ldr	r3, [r3, #0]
1a002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002288:	429a      	cmp	r2, r3
1a00228a:	d9c0      	bls.n	1a00220e <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
1a00228c:	b146      	cbz	r6, 1a0022a0 <xTaskGenericNotifyFromISR+0x100>
						*pxHigherPriorityTaskWoken = pdTRUE;
1a00228e:	2301      	movs	r3, #1
1a002290:	6033      	str	r3, [r6, #0]
1a002292:	e7bc      	b.n	1a00220e <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1a002294:	f104 0118 	add.w	r1, r4, #24
1a002298:	4807      	ldr	r0, [pc, #28]	; (1a0022b8 <xTaskGenericNotifyFromISR+0x118>)
1a00229a:	f7ff f9dc 	bl	1a001656 <vListInsertEnd>
1a00229e:	e7ef      	b.n	1a002280 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
1a0022a0:	4b06      	ldr	r3, [pc, #24]	; (1a0022bc <xTaskGenericNotifyFromISR+0x11c>)
1a0022a2:	2201      	movs	r2, #1
1a0022a4:	601a      	str	r2, [r3, #0]
1a0022a6:	e7b2      	b.n	1a00220e <xTaskGenericNotifyFromISR+0x6e>
1a0022a8:	10002de8 	.word	0x10002de8
1a0022ac:	10002df0 	.word	0x10002df0
1a0022b0:	10002d50 	.word	0x10002d50
1a0022b4:	10002d44 	.word	0x10002d44
1a0022b8:	10002e24 	.word	0x10002e24
1a0022bc:	10002e68 	.word	0x10002e68

1a0022c0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0022c0:	4b06      	ldr	r3, [pc, #24]	; (1a0022dc <prvGetNextExpireTime+0x1c>)
1a0022c2:	681a      	ldr	r2, [r3, #0]
1a0022c4:	6813      	ldr	r3, [r2, #0]
1a0022c6:	fab3 f383 	clz	r3, r3
1a0022ca:	095b      	lsrs	r3, r3, #5
1a0022cc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0022ce:	b913      	cbnz	r3, 1a0022d6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0022d0:	68d3      	ldr	r3, [r2, #12]
1a0022d2:	6818      	ldr	r0, [r3, #0]
1a0022d4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0022d6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0022d8:	4770      	bx	lr
1a0022da:	bf00      	nop
1a0022dc:	10002e6c 	.word	0x10002e6c

1a0022e0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0022e0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0022e2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0022e4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0022e6:	4291      	cmp	r1, r2
1a0022e8:	d80c      	bhi.n	1a002304 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022ea:	1ad2      	subs	r2, r2, r3
1a0022ec:	6983      	ldr	r3, [r0, #24]
1a0022ee:	429a      	cmp	r2, r3
1a0022f0:	d301      	bcc.n	1a0022f6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0022f2:	2001      	movs	r0, #1
1a0022f4:	e010      	b.n	1a002318 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0022f6:	1d01      	adds	r1, r0, #4
1a0022f8:	4b09      	ldr	r3, [pc, #36]	; (1a002320 <prvInsertTimerInActiveList+0x40>)
1a0022fa:	6818      	ldr	r0, [r3, #0]
1a0022fc:	f7ff f9b7 	bl	1a00166e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002300:	2000      	movs	r0, #0
1a002302:	e009      	b.n	1a002318 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002304:	429a      	cmp	r2, r3
1a002306:	d201      	bcs.n	1a00230c <prvInsertTimerInActiveList+0x2c>
1a002308:	4299      	cmp	r1, r3
1a00230a:	d206      	bcs.n	1a00231a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00230c:	1d01      	adds	r1, r0, #4
1a00230e:	4b05      	ldr	r3, [pc, #20]	; (1a002324 <prvInsertTimerInActiveList+0x44>)
1a002310:	6818      	ldr	r0, [r3, #0]
1a002312:	f7ff f9ac 	bl	1a00166e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002316:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002318:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00231a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a00231c:	e7fc      	b.n	1a002318 <prvInsertTimerInActiveList+0x38>
1a00231e:	bf00      	nop
1a002320:	10002e70 	.word	0x10002e70
1a002324:	10002e6c 	.word	0x10002e6c

1a002328 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002328:	b530      	push	{r4, r5, lr}
1a00232a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a00232c:	f000 fa92 	bl	1a002854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002330:	4b11      	ldr	r3, [pc, #68]	; (1a002378 <prvCheckForValidListAndQueue+0x50>)
1a002332:	681b      	ldr	r3, [r3, #0]
1a002334:	b11b      	cbz	r3, 1a00233e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002336:	f000 faaf 	bl	1a002898 <vPortExitCritical>
}
1a00233a:	b003      	add	sp, #12
1a00233c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00233e:	4d0f      	ldr	r5, [pc, #60]	; (1a00237c <prvCheckForValidListAndQueue+0x54>)
1a002340:	4628      	mov	r0, r5
1a002342:	f7ff f97a 	bl	1a00163a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002346:	4c0e      	ldr	r4, [pc, #56]	; (1a002380 <prvCheckForValidListAndQueue+0x58>)
1a002348:	4620      	mov	r0, r4
1a00234a:	f7ff f976 	bl	1a00163a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00234e:	4b0d      	ldr	r3, [pc, #52]	; (1a002384 <prvCheckForValidListAndQueue+0x5c>)
1a002350:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002352:	4b0d      	ldr	r3, [pc, #52]	; (1a002388 <prvCheckForValidListAndQueue+0x60>)
1a002354:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002356:	2300      	movs	r3, #0
1a002358:	9300      	str	r3, [sp, #0]
1a00235a:	4b0c      	ldr	r3, [pc, #48]	; (1a00238c <prvCheckForValidListAndQueue+0x64>)
1a00235c:	4a0c      	ldr	r2, [pc, #48]	; (1a002390 <prvCheckForValidListAndQueue+0x68>)
1a00235e:	2110      	movs	r1, #16
1a002360:	200a      	movs	r0, #10
1a002362:	f7fe fed6 	bl	1a001112 <xQueueGenericCreateStatic>
1a002366:	4b04      	ldr	r3, [pc, #16]	; (1a002378 <prvCheckForValidListAndQueue+0x50>)
1a002368:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00236a:	2800      	cmp	r0, #0
1a00236c:	d0e3      	beq.n	1a002336 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00236e:	4909      	ldr	r1, [pc, #36]	; (1a002394 <prvCheckForValidListAndQueue+0x6c>)
1a002370:	f7ff f926 	bl	1a0015c0 <vQueueAddToRegistry>
1a002374:	e7df      	b.n	1a002336 <prvCheckForValidListAndQueue+0xe>
1a002376:	bf00      	nop
1a002378:	10002f90 	.word	0x10002f90
1a00237c:	10002f14 	.word	0x10002f14
1a002380:	10002f28 	.word	0x10002f28
1a002384:	10002e6c 	.word	0x10002e6c
1a002388:	10002e70 	.word	0x10002e70
1a00238c:	10002f40 	.word	0x10002f40
1a002390:	10002e74 	.word	0x10002e74
1a002394:	1a005714 	.word	0x1a005714

1a002398 <prvInitialiseNewTimer>:
{
1a002398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00239c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00239e:	b941      	cbnz	r1, 1a0023b2 <prvInitialiseNewTimer+0x1a>
1a0023a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023a4:	f383 8811 	msr	BASEPRI, r3
1a0023a8:	f3bf 8f6f 	isb	sy
1a0023ac:	f3bf 8f4f 	dsb	sy
1a0023b0:	e7fe      	b.n	1a0023b0 <prvInitialiseNewTimer+0x18>
1a0023b2:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0023b4:	b174      	cbz	r4, 1a0023d4 <prvInitialiseNewTimer+0x3c>
1a0023b6:	461d      	mov	r5, r3
1a0023b8:	4616      	mov	r6, r2
1a0023ba:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0023bc:	f7ff ffb4 	bl	1a002328 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0023c0:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0023c4:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0023c6:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0023c8:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0023ca:	9b06      	ldr	r3, [sp, #24]
1a0023cc:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0023ce:	1d20      	adds	r0, r4, #4
1a0023d0:	f7ff f93e 	bl	1a001650 <vListInitialiseItem>
}
1a0023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0023d8 <xTimerCreateTimerTask>:
{
1a0023d8:	b510      	push	{r4, lr}
1a0023da:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0023dc:	f7ff ffa4 	bl	1a002328 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0023e0:	4b12      	ldr	r3, [pc, #72]	; (1a00242c <xTimerCreateTimerTask+0x54>)
1a0023e2:	681b      	ldr	r3, [r3, #0]
1a0023e4:	b1cb      	cbz	r3, 1a00241a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0023e6:	2400      	movs	r4, #0
1a0023e8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0023ea:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0023ec:	aa07      	add	r2, sp, #28
1a0023ee:	a906      	add	r1, sp, #24
1a0023f0:	a805      	add	r0, sp, #20
1a0023f2:	f7ff f977 	bl	1a0016e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0023f6:	9b05      	ldr	r3, [sp, #20]
1a0023f8:	9302      	str	r3, [sp, #8]
1a0023fa:	9b06      	ldr	r3, [sp, #24]
1a0023fc:	9301      	str	r3, [sp, #4]
1a0023fe:	2304      	movs	r3, #4
1a002400:	9300      	str	r3, [sp, #0]
1a002402:	4623      	mov	r3, r4
1a002404:	9a07      	ldr	r2, [sp, #28]
1a002406:	490a      	ldr	r1, [pc, #40]	; (1a002430 <xTimerCreateTimerTask+0x58>)
1a002408:	480a      	ldr	r0, [pc, #40]	; (1a002434 <xTimerCreateTimerTask+0x5c>)
1a00240a:	f7ff fb0f 	bl	1a001a2c <xTaskCreateStatic>
1a00240e:	4b0a      	ldr	r3, [pc, #40]	; (1a002438 <xTimerCreateTimerTask+0x60>)
1a002410:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002412:	b110      	cbz	r0, 1a00241a <xTimerCreateTimerTask+0x42>
}
1a002414:	2001      	movs	r0, #1
1a002416:	b008      	add	sp, #32
1a002418:	bd10      	pop	{r4, pc}
1a00241a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00241e:	f383 8811 	msr	BASEPRI, r3
1a002422:	f3bf 8f6f 	isb	sy
1a002426:	f3bf 8f4f 	dsb	sy
1a00242a:	e7fe      	b.n	1a00242a <xTimerCreateTimerTask+0x52>
1a00242c:	10002f90 	.word	0x10002f90
1a002430:	1a00571c 	.word	0x1a00571c
1a002434:	1a002769 	.word	0x1a002769
1a002438:	10002f94 	.word	0x10002f94

1a00243c <xTimerCreateStatic>:
	{
1a00243c:	b530      	push	{r4, r5, lr}
1a00243e:	b085      	sub	sp, #20
1a002440:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002442:	2530      	movs	r5, #48	; 0x30
1a002444:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002446:	9d03      	ldr	r5, [sp, #12]
1a002448:	2d30      	cmp	r5, #48	; 0x30
1a00244a:	d008      	beq.n	1a00245e <xTimerCreateStatic+0x22>
1a00244c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002450:	f383 8811 	msr	BASEPRI, r3
1a002454:	f3bf 8f6f 	isb	sy
1a002458:	f3bf 8f4f 	dsb	sy
1a00245c:	e7fe      	b.n	1a00245c <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a00245e:	b944      	cbnz	r4, 1a002472 <xTimerCreateStatic+0x36>
1a002460:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002464:	f383 8811 	msr	BASEPRI, r3
1a002468:	f3bf 8f6f 	isb	sy
1a00246c:	f3bf 8f4f 	dsb	sy
1a002470:	e7fe      	b.n	1a002470 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002472:	9401      	str	r4, [sp, #4]
1a002474:	9d08      	ldr	r5, [sp, #32]
1a002476:	9500      	str	r5, [sp, #0]
1a002478:	f7ff ff8e 	bl	1a002398 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00247c:	2301      	movs	r3, #1
1a00247e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002482:	4620      	mov	r0, r4
1a002484:	b005      	add	sp, #20
1a002486:	bd30      	pop	{r4, r5, pc}

1a002488 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002488:	b1c8      	cbz	r0, 1a0024be <xTimerGenericCommand+0x36>
{
1a00248a:	b530      	push	{r4, r5, lr}
1a00248c:	b085      	sub	sp, #20
1a00248e:	4615      	mov	r5, r2
1a002490:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002492:	4a17      	ldr	r2, [pc, #92]	; (1a0024f0 <xTimerGenericCommand+0x68>)
1a002494:	6810      	ldr	r0, [r2, #0]
1a002496:	b340      	cbz	r0, 1a0024ea <xTimerGenericCommand+0x62>
1a002498:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00249a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a00249c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00249e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0024a0:	2905      	cmp	r1, #5
1a0024a2:	dc1d      	bgt.n	1a0024e0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0024a4:	f7ff fdc8 	bl	1a002038 <xTaskGetSchedulerState>
1a0024a8:	2802      	cmp	r0, #2
1a0024aa:	d011      	beq.n	1a0024d0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0024ac:	2300      	movs	r3, #0
1a0024ae:	461a      	mov	r2, r3
1a0024b0:	4669      	mov	r1, sp
1a0024b2:	480f      	ldr	r0, [pc, #60]	; (1a0024f0 <xTimerGenericCommand+0x68>)
1a0024b4:	6800      	ldr	r0, [r0, #0]
1a0024b6:	f7fe fe9b 	bl	1a0011f0 <xQueueGenericSend>
}
1a0024ba:	b005      	add	sp, #20
1a0024bc:	bd30      	pop	{r4, r5, pc}
1a0024be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c2:	f383 8811 	msr	BASEPRI, r3
1a0024c6:	f3bf 8f6f 	isb	sy
1a0024ca:	f3bf 8f4f 	dsb	sy
1a0024ce:	e7fe      	b.n	1a0024ce <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0024d0:	2300      	movs	r3, #0
1a0024d2:	9a08      	ldr	r2, [sp, #32]
1a0024d4:	4669      	mov	r1, sp
1a0024d6:	4806      	ldr	r0, [pc, #24]	; (1a0024f0 <xTimerGenericCommand+0x68>)
1a0024d8:	6800      	ldr	r0, [r0, #0]
1a0024da:	f7fe fe89 	bl	1a0011f0 <xQueueGenericSend>
1a0024de:	e7ec      	b.n	1a0024ba <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0024e0:	2300      	movs	r3, #0
1a0024e2:	4669      	mov	r1, sp
1a0024e4:	f7fe ff59 	bl	1a00139a <xQueueGenericSendFromISR>
1a0024e8:	e7e7      	b.n	1a0024ba <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0024ea:	2000      	movs	r0, #0
	return xReturn;
1a0024ec:	e7e5      	b.n	1a0024ba <xTimerGenericCommand+0x32>
1a0024ee:	bf00      	nop
1a0024f0:	10002f90 	.word	0x10002f90

1a0024f4 <prvSwitchTimerLists>:
{
1a0024f4:	b570      	push	{r4, r5, r6, lr}
1a0024f6:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0024f8:	4b1a      	ldr	r3, [pc, #104]	; (1a002564 <prvSwitchTimerLists+0x70>)
1a0024fa:	681b      	ldr	r3, [r3, #0]
1a0024fc:	681a      	ldr	r2, [r3, #0]
1a0024fe:	b352      	cbz	r2, 1a002556 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002500:	68db      	ldr	r3, [r3, #12]
1a002502:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002504:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002506:	1d25      	adds	r5, r4, #4
1a002508:	4628      	mov	r0, r5
1a00250a:	f7ff f8ca 	bl	1a0016a2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00250e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002510:	4620      	mov	r0, r4
1a002512:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002514:	69e3      	ldr	r3, [r4, #28]
1a002516:	2b01      	cmp	r3, #1
1a002518:	d1ee      	bne.n	1a0024f8 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00251a:	69a3      	ldr	r3, [r4, #24]
1a00251c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00251e:	429e      	cmp	r6, r3
1a002520:	d207      	bcs.n	1a002532 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002522:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002524:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002526:	4629      	mov	r1, r5
1a002528:	4b0e      	ldr	r3, [pc, #56]	; (1a002564 <prvSwitchTimerLists+0x70>)
1a00252a:	6818      	ldr	r0, [r3, #0]
1a00252c:	f7ff f89f 	bl	1a00166e <vListInsert>
1a002530:	e7e2      	b.n	1a0024f8 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002532:	2100      	movs	r1, #0
1a002534:	9100      	str	r1, [sp, #0]
1a002536:	460b      	mov	r3, r1
1a002538:	4632      	mov	r2, r6
1a00253a:	4620      	mov	r0, r4
1a00253c:	f7ff ffa4 	bl	1a002488 <xTimerGenericCommand>
				configASSERT( xResult );
1a002540:	2800      	cmp	r0, #0
1a002542:	d1d9      	bne.n	1a0024f8 <prvSwitchTimerLists+0x4>
1a002544:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002548:	f383 8811 	msr	BASEPRI, r3
1a00254c:	f3bf 8f6f 	isb	sy
1a002550:	f3bf 8f4f 	dsb	sy
1a002554:	e7fe      	b.n	1a002554 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002556:	4a04      	ldr	r2, [pc, #16]	; (1a002568 <prvSwitchTimerLists+0x74>)
1a002558:	6810      	ldr	r0, [r2, #0]
1a00255a:	4902      	ldr	r1, [pc, #8]	; (1a002564 <prvSwitchTimerLists+0x70>)
1a00255c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00255e:	6013      	str	r3, [r2, #0]
}
1a002560:	b002      	add	sp, #8
1a002562:	bd70      	pop	{r4, r5, r6, pc}
1a002564:	10002e6c 	.word	0x10002e6c
1a002568:	10002e70 	.word	0x10002e70

1a00256c <prvSampleTimeNow>:
{
1a00256c:	b538      	push	{r3, r4, r5, lr}
1a00256e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002570:	f7ff fb1a 	bl	1a001ba8 <xTaskGetTickCount>
1a002574:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002576:	4b07      	ldr	r3, [pc, #28]	; (1a002594 <prvSampleTimeNow+0x28>)
1a002578:	681b      	ldr	r3, [r3, #0]
1a00257a:	4283      	cmp	r3, r0
1a00257c:	d805      	bhi.n	1a00258a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00257e:	2300      	movs	r3, #0
1a002580:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002582:	4b04      	ldr	r3, [pc, #16]	; (1a002594 <prvSampleTimeNow+0x28>)
1a002584:	601c      	str	r4, [r3, #0]
}
1a002586:	4620      	mov	r0, r4
1a002588:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00258a:	f7ff ffb3 	bl	1a0024f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00258e:	2301      	movs	r3, #1
1a002590:	602b      	str	r3, [r5, #0]
1a002592:	e7f6      	b.n	1a002582 <prvSampleTimeNow+0x16>
1a002594:	10002f3c 	.word	0x10002f3c

1a002598 <prvProcessExpiredTimer>:
{
1a002598:	b570      	push	{r4, r5, r6, lr}
1a00259a:	b082      	sub	sp, #8
1a00259c:	4605      	mov	r5, r0
1a00259e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0025a0:	4b14      	ldr	r3, [pc, #80]	; (1a0025f4 <prvProcessExpiredTimer+0x5c>)
1a0025a2:	681b      	ldr	r3, [r3, #0]
1a0025a4:	68db      	ldr	r3, [r3, #12]
1a0025a6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0025a8:	1d20      	adds	r0, r4, #4
1a0025aa:	f7ff f87a 	bl	1a0016a2 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0025ae:	69e3      	ldr	r3, [r4, #28]
1a0025b0:	2b01      	cmp	r3, #1
1a0025b2:	d004      	beq.n	1a0025be <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0025b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0025b6:	4620      	mov	r0, r4
1a0025b8:	4798      	blx	r3
}
1a0025ba:	b002      	add	sp, #8
1a0025bc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0025be:	69a1      	ldr	r1, [r4, #24]
1a0025c0:	462b      	mov	r3, r5
1a0025c2:	4632      	mov	r2, r6
1a0025c4:	4429      	add	r1, r5
1a0025c6:	4620      	mov	r0, r4
1a0025c8:	f7ff fe8a 	bl	1a0022e0 <prvInsertTimerInActiveList>
1a0025cc:	2800      	cmp	r0, #0
1a0025ce:	d0f1      	beq.n	1a0025b4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0025d0:	2100      	movs	r1, #0
1a0025d2:	9100      	str	r1, [sp, #0]
1a0025d4:	460b      	mov	r3, r1
1a0025d6:	462a      	mov	r2, r5
1a0025d8:	4620      	mov	r0, r4
1a0025da:	f7ff ff55 	bl	1a002488 <xTimerGenericCommand>
			configASSERT( xResult );
1a0025de:	2800      	cmp	r0, #0
1a0025e0:	d1e8      	bne.n	1a0025b4 <prvProcessExpiredTimer+0x1c>
1a0025e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025e6:	f383 8811 	msr	BASEPRI, r3
1a0025ea:	f3bf 8f6f 	isb	sy
1a0025ee:	f3bf 8f4f 	dsb	sy
1a0025f2:	e7fe      	b.n	1a0025f2 <prvProcessExpiredTimer+0x5a>
1a0025f4:	10002e6c 	.word	0x10002e6c

1a0025f8 <prvProcessTimerOrBlockTask>:
{
1a0025f8:	b570      	push	{r4, r5, r6, lr}
1a0025fa:	b082      	sub	sp, #8
1a0025fc:	4606      	mov	r6, r0
1a0025fe:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002600:	f7ff faca 	bl	1a001b98 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002604:	a801      	add	r0, sp, #4
1a002606:	f7ff ffb1 	bl	1a00256c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00260a:	9b01      	ldr	r3, [sp, #4]
1a00260c:	bb1b      	cbnz	r3, 1a002656 <prvProcessTimerOrBlockTask+0x5e>
1a00260e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002610:	b90c      	cbnz	r4, 1a002616 <prvProcessTimerOrBlockTask+0x1e>
1a002612:	42b0      	cmp	r0, r6
1a002614:	d218      	bcs.n	1a002648 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002616:	b12c      	cbz	r4, 1a002624 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002618:	4b11      	ldr	r3, [pc, #68]	; (1a002660 <prvProcessTimerOrBlockTask+0x68>)
1a00261a:	681b      	ldr	r3, [r3, #0]
1a00261c:	681c      	ldr	r4, [r3, #0]
1a00261e:	fab4 f484 	clz	r4, r4
1a002622:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002624:	4622      	mov	r2, r4
1a002626:	1b71      	subs	r1, r6, r5
1a002628:	4b0e      	ldr	r3, [pc, #56]	; (1a002664 <prvProcessTimerOrBlockTask+0x6c>)
1a00262a:	6818      	ldr	r0, [r3, #0]
1a00262c:	f7fe ffdc 	bl	1a0015e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002630:	f7ff fb4c 	bl	1a001ccc <xTaskResumeAll>
1a002634:	b988      	cbnz	r0, 1a00265a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002636:	4b0c      	ldr	r3, [pc, #48]	; (1a002668 <prvProcessTimerOrBlockTask+0x70>)
1a002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00263c:	601a      	str	r2, [r3, #0]
1a00263e:	f3bf 8f4f 	dsb	sy
1a002642:	f3bf 8f6f 	isb	sy
1a002646:	e008      	b.n	1a00265a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002648:	f7ff fb40 	bl	1a001ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00264c:	4629      	mov	r1, r5
1a00264e:	4630      	mov	r0, r6
1a002650:	f7ff ffa2 	bl	1a002598 <prvProcessExpiredTimer>
1a002654:	e001      	b.n	1a00265a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002656:	f7ff fb39 	bl	1a001ccc <xTaskResumeAll>
}
1a00265a:	b002      	add	sp, #8
1a00265c:	bd70      	pop	{r4, r5, r6, pc}
1a00265e:	bf00      	nop
1a002660:	10002e70 	.word	0x10002e70
1a002664:	10002f90 	.word	0x10002f90
1a002668:	e000ed04 	.word	0xe000ed04

1a00266c <prvProcessReceivedCommands>:
{
1a00266c:	b530      	push	{r4, r5, lr}
1a00266e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002670:	e002      	b.n	1a002678 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002672:	9b04      	ldr	r3, [sp, #16]
1a002674:	2b00      	cmp	r3, #0
1a002676:	da0f      	bge.n	1a002698 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002678:	2200      	movs	r2, #0
1a00267a:	a904      	add	r1, sp, #16
1a00267c:	4b39      	ldr	r3, [pc, #228]	; (1a002764 <prvProcessReceivedCommands+0xf8>)
1a00267e:	6818      	ldr	r0, [r3, #0]
1a002680:	f7fe fef2 	bl	1a001468 <xQueueReceive>
1a002684:	2800      	cmp	r0, #0
1a002686:	d06a      	beq.n	1a00275e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002688:	9b04      	ldr	r3, [sp, #16]
1a00268a:	2b00      	cmp	r3, #0
1a00268c:	daf1      	bge.n	1a002672 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00268e:	9907      	ldr	r1, [sp, #28]
1a002690:	9806      	ldr	r0, [sp, #24]
1a002692:	9b05      	ldr	r3, [sp, #20]
1a002694:	4798      	blx	r3
1a002696:	e7ec      	b.n	1a002672 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002698:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00269a:	6963      	ldr	r3, [r4, #20]
1a00269c:	b113      	cbz	r3, 1a0026a4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00269e:	1d20      	adds	r0, r4, #4
1a0026a0:	f7fe ffff 	bl	1a0016a2 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0026a4:	a803      	add	r0, sp, #12
1a0026a6:	f7ff ff61 	bl	1a00256c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0026aa:	9b04      	ldr	r3, [sp, #16]
1a0026ac:	2b09      	cmp	r3, #9
1a0026ae:	d8e3      	bhi.n	1a002678 <prvProcessReceivedCommands+0xc>
1a0026b0:	a201      	add	r2, pc, #4	; (adr r2, 1a0026b8 <prvProcessReceivedCommands+0x4c>)
1a0026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0026b6:	bf00      	nop
1a0026b8:	1a0026e1 	.word	0x1a0026e1
1a0026bc:	1a0026e1 	.word	0x1a0026e1
1a0026c0:	1a0026e1 	.word	0x1a0026e1
1a0026c4:	1a002679 	.word	0x1a002679
1a0026c8:	1a002729 	.word	0x1a002729
1a0026cc:	1a00274f 	.word	0x1a00274f
1a0026d0:	1a0026e1 	.word	0x1a0026e1
1a0026d4:	1a0026e1 	.word	0x1a0026e1
1a0026d8:	1a002679 	.word	0x1a002679
1a0026dc:	1a002729 	.word	0x1a002729
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0026e0:	9905      	ldr	r1, [sp, #20]
1a0026e2:	69a5      	ldr	r5, [r4, #24]
1a0026e4:	460b      	mov	r3, r1
1a0026e6:	4602      	mov	r2, r0
1a0026e8:	4429      	add	r1, r5
1a0026ea:	4620      	mov	r0, r4
1a0026ec:	f7ff fdf8 	bl	1a0022e0 <prvInsertTimerInActiveList>
1a0026f0:	2800      	cmp	r0, #0
1a0026f2:	d0c1      	beq.n	1a002678 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026f6:	4620      	mov	r0, r4
1a0026f8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0026fa:	69e3      	ldr	r3, [r4, #28]
1a0026fc:	2b01      	cmp	r3, #1
1a0026fe:	d1bb      	bne.n	1a002678 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002700:	69a2      	ldr	r2, [r4, #24]
1a002702:	2100      	movs	r1, #0
1a002704:	9100      	str	r1, [sp, #0]
1a002706:	460b      	mov	r3, r1
1a002708:	9805      	ldr	r0, [sp, #20]
1a00270a:	4402      	add	r2, r0
1a00270c:	4620      	mov	r0, r4
1a00270e:	f7ff febb 	bl	1a002488 <xTimerGenericCommand>
							configASSERT( xResult );
1a002712:	2800      	cmp	r0, #0
1a002714:	d1b0      	bne.n	1a002678 <prvProcessReceivedCommands+0xc>
1a002716:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00271a:	f383 8811 	msr	BASEPRI, r3
1a00271e:	f3bf 8f6f 	isb	sy
1a002722:	f3bf 8f4f 	dsb	sy
1a002726:	e7fe      	b.n	1a002726 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002728:	9905      	ldr	r1, [sp, #20]
1a00272a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00272c:	b131      	cbz	r1, 1a00273c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00272e:	4603      	mov	r3, r0
1a002730:	4602      	mov	r2, r0
1a002732:	4401      	add	r1, r0
1a002734:	4620      	mov	r0, r4
1a002736:	f7ff fdd3 	bl	1a0022e0 <prvInsertTimerInActiveList>
					break;
1a00273a:	e79d      	b.n	1a002678 <prvProcessReceivedCommands+0xc>
1a00273c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002740:	f383 8811 	msr	BASEPRI, r3
1a002744:	f3bf 8f6f 	isb	sy
1a002748:	f3bf 8f4f 	dsb	sy
1a00274c:	e7fe      	b.n	1a00274c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00274e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002752:	2b00      	cmp	r3, #0
1a002754:	d190      	bne.n	1a002678 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002756:	4620      	mov	r0, r4
1a002758:	f7fe fbaa 	bl	1a000eb0 <vPortFree>
1a00275c:	e78c      	b.n	1a002678 <prvProcessReceivedCommands+0xc>
}
1a00275e:	b009      	add	sp, #36	; 0x24
1a002760:	bd30      	pop	{r4, r5, pc}
1a002762:	bf00      	nop
1a002764:	10002f90 	.word	0x10002f90

1a002768 <prvTimerTask>:
{
1a002768:	b500      	push	{lr}
1a00276a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a00276c:	a801      	add	r0, sp, #4
1a00276e:	f7ff fda7 	bl	1a0022c0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002772:	9901      	ldr	r1, [sp, #4]
1a002774:	f7ff ff40 	bl	1a0025f8 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002778:	f7ff ff78 	bl	1a00266c <prvProcessReceivedCommands>
1a00277c:	e7f6      	b.n	1a00276c <prvTimerTask+0x4>
1a00277e:	Address 0x000000001a00277e is out of bounds.


1a002780 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002780:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002782:	2300      	movs	r3, #0
1a002784:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002786:	4b0d      	ldr	r3, [pc, #52]	; (1a0027bc <prvTaskExitError+0x3c>)
1a002788:	681b      	ldr	r3, [r3, #0]
1a00278a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00278e:	d008      	beq.n	1a0027a2 <prvTaskExitError+0x22>
1a002790:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002794:	f383 8811 	msr	BASEPRI, r3
1a002798:	f3bf 8f6f 	isb	sy
1a00279c:	f3bf 8f4f 	dsb	sy
1a0027a0:	e7fe      	b.n	1a0027a0 <prvTaskExitError+0x20>
1a0027a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027a6:	f383 8811 	msr	BASEPRI, r3
1a0027aa:	f3bf 8f6f 	isb	sy
1a0027ae:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0027b2:	9b01      	ldr	r3, [sp, #4]
1a0027b4:	2b00      	cmp	r3, #0
1a0027b6:	d0fc      	beq.n	1a0027b2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0027b8:	b002      	add	sp, #8
1a0027ba:	4770      	bx	lr
1a0027bc:	10000014 	.word	0x10000014

1a0027c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0027c0:	4808      	ldr	r0, [pc, #32]	; (1a0027e4 <prvPortStartFirstTask+0x24>)
1a0027c2:	6800      	ldr	r0, [r0, #0]
1a0027c4:	6800      	ldr	r0, [r0, #0]
1a0027c6:	f380 8808 	msr	MSP, r0
1a0027ca:	f04f 0000 	mov.w	r0, #0
1a0027ce:	f380 8814 	msr	CONTROL, r0
1a0027d2:	b662      	cpsie	i
1a0027d4:	b661      	cpsie	f
1a0027d6:	f3bf 8f4f 	dsb	sy
1a0027da:	f3bf 8f6f 	isb	sy
1a0027de:	df00      	svc	0
1a0027e0:	bf00      	nop
1a0027e2:	0000      	.short	0x0000
1a0027e4:	e000ed08 	.word	0xe000ed08

1a0027e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0027e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0027f8 <vPortEnableVFP+0x10>
1a0027ec:	6801      	ldr	r1, [r0, #0]
1a0027ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0027f2:	6001      	str	r1, [r0, #0]
1a0027f4:	4770      	bx	lr
1a0027f6:	0000      	.short	0x0000
1a0027f8:	e000ed88 	.word	0xe000ed88

1a0027fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0027fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002800:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002804:	f021 0101 	bic.w	r1, r1, #1
1a002808:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00280c:	4b05      	ldr	r3, [pc, #20]	; (1a002824 <pxPortInitialiseStack+0x28>)
1a00280e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002812:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002816:	f06f 0302 	mvn.w	r3, #2
1a00281a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00281e:	3844      	subs	r0, #68	; 0x44
1a002820:	4770      	bx	lr
1a002822:	bf00      	nop
1a002824:	1a002781 	.word	0x1a002781
1a002828:	ffffffff 	.word	0xffffffff
1a00282c:	ffffffff 	.word	0xffffffff

1a002830 <SVC_Handler>:
	__asm volatile (
1a002830:	4b07      	ldr	r3, [pc, #28]	; (1a002850 <pxCurrentTCBConst2>)
1a002832:	6819      	ldr	r1, [r3, #0]
1a002834:	6808      	ldr	r0, [r1, #0]
1a002836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00283a:	f380 8809 	msr	PSP, r0
1a00283e:	f3bf 8f6f 	isb	sy
1a002842:	f04f 0000 	mov.w	r0, #0
1a002846:	f380 8811 	msr	BASEPRI, r0
1a00284a:	4770      	bx	lr
1a00284c:	f3af 8000 	nop.w

1a002850 <pxCurrentTCBConst2>:
1a002850:	10002d44 	.word	0x10002d44

1a002854 <vPortEnterCritical>:
1a002854:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002858:	f383 8811 	msr	BASEPRI, r3
1a00285c:	f3bf 8f6f 	isb	sy
1a002860:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002864:	4a0a      	ldr	r2, [pc, #40]	; (1a002890 <vPortEnterCritical+0x3c>)
1a002866:	6813      	ldr	r3, [r2, #0]
1a002868:	3301      	adds	r3, #1
1a00286a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00286c:	2b01      	cmp	r3, #1
1a00286e:	d000      	beq.n	1a002872 <vPortEnterCritical+0x1e>
}
1a002870:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002872:	4b08      	ldr	r3, [pc, #32]	; (1a002894 <vPortEnterCritical+0x40>)
1a002874:	681b      	ldr	r3, [r3, #0]
1a002876:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00287a:	d0f9      	beq.n	1a002870 <vPortEnterCritical+0x1c>
1a00287c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002880:	f383 8811 	msr	BASEPRI, r3
1a002884:	f3bf 8f6f 	isb	sy
1a002888:	f3bf 8f4f 	dsb	sy
1a00288c:	e7fe      	b.n	1a00288c <vPortEnterCritical+0x38>
1a00288e:	bf00      	nop
1a002890:	10000014 	.word	0x10000014
1a002894:	e000ed04 	.word	0xe000ed04

1a002898 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002898:	4b09      	ldr	r3, [pc, #36]	; (1a0028c0 <vPortExitCritical+0x28>)
1a00289a:	681b      	ldr	r3, [r3, #0]
1a00289c:	b943      	cbnz	r3, 1a0028b0 <vPortExitCritical+0x18>
1a00289e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a2:	f383 8811 	msr	BASEPRI, r3
1a0028a6:	f3bf 8f6f 	isb	sy
1a0028aa:	f3bf 8f4f 	dsb	sy
1a0028ae:	e7fe      	b.n	1a0028ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0028b0:	3b01      	subs	r3, #1
1a0028b2:	4a03      	ldr	r2, [pc, #12]	; (1a0028c0 <vPortExitCritical+0x28>)
1a0028b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0028b6:	b90b      	cbnz	r3, 1a0028bc <vPortExitCritical+0x24>
	__asm volatile
1a0028b8:	f383 8811 	msr	BASEPRI, r3
}
1a0028bc:	4770      	bx	lr
1a0028be:	bf00      	nop
1a0028c0:	10000014 	.word	0x10000014
1a0028c4:	ffffffff 	.word	0xffffffff
1a0028c8:	ffffffff 	.word	0xffffffff
1a0028cc:	ffffffff 	.word	0xffffffff

1a0028d0 <PendSV_Handler>:
	__asm volatile
1a0028d0:	f3ef 8009 	mrs	r0, PSP
1a0028d4:	f3bf 8f6f 	isb	sy
1a0028d8:	4b15      	ldr	r3, [pc, #84]	; (1a002930 <pxCurrentTCBConst>)
1a0028da:	681a      	ldr	r2, [r3, #0]
1a0028dc:	f01e 0f10 	tst.w	lr, #16
1a0028e0:	bf08      	it	eq
1a0028e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0028e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028ea:	6010      	str	r0, [r2, #0]
1a0028ec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0028f0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0028f4:	f380 8811 	msr	BASEPRI, r0
1a0028f8:	f3bf 8f4f 	dsb	sy
1a0028fc:	f3bf 8f6f 	isb	sy
1a002900:	f7ff fa5e 	bl	1a001dc0 <vTaskSwitchContext>
1a002904:	f04f 0000 	mov.w	r0, #0
1a002908:	f380 8811 	msr	BASEPRI, r0
1a00290c:	bc09      	pop	{r0, r3}
1a00290e:	6819      	ldr	r1, [r3, #0]
1a002910:	6808      	ldr	r0, [r1, #0]
1a002912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002916:	f01e 0f10 	tst.w	lr, #16
1a00291a:	bf08      	it	eq
1a00291c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002920:	f380 8809 	msr	PSP, r0
1a002924:	f3bf 8f6f 	isb	sy
1a002928:	4770      	bx	lr
1a00292a:	bf00      	nop
1a00292c:	f3af 8000 	nop.w

1a002930 <pxCurrentTCBConst>:
1a002930:	10002d44 	.word	0x10002d44

1a002934 <SysTick_Handler>:
{
1a002934:	b508      	push	{r3, lr}
	__asm volatile
1a002936:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00293a:	f383 8811 	msr	BASEPRI, r3
1a00293e:	f3bf 8f6f 	isb	sy
1a002942:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002946:	f7ff f935 	bl	1a001bb4 <xTaskIncrementTick>
1a00294a:	b118      	cbz	r0, 1a002954 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00294c:	4b03      	ldr	r3, [pc, #12]	; (1a00295c <SysTick_Handler+0x28>)
1a00294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002952:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002954:	2300      	movs	r3, #0
1a002956:	f383 8811 	msr	BASEPRI, r3
}
1a00295a:	bd08      	pop	{r3, pc}
1a00295c:	e000ed04 	.word	0xe000ed04

1a002960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002960:	4a08      	ldr	r2, [pc, #32]	; (1a002984 <vPortSetupTimerInterrupt+0x24>)
1a002962:	2300      	movs	r3, #0
1a002964:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002966:	4908      	ldr	r1, [pc, #32]	; (1a002988 <vPortSetupTimerInterrupt+0x28>)
1a002968:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00296a:	4b08      	ldr	r3, [pc, #32]	; (1a00298c <vPortSetupTimerInterrupt+0x2c>)
1a00296c:	681b      	ldr	r3, [r3, #0]
1a00296e:	4908      	ldr	r1, [pc, #32]	; (1a002990 <vPortSetupTimerInterrupt+0x30>)
1a002970:	fba1 1303 	umull	r1, r3, r1, r3
1a002974:	099b      	lsrs	r3, r3, #6
1a002976:	3b01      	subs	r3, #1
1a002978:	4906      	ldr	r1, [pc, #24]	; (1a002994 <vPortSetupTimerInterrupt+0x34>)
1a00297a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00297c:	2307      	movs	r3, #7
1a00297e:	6013      	str	r3, [r2, #0]
}
1a002980:	4770      	bx	lr
1a002982:	bf00      	nop
1a002984:	e000e010 	.word	0xe000e010
1a002988:	e000e018 	.word	0xe000e018
1a00298c:	1000315c 	.word	0x1000315c
1a002990:	10624dd3 	.word	0x10624dd3
1a002994:	e000e014 	.word	0xe000e014

1a002998 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002998:	4b3a      	ldr	r3, [pc, #232]	; (1a002a84 <xPortStartScheduler+0xec>)
1a00299a:	681a      	ldr	r2, [r3, #0]
1a00299c:	4b3a      	ldr	r3, [pc, #232]	; (1a002a88 <xPortStartScheduler+0xf0>)
1a00299e:	429a      	cmp	r2, r3
1a0029a0:	d00d      	beq.n	1a0029be <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0029a2:	4b38      	ldr	r3, [pc, #224]	; (1a002a84 <xPortStartScheduler+0xec>)
1a0029a4:	681a      	ldr	r2, [r3, #0]
1a0029a6:	4b39      	ldr	r3, [pc, #228]	; (1a002a8c <xPortStartScheduler+0xf4>)
1a0029a8:	429a      	cmp	r2, r3
1a0029aa:	d111      	bne.n	1a0029d0 <xPortStartScheduler+0x38>
	__asm volatile
1a0029ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029b0:	f383 8811 	msr	BASEPRI, r3
1a0029b4:	f3bf 8f6f 	isb	sy
1a0029b8:	f3bf 8f4f 	dsb	sy
1a0029bc:	e7fe      	b.n	1a0029bc <xPortStartScheduler+0x24>
1a0029be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029c2:	f383 8811 	msr	BASEPRI, r3
1a0029c6:	f3bf 8f6f 	isb	sy
1a0029ca:	f3bf 8f4f 	dsb	sy
1a0029ce:	e7fe      	b.n	1a0029ce <xPortStartScheduler+0x36>
{
1a0029d0:	b510      	push	{r4, lr}
1a0029d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0029d4:	4b2e      	ldr	r3, [pc, #184]	; (1a002a90 <xPortStartScheduler+0xf8>)
1a0029d6:	781a      	ldrb	r2, [r3, #0]
1a0029d8:	b2d2      	uxtb	r2, r2
1a0029da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0029dc:	22ff      	movs	r2, #255	; 0xff
1a0029de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0029e0:	781b      	ldrb	r3, [r3, #0]
1a0029e2:	b2db      	uxtb	r3, r3
1a0029e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0029e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0029ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0029f0:	4a28      	ldr	r2, [pc, #160]	; (1a002a94 <xPortStartScheduler+0xfc>)
1a0029f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0029f4:	4b28      	ldr	r3, [pc, #160]	; (1a002a98 <xPortStartScheduler+0x100>)
1a0029f6:	2207      	movs	r2, #7
1a0029f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0029fa:	e009      	b.n	1a002a10 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0029fc:	4a26      	ldr	r2, [pc, #152]	; (1a002a98 <xPortStartScheduler+0x100>)
1a0029fe:	6813      	ldr	r3, [r2, #0]
1a002a00:	3b01      	subs	r3, #1
1a002a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002a04:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002a08:	005b      	lsls	r3, r3, #1
1a002a0a:	b2db      	uxtb	r3, r3
1a002a0c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002a10:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002a14:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002a18:	d1f0      	bne.n	1a0029fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002a1a:	4b1f      	ldr	r3, [pc, #124]	; (1a002a98 <xPortStartScheduler+0x100>)
1a002a1c:	681b      	ldr	r3, [r3, #0]
1a002a1e:	2b04      	cmp	r3, #4
1a002a20:	d008      	beq.n	1a002a34 <xPortStartScheduler+0x9c>
1a002a22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a26:	f383 8811 	msr	BASEPRI, r3
1a002a2a:	f3bf 8f6f 	isb	sy
1a002a2e:	f3bf 8f4f 	dsb	sy
1a002a32:	e7fe      	b.n	1a002a32 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002a34:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002a36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002a3a:	4a17      	ldr	r2, [pc, #92]	; (1a002a98 <xPortStartScheduler+0x100>)
1a002a3c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002a3e:	9b01      	ldr	r3, [sp, #4]
1a002a40:	b2db      	uxtb	r3, r3
1a002a42:	4a13      	ldr	r2, [pc, #76]	; (1a002a90 <xPortStartScheduler+0xf8>)
1a002a44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002a46:	4b15      	ldr	r3, [pc, #84]	; (1a002a9c <xPortStartScheduler+0x104>)
1a002a48:	681a      	ldr	r2, [r3, #0]
1a002a4a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002a4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002a50:	681a      	ldr	r2, [r3, #0]
1a002a52:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002a56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002a58:	f7ff ff82 	bl	1a002960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002a5c:	2400      	movs	r4, #0
1a002a5e:	4b10      	ldr	r3, [pc, #64]	; (1a002aa0 <xPortStartScheduler+0x108>)
1a002a60:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002a62:	f7ff fec1 	bl	1a0027e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002a66:	4a0f      	ldr	r2, [pc, #60]	; (1a002aa4 <xPortStartScheduler+0x10c>)
1a002a68:	6813      	ldr	r3, [r2, #0]
1a002a6a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002a6e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002a70:	f7ff fea6 	bl	1a0027c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002a74:	f7ff f9a4 	bl	1a001dc0 <vTaskSwitchContext>
	prvTaskExitError();
1a002a78:	f7ff fe82 	bl	1a002780 <prvTaskExitError>
}
1a002a7c:	4620      	mov	r0, r4
1a002a7e:	b002      	add	sp, #8
1a002a80:	bd10      	pop	{r4, pc}
1a002a82:	bf00      	nop
1a002a84:	e000ed00 	.word	0xe000ed00
1a002a88:	410fc271 	.word	0x410fc271
1a002a8c:	410fc270 	.word	0x410fc270
1a002a90:	e000e400 	.word	0xe000e400
1a002a94:	10002f98 	.word	0x10002f98
1a002a98:	10002f9c 	.word	0x10002f9c
1a002a9c:	e000ed20 	.word	0xe000ed20
1a002aa0:	10000014 	.word	0x10000014
1a002aa4:	e000ef34 	.word	0xe000ef34

1a002aa8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002aa8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002aac:	2b0f      	cmp	r3, #15
1a002aae:	d90f      	bls.n	1a002ad0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002ab0:	4a10      	ldr	r2, [pc, #64]	; (1a002af4 <vPortValidateInterruptPriority+0x4c>)
1a002ab2:	5c9b      	ldrb	r3, [r3, r2]
1a002ab4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002ab6:	4a10      	ldr	r2, [pc, #64]	; (1a002af8 <vPortValidateInterruptPriority+0x50>)
1a002ab8:	7812      	ldrb	r2, [r2, #0]
1a002aba:	429a      	cmp	r2, r3
1a002abc:	d908      	bls.n	1a002ad0 <vPortValidateInterruptPriority+0x28>
1a002abe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ac2:	f383 8811 	msr	BASEPRI, r3
1a002ac6:	f3bf 8f6f 	isb	sy
1a002aca:	f3bf 8f4f 	dsb	sy
1a002ace:	e7fe      	b.n	1a002ace <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002ad0:	4b0a      	ldr	r3, [pc, #40]	; (1a002afc <vPortValidateInterruptPriority+0x54>)
1a002ad2:	681b      	ldr	r3, [r3, #0]
1a002ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002ad8:	4a09      	ldr	r2, [pc, #36]	; (1a002b00 <vPortValidateInterruptPriority+0x58>)
1a002ada:	6812      	ldr	r2, [r2, #0]
1a002adc:	4293      	cmp	r3, r2
1a002ade:	d908      	bls.n	1a002af2 <vPortValidateInterruptPriority+0x4a>
1a002ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae4:	f383 8811 	msr	BASEPRI, r3
1a002ae8:	f3bf 8f6f 	isb	sy
1a002aec:	f3bf 8f4f 	dsb	sy
1a002af0:	e7fe      	b.n	1a002af0 <vPortValidateInterruptPriority+0x48>
	}
1a002af2:	4770      	bx	lr
1a002af4:	e000e3f0 	.word	0xe000e3f0
1a002af8:	10002f98 	.word	0x10002f98
1a002afc:	e000ed0c 	.word	0xe000ed0c
1a002b00:	10002f9c 	.word	0x10002f9c

1a002b04 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002b04:	2200      	movs	r2, #0
1a002b06:	2a05      	cmp	r2, #5
1a002b08:	d819      	bhi.n	1a002b3e <Board_LED_Init+0x3a>
{
1a002b0a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002b0c:	490c      	ldr	r1, [pc, #48]	; (1a002b40 <Board_LED_Init+0x3c>)
1a002b0e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002b12:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002b16:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002b18:	4b0a      	ldr	r3, [pc, #40]	; (1a002b44 <Board_LED_Init+0x40>)
1a002b1a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002b1e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002b22:	2001      	movs	r0, #1
1a002b24:	40a0      	lsls	r0, r4
1a002b26:	4301      	orrs	r1, r0
1a002b28:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002b2c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002b30:	2100      	movs	r1, #0
1a002b32:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002b34:	3201      	adds	r2, #1
1a002b36:	2a05      	cmp	r2, #5
1a002b38:	d9e8      	bls.n	1a002b0c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002b3a:	bc70      	pop	{r4, r5, r6}
1a002b3c:	4770      	bx	lr
1a002b3e:	4770      	bx	lr
1a002b40:	1a005730 	.word	0x1a005730
1a002b44:	400f4000 	.word	0x400f4000

1a002b48 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b48:	2300      	movs	r3, #0
1a002b4a:	2b03      	cmp	r3, #3
1a002b4c:	d816      	bhi.n	1a002b7c <Board_TEC_Init+0x34>
{
1a002b4e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002b50:	490b      	ldr	r1, [pc, #44]	; (1a002b80 <Board_TEC_Init+0x38>)
1a002b52:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002b56:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002b5a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002b5c:	4c09      	ldr	r4, [pc, #36]	; (1a002b84 <Board_TEC_Init+0x3c>)
1a002b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002b62:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002b66:	2001      	movs	r0, #1
1a002b68:	40a8      	lsls	r0, r5
1a002b6a:	ea21 0100 	bic.w	r1, r1, r0
1a002b6e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002b72:	3301      	adds	r3, #1
1a002b74:	2b03      	cmp	r3, #3
1a002b76:	d9eb      	bls.n	1a002b50 <Board_TEC_Init+0x8>
    }
}
1a002b78:	bc30      	pop	{r4, r5}
1a002b7a:	4770      	bx	lr
1a002b7c:	4770      	bx	lr
1a002b7e:	bf00      	nop
1a002b80:	1a005728 	.word	0x1a005728
1a002b84:	400f4000 	.word	0x400f4000

1a002b88 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002b88:	2300      	movs	r3, #0
1a002b8a:	2b08      	cmp	r3, #8
1a002b8c:	d816      	bhi.n	1a002bbc <Board_GPIO_Init+0x34>
{
1a002b8e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002b90:	490b      	ldr	r1, [pc, #44]	; (1a002bc0 <Board_GPIO_Init+0x38>)
1a002b92:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002b96:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002b9a:	784d      	ldrb	r5, [r1, #1]
1a002b9c:	4c09      	ldr	r4, [pc, #36]	; (1a002bc4 <Board_GPIO_Init+0x3c>)
1a002b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002ba2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002ba6:	2001      	movs	r0, #1
1a002ba8:	40a8      	lsls	r0, r5
1a002baa:	ea21 0100 	bic.w	r1, r1, r0
1a002bae:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002bb2:	3301      	adds	r3, #1
1a002bb4:	2b08      	cmp	r3, #8
1a002bb6:	d9eb      	bls.n	1a002b90 <Board_GPIO_Init+0x8>
    }
}
1a002bb8:	bc30      	pop	{r4, r5}
1a002bba:	4770      	bx	lr
1a002bbc:	4770      	bx	lr
1a002bbe:	bf00      	nop
1a002bc0:	1a00573c 	.word	0x1a00573c
1a002bc4:	400f4000 	.word	0x400f4000

1a002bc8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002bc8:	b510      	push	{r4, lr}
1a002bca:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002bcc:	4c08      	ldr	r4, [pc, #32]	; (1a002bf0 <Board_ADC_Init+0x28>)
1a002bce:	4669      	mov	r1, sp
1a002bd0:	4620      	mov	r0, r4
1a002bd2:	f000 f9bb 	bl	1a002f4c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002bd6:	4a07      	ldr	r2, [pc, #28]	; (1a002bf4 <Board_ADC_Init+0x2c>)
1a002bd8:	4669      	mov	r1, sp
1a002bda:	4620      	mov	r0, r4
1a002bdc:	f000 f9d6 	bl	1a002f8c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002be0:	2200      	movs	r2, #0
1a002be2:	4669      	mov	r1, sp
1a002be4:	4620      	mov	r0, r4
1a002be6:	f000 f9ea 	bl	1a002fbe <Chip_ADC_SetResolution>
}
1a002bea:	b002      	add	sp, #8
1a002bec:	bd10      	pop	{r4, pc}
1a002bee:	bf00      	nop
1a002bf0:	400e3000 	.word	0x400e3000
1a002bf4:	00061a80 	.word	0x00061a80

1a002bf8 <Board_SPI_Init>:
{
1a002bf8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002bfa:	4c0b      	ldr	r4, [pc, #44]	; (1a002c28 <Board_SPI_Init+0x30>)
1a002bfc:	4620      	mov	r0, r4
1a002bfe:	f000 fda1 	bl	1a003744 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002c02:	6863      	ldr	r3, [r4, #4]
1a002c04:	f023 0304 	bic.w	r3, r3, #4
1a002c08:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002c0a:	6823      	ldr	r3, [r4, #0]
1a002c0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002c10:	f043 0307 	orr.w	r3, r3, #7
1a002c14:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002c16:	4905      	ldr	r1, [pc, #20]	; (1a002c2c <Board_SPI_Init+0x34>)
1a002c18:	4620      	mov	r0, r4
1a002c1a:	f000 fd74 	bl	1a003706 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002c1e:	6863      	ldr	r3, [r4, #4]
1a002c20:	f043 0302 	orr.w	r3, r3, #2
1a002c24:	6063      	str	r3, [r4, #4]
}
1a002c26:	bd10      	pop	{r4, pc}
1a002c28:	400c5000 	.word	0x400c5000
1a002c2c:	000186a0 	.word	0x000186a0

1a002c30 <Board_I2C_Init>:
{
1a002c30:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002c32:	2000      	movs	r0, #0
1a002c34:	f000 fdb2 	bl	1a00379c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002c38:	4b04      	ldr	r3, [pc, #16]	; (1a002c4c <Board_I2C_Init+0x1c>)
1a002c3a:	f640 0208 	movw	r2, #2056	; 0x808
1a002c3e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002c42:	4903      	ldr	r1, [pc, #12]	; (1a002c50 <Board_I2C_Init+0x20>)
1a002c44:	2000      	movs	r0, #0
1a002c46:	f000 fdbb 	bl	1a0037c0 <Chip_I2C_SetClockRate>
}
1a002c4a:	bd08      	pop	{r3, pc}
1a002c4c:	40086000 	.word	0x40086000
1a002c50:	000f4240 	.word	0x000f4240

1a002c54 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002c54:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002c56:	4c07      	ldr	r4, [pc, #28]	; (1a002c74 <Board_Debug_Init+0x20>)
1a002c58:	4620      	mov	r0, r4
1a002c5a:	f000 f895 	bl	1a002d88 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002c5e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002c62:	4620      	mov	r0, r4
1a002c64:	f000 f8da 	bl	1a002e1c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002c68:	2303      	movs	r3, #3
1a002c6a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002c6c:	2301      	movs	r3, #1
1a002c6e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002c70:	bd10      	pop	{r4, pc}
1a002c72:	bf00      	nop
1a002c74:	400c1000 	.word	0x400c1000

1a002c78 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002c78:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002c7a:	f7ff ffeb 	bl	1a002c54 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002c7e:	4808      	ldr	r0, [pc, #32]	; (1a002ca0 <Board_Init+0x28>)
1a002c80:	f000 fd20 	bl	1a0036c4 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002c84:	f7ff ff80 	bl	1a002b88 <Board_GPIO_Init>
   Board_ADC_Init();
1a002c88:	f7ff ff9e 	bl	1a002bc8 <Board_ADC_Init>
   Board_SPI_Init();
1a002c8c:	f7ff ffb4 	bl	1a002bf8 <Board_SPI_Init>
   Board_I2C_Init();
1a002c90:	f7ff ffce 	bl	1a002c30 <Board_I2C_Init>

   Board_LED_Init();
1a002c94:	f7ff ff36 	bl	1a002b04 <Board_LED_Init>
   Board_TEC_Init();
1a002c98:	f7ff ff56 	bl	1a002b48 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002c9c:	bd08      	pop	{r3, pc}
1a002c9e:	bf00      	nop
1a002ca0:	400f4000 	.word	0x400f4000

1a002ca4 <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a002ca4:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002ca6:	f7ff ffd5 	bl	1a002c54 <Board_Debug_Init>
1a002caa:	bd08      	pop	{r3, pc}

1a002cac <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002cac:	2300      	movs	r3, #0
1a002cae:	2b1c      	cmp	r3, #28
1a002cb0:	d812      	bhi.n	1a002cd8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002cb2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002cb4:	4a09      	ldr	r2, [pc, #36]	; (1a002cdc <Board_SetupMuxing+0x30>)
1a002cb6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002cba:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002cbe:	784a      	ldrb	r2, [r1, #1]
1a002cc0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002cc2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002cc6:	4906      	ldr	r1, [pc, #24]	; (1a002ce0 <Board_SetupMuxing+0x34>)
1a002cc8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002ccc:	3301      	adds	r3, #1
1a002cce:	2b1c      	cmp	r3, #28
1a002cd0:	d9f0      	bls.n	1a002cb4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002cd6:	4770      	bx	lr
1a002cd8:	4770      	bx	lr
1a002cda:	bf00      	nop
1a002cdc:	1a005758 	.word	0x1a005758
1a002ce0:	40086000 	.word	0x40086000

1a002ce4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002ce4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002ce6:	4a17      	ldr	r2, [pc, #92]	; (1a002d44 <Board_SetupClocking+0x60>)
1a002ce8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002cf0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002cf4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002cf8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002d00:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002d04:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002d08:	2201      	movs	r2, #1
1a002d0a:	490f      	ldr	r1, [pc, #60]	; (1a002d48 <Board_SetupClocking+0x64>)
1a002d0c:	2006      	movs	r0, #6
1a002d0e:	f000 fc2f 	bl	1a003570 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002d12:	2400      	movs	r4, #0
1a002d14:	b14c      	cbz	r4, 1a002d2a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002d16:	4b0b      	ldr	r3, [pc, #44]	; (1a002d44 <Board_SetupClocking+0x60>)
1a002d18:	685a      	ldr	r2, [r3, #4]
1a002d1a:	f022 020c 	bic.w	r2, r2, #12
1a002d1e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002d20:	685a      	ldr	r2, [r3, #4]
1a002d22:	f042 0203 	orr.w	r2, r2, #3
1a002d26:	605a      	str	r2, [r3, #4]
}
1a002d28:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002d2a:	4808      	ldr	r0, [pc, #32]	; (1a002d4c <Board_SetupClocking+0x68>)
1a002d2c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002d30:	2301      	movs	r3, #1
1a002d32:	788a      	ldrb	r2, [r1, #2]
1a002d34:	7849      	ldrb	r1, [r1, #1]
1a002d36:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002d3a:	f000 fb6b 	bl	1a003414 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002d3e:	3401      	adds	r4, #1
1a002d40:	e7e8      	b.n	1a002d14 <Board_SetupClocking+0x30>
1a002d42:	bf00      	nop
1a002d44:	40043000 	.word	0x40043000
1a002d48:	0c28cb00 	.word	0x0c28cb00
1a002d4c:	1a005754 	.word	0x1a005754

1a002d50 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002d50:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002d52:	f7ff ffab 	bl	1a002cac <Board_SetupMuxing>
    Board_SetupClocking();
1a002d56:	f7ff ffc5 	bl	1a002ce4 <Board_SetupClocking>
}
1a002d5a:	bd08      	pop	{r3, pc}

1a002d5c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002d5c:	4b09      	ldr	r3, [pc, #36]	; (1a002d84 <Chip_UART_GetIndex+0x28>)
1a002d5e:	4298      	cmp	r0, r3
1a002d60:	d009      	beq.n	1a002d76 <Chip_UART_GetIndex+0x1a>
1a002d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002d66:	4298      	cmp	r0, r3
1a002d68:	d007      	beq.n	1a002d7a <Chip_UART_GetIndex+0x1e>
1a002d6a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002d6e:	4298      	cmp	r0, r3
1a002d70:	d005      	beq.n	1a002d7e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002d72:	2000      	movs	r0, #0
1a002d74:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002d76:	2002      	movs	r0, #2
1a002d78:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002d7a:	2003      	movs	r0, #3
1a002d7c:	4770      	bx	lr
			return 1;
1a002d7e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002d80:	4770      	bx	lr
1a002d82:	bf00      	nop
1a002d84:	400c1000 	.word	0x400c1000

1a002d88 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002d88:	b530      	push	{r4, r5, lr}
1a002d8a:	b083      	sub	sp, #12
1a002d8c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002d8e:	f7ff ffe5 	bl	1a002d5c <Chip_UART_GetIndex>
1a002d92:	2301      	movs	r3, #1
1a002d94:	461a      	mov	r2, r3
1a002d96:	4619      	mov	r1, r3
1a002d98:	4d0e      	ldr	r5, [pc, #56]	; (1a002dd4 <Chip_UART_Init+0x4c>)
1a002d9a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002d9e:	f000 fb7f 	bl	1a0034a0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002da2:	2307      	movs	r3, #7
1a002da4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002da6:	2300      	movs	r3, #0
1a002da8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002daa:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002dac:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002dae:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002db0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002db2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002db4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002db6:	4b08      	ldr	r3, [pc, #32]	; (1a002dd8 <Chip_UART_Init+0x50>)
1a002db8:	429c      	cmp	r4, r3
1a002dba:	d006      	beq.n	1a002dca <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002dbc:	2303      	movs	r3, #3
1a002dbe:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002dc0:	2310      	movs	r3, #16
1a002dc2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002dc4:	9b01      	ldr	r3, [sp, #4]
}
1a002dc6:	b003      	add	sp, #12
1a002dc8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002dca:	2300      	movs	r3, #0
1a002dcc:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002dce:	69a3      	ldr	r3, [r4, #24]
1a002dd0:	9301      	str	r3, [sp, #4]
1a002dd2:	e7f3      	b.n	1a002dbc <Chip_UART_Init+0x34>
1a002dd4:	1a0057d4 	.word	0x1a0057d4
1a002dd8:	40082000 	.word	0x40082000

1a002ddc <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002ddc:	b538      	push	{r3, r4, r5, lr}
1a002dde:	4605      	mov	r5, r0
1a002de0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002de2:	f7ff ffbb 	bl	1a002d5c <Chip_UART_GetIndex>
1a002de6:	4b0c      	ldr	r3, [pc, #48]	; (1a002e18 <Chip_UART_SetBaud+0x3c>)
1a002de8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002dec:	f000 fb90 	bl	1a003510 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002df0:	0123      	lsls	r3, r4, #4
1a002df2:	fbb0 f3f3 	udiv	r3, r0, r3
1a002df6:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002df8:	68ea      	ldr	r2, [r5, #12]
1a002dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002dfe:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002e00:	6029      	str	r1, [r5, #0]
1a002e02:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002e06:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002e08:	68ea      	ldr	r2, [r5, #12]
1a002e0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002e0e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002e10:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002e14:	0900      	lsrs	r0, r0, #4
1a002e16:	bd38      	pop	{r3, r4, r5, pc}
1a002e18:	1a0057cc 	.word	0x1a0057cc

1a002e1c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e20:	b083      	sub	sp, #12
1a002e22:	4683      	mov	fp, r0
1a002e24:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002e26:	f7ff ff99 	bl	1a002d5c <Chip_UART_GetIndex>
1a002e2a:	4b35      	ldr	r3, [pc, #212]	; (1a002f00 <Chip_UART_SetBaudFDR+0xe4>)
1a002e2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002e30:	f000 fb6e 	bl	1a003510 <Chip_Clock_GetRate>
1a002e34:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002e36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002e3a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002e3c:	2300      	movs	r3, #0
1a002e3e:	9301      	str	r3, [sp, #4]
1a002e40:	46a2      	mov	sl, r4
1a002e42:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002e44:	e02a      	b.n	1a002e9c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002e46:	4242      	negs	r2, r0
				div ++;
1a002e48:	1c4b      	adds	r3, r1, #1
1a002e4a:	e017      	b.n	1a002e7c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002e4c:	b30a      	cbz	r2, 1a002e92 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002e4e:	4617      	mov	r7, r2
			sd = d;
1a002e50:	9501      	str	r5, [sp, #4]
			sm = m;
1a002e52:	46a2      	mov	sl, r4
			sdiv = div;
1a002e54:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002e56:	3501      	adds	r5, #1
1a002e58:	42ac      	cmp	r4, r5
1a002e5a:	d91e      	bls.n	1a002e9a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002e5c:	0933      	lsrs	r3, r6, #4
1a002e5e:	0730      	lsls	r0, r6, #28
1a002e60:	fba4 0100 	umull	r0, r1, r4, r0
1a002e64:	fb04 1103 	mla	r1, r4, r3, r1
1a002e68:	1962      	adds	r2, r4, r5
1a002e6a:	fb08 f202 	mul.w	r2, r8, r2
1a002e6e:	2300      	movs	r3, #0
1a002e70:	f001 fd74 	bl	1a00495c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002e74:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002e76:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002e78:	2800      	cmp	r0, #0
1a002e7a:	dbe4      	blt.n	1a002e46 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002e7c:	4297      	cmp	r7, r2
1a002e7e:	d3ea      	bcc.n	1a002e56 <Chip_UART_SetBaudFDR+0x3a>
1a002e80:	2b00      	cmp	r3, #0
1a002e82:	d0e8      	beq.n	1a002e56 <Chip_UART_SetBaudFDR+0x3a>
1a002e84:	0c19      	lsrs	r1, r3, #16
1a002e86:	d1e6      	bne.n	1a002e56 <Chip_UART_SetBaudFDR+0x3a>
1a002e88:	2b02      	cmp	r3, #2
1a002e8a:	d8df      	bhi.n	1a002e4c <Chip_UART_SetBaudFDR+0x30>
1a002e8c:	2d00      	cmp	r5, #0
1a002e8e:	d0dd      	beq.n	1a002e4c <Chip_UART_SetBaudFDR+0x30>
1a002e90:	e7e1      	b.n	1a002e56 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002e92:	4617      	mov	r7, r2
			sd = d;
1a002e94:	9501      	str	r5, [sp, #4]
			sm = m;
1a002e96:	46a2      	mov	sl, r4
			sdiv = div;
1a002e98:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002e9a:	3401      	adds	r4, #1
1a002e9c:	b11f      	cbz	r7, 1a002ea6 <Chip_UART_SetBaudFDR+0x8a>
1a002e9e:	2c0f      	cmp	r4, #15
1a002ea0:	d801      	bhi.n	1a002ea6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002ea2:	2500      	movs	r5, #0
1a002ea4:	e7d8      	b.n	1a002e58 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002ea6:	f1b9 0f00 	cmp.w	r9, #0
1a002eaa:	d024      	beq.n	1a002ef6 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002eac:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002eb4:	f8cb 300c 	str.w	r3, [fp, #12]
1a002eb8:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002ebc:	f8cb 3000 	str.w	r3, [fp]
1a002ec0:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002ec4:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002ec8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002ed0:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002ed4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002ed8:	b2db      	uxtb	r3, r3
1a002eda:	9901      	ldr	r1, [sp, #4]
1a002edc:	f001 020f 	and.w	r2, r1, #15
1a002ee0:	4313      	orrs	r3, r2
1a002ee2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002ee6:	0933      	lsrs	r3, r6, #4
1a002ee8:	fb0a f303 	mul.w	r3, sl, r3
1a002eec:	448a      	add	sl, r1
1a002eee:	fb09 f90a 	mul.w	r9, r9, sl
1a002ef2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002ef6:	4648      	mov	r0, r9
1a002ef8:	b003      	add	sp, #12
1a002efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002efe:	bf00      	nop
1a002f00:	1a0057cc 	.word	0x1a0057cc

1a002f04 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002f04:	4b03      	ldr	r3, [pc, #12]	; (1a002f14 <Chip_ADC_GetClockIndex+0x10>)
1a002f06:	4298      	cmp	r0, r3
1a002f08:	d001      	beq.n	1a002f0e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002f0a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002f0c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002f0e:	2004      	movs	r0, #4
1a002f10:	4770      	bx	lr
1a002f12:	bf00      	nop
1a002f14:	400e4000 	.word	0x400e4000

1a002f18 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002f18:	b570      	push	{r4, r5, r6, lr}
1a002f1a:	460d      	mov	r5, r1
1a002f1c:	4614      	mov	r4, r2
1a002f1e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002f20:	f7ff fff0 	bl	1a002f04 <Chip_ADC_GetClockIndex>
1a002f24:	f000 faf4 	bl	1a003510 <Chip_Clock_GetRate>
	if (burstMode) {
1a002f28:	b965      	cbnz	r5, 1a002f44 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002f2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002f2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002f32:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002f36:	0064      	lsls	r4, r4, #1
1a002f38:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f3c:	b2c0      	uxtb	r0, r0
1a002f3e:	3801      	subs	r0, #1
	return div;
}
1a002f40:	b2c0      	uxtb	r0, r0
1a002f42:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002f44:	fb04 f406 	mul.w	r4, r4, r6
1a002f48:	e7f3      	b.n	1a002f32 <getClkDiv+0x1a>
1a002f4a:	Address 0x000000001a002f4a is out of bounds.


1a002f4c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002f4c:	b538      	push	{r3, r4, r5, lr}
1a002f4e:	4605      	mov	r5, r0
1a002f50:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002f52:	f7ff ffd7 	bl	1a002f04 <Chip_ADC_GetClockIndex>
1a002f56:	2301      	movs	r3, #1
1a002f58:	461a      	mov	r2, r3
1a002f5a:	4619      	mov	r1, r3
1a002f5c:	f000 faa0 	bl	1a0034a0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002f60:	2100      	movs	r1, #0
1a002f62:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002f64:	4a08      	ldr	r2, [pc, #32]	; (1a002f88 <Chip_ADC_Init+0x3c>)
1a002f66:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002f68:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002f6a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002f6c:	230b      	movs	r3, #11
1a002f6e:	4628      	mov	r0, r5
1a002f70:	f7ff ffd2 	bl	1a002f18 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002f74:	0200      	lsls	r0, r0, #8
1a002f76:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002f7a:	7920      	ldrb	r0, [r4, #4]
1a002f7c:	0440      	lsls	r0, r0, #17
1a002f7e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002f82:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002f84:	6028      	str	r0, [r5, #0]
}
1a002f86:	bd38      	pop	{r3, r4, r5, pc}
1a002f88:	00061a80 	.word	0x00061a80

1a002f8c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002f8c:	b570      	push	{r4, r5, r6, lr}
1a002f8e:	4605      	mov	r5, r0
1a002f90:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002f92:	6804      	ldr	r4, [r0, #0]
1a002f94:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002f98:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002f9c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002f9e:	790b      	ldrb	r3, [r1, #4]
1a002fa0:	f1c3 030b 	rsb	r3, r3, #11
1a002fa4:	b2db      	uxtb	r3, r3
1a002fa6:	7949      	ldrb	r1, [r1, #5]
1a002fa8:	f7ff ffb6 	bl	1a002f18 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002fac:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002fb0:	7930      	ldrb	r0, [r6, #4]
1a002fb2:	0440      	lsls	r0, r0, #17
1a002fb4:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002fb8:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002fba:	6028      	str	r0, [r5, #0]
}
1a002fbc:	bd70      	pop	{r4, r5, r6, pc}

1a002fbe <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002fbe:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002fc0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002fc2:	680a      	ldr	r2, [r1, #0]
1a002fc4:	f7ff ffe2 	bl	1a002f8c <Chip_ADC_SetSampleRate>
}
1a002fc8:	bd08      	pop	{r3, pc}
1a002fca:	Address 0x000000001a002fca is out of bounds.


1a002fcc <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002fcc:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002fce:	680b      	ldr	r3, [r1, #0]
1a002fd0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002fd4:	d002      	beq.n	1a002fdc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002fda:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002fdc:	4607      	mov	r7, r0
1a002fde:	2501      	movs	r5, #1
1a002fe0:	e03b      	b.n	1a00305a <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002fe2:	694b      	ldr	r3, [r1, #20]
1a002fe4:	fb03 f302 	mul.w	r3, r3, r2
1a002fe8:	fbb3 f3f5 	udiv	r3, r3, r5
1a002fec:	e014      	b.n	1a003018 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002fee:	461c      	mov	r4, r3
1a002ff0:	e020      	b.n	1a003034 <pll_calc_divs+0x68>
		return -val;
1a002ff2:	f1cc 0c00 	rsb	ip, ip, #0
1a002ff6:	e020      	b.n	1a00303a <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002ff8:	3201      	adds	r2, #1
1a002ffa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002ffe:	dc26      	bgt.n	1a00304e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003000:	680c      	ldr	r4, [r1, #0]
1a003002:	f014 0f40 	tst.w	r4, #64	; 0x40
1a003006:	d0ec      	beq.n	1a002fe2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003008:	1c73      	adds	r3, r6, #1
1a00300a:	fa02 fc03 	lsl.w	ip, r2, r3
1a00300e:	694b      	ldr	r3, [r1, #20]
1a003010:	fb03 f30c 	mul.w	r3, r3, ip
1a003014:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003018:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a003068 <pll_calc_divs+0x9c>
1a00301c:	4563      	cmp	r3, ip
1a00301e:	d9eb      	bls.n	1a002ff8 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003020:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a00306c <pll_calc_divs+0xa0>
1a003024:	4563      	cmp	r3, ip
1a003026:	d812      	bhi.n	1a00304e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003028:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00302c:	d1df      	bne.n	1a002fee <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a00302e:	1c74      	adds	r4, r6, #1
1a003030:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a003034:	ebb0 0c04 	subs.w	ip, r0, r4
1a003038:	d4db      	bmi.n	1a002ff2 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00303a:	4567      	cmp	r7, ip
1a00303c:	d9dc      	bls.n	1a002ff8 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a00303e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003040:	1c77      	adds	r7, r6, #1
1a003042:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003044:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a003046:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003048:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00304a:	4667      	mov	r7, ip
1a00304c:	e7d4      	b.n	1a002ff8 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a00304e:	3601      	adds	r6, #1
1a003050:	2e03      	cmp	r6, #3
1a003052:	dc01      	bgt.n	1a003058 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003054:	2201      	movs	r2, #1
1a003056:	e7d0      	b.n	1a002ffa <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a003058:	3501      	adds	r5, #1
1a00305a:	2d04      	cmp	r5, #4
1a00305c:	dc01      	bgt.n	1a003062 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a00305e:	2600      	movs	r6, #0
1a003060:	e7f6      	b.n	1a003050 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003062:	bcf0      	pop	{r4, r5, r6, r7}
1a003064:	4770      	bx	lr
1a003066:	bf00      	nop
1a003068:	094c5eff 	.word	0x094c5eff
1a00306c:	1312d000 	.word	0x1312d000

1a003070 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003070:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003072:	b099      	sub	sp, #100	; 0x64
1a003074:	4605      	mov	r5, r0
1a003076:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a003078:	225c      	movs	r2, #92	; 0x5c
1a00307a:	2100      	movs	r1, #0
1a00307c:	a801      	add	r0, sp, #4
1a00307e:	f001 fe1c 	bl	1a004cba <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003082:	2380      	movs	r3, #128	; 0x80
1a003084:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a003086:	6963      	ldr	r3, [r4, #20]
1a003088:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00308a:	7923      	ldrb	r3, [r4, #4]
1a00308c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003090:	4669      	mov	r1, sp
1a003092:	4628      	mov	r0, r5
1a003094:	f7ff ff9a 	bl	1a002fcc <pll_calc_divs>
	if (pll[0].fout == freq) {
1a003098:	9b06      	ldr	r3, [sp, #24]
1a00309a:	42ab      	cmp	r3, r5
1a00309c:	d027      	beq.n	1a0030ee <pll_get_frac+0x7e>
	if (val < 0)
1a00309e:	1aeb      	subs	r3, r5, r3
1a0030a0:	d42e      	bmi.n	1a003100 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0030a2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0030a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0030a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0030aa:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0030ac:	6963      	ldr	r3, [r4, #20]
1a0030ae:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0030b0:	7923      	ldrb	r3, [r4, #4]
1a0030b2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0030b6:	a910      	add	r1, sp, #64	; 0x40
1a0030b8:	4628      	mov	r0, r5
1a0030ba:	f7ff ff87 	bl	1a002fcc <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0030be:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0030c0:	42ab      	cmp	r3, r5
1a0030c2:	d01f      	beq.n	1a003104 <pll_get_frac+0x94>
	if (val < 0)
1a0030c4:	1aeb      	subs	r3, r5, r3
1a0030c6:	d425      	bmi.n	1a003114 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0030c8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0030ca:	4b2b      	ldr	r3, [pc, #172]	; (1a003178 <pll_get_frac+0x108>)
1a0030cc:	429d      	cmp	r5, r3
1a0030ce:	d923      	bls.n	1a003118 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0030d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0030d2:	1aed      	subs	r5, r5, r3
1a0030d4:	d433      	bmi.n	1a00313e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0030d6:	42ae      	cmp	r6, r5
1a0030d8:	dc3b      	bgt.n	1a003152 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0030da:	42be      	cmp	r6, r7
1a0030dc:	dc31      	bgt.n	1a003142 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0030de:	466d      	mov	r5, sp
1a0030e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0030ec:	e006      	b.n	1a0030fc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0030ee:	466d      	mov	r5, sp
1a0030f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0030f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0030f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0030f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0030fc:	b019      	add	sp, #100	; 0x64
1a0030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003100:	425b      	negs	r3, r3
1a003102:	e7ce      	b.n	1a0030a2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a003104:	ad10      	add	r5, sp, #64	; 0x40
1a003106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00310a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00310e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003112:	e7f3      	b.n	1a0030fc <pll_get_frac+0x8c>
		return -val;
1a003114:	425b      	negs	r3, r3
1a003116:	e7d7      	b.n	1a0030c8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003118:	2340      	movs	r3, #64	; 0x40
1a00311a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00311c:	6963      	ldr	r3, [r4, #20]
1a00311e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003120:	a908      	add	r1, sp, #32
1a003122:	4628      	mov	r0, r5
1a003124:	f7ff ff52 	bl	1a002fcc <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00312a:	42ab      	cmp	r3, r5
1a00312c:	d1d0      	bne.n	1a0030d0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00312e:	ad08      	add	r5, sp, #32
1a003130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003134:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00313c:	e7de      	b.n	1a0030fc <pll_get_frac+0x8c>
		return -val;
1a00313e:	426d      	negs	r5, r5
1a003140:	e7c9      	b.n	1a0030d6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a003142:	ad10      	add	r5, sp, #64	; 0x40
1a003144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00314c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003150:	e7d4      	b.n	1a0030fc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003152:	42af      	cmp	r7, r5
1a003154:	db07      	blt.n	1a003166 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a003156:	ad08      	add	r5, sp, #32
1a003158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00315c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003164:	e7ca      	b.n	1a0030fc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a003166:	ad10      	add	r5, sp, #64	; 0x40
1a003168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00316a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00316c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003174:	e7c2      	b.n	1a0030fc <pll_get_frac+0x8c>
1a003176:	bf00      	nop
1a003178:	068e7780 	.word	0x068e7780

1a00317c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00317c:	b430      	push	{r4, r5}
1a00317e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003180:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003182:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003184:	e000      	b.n	1a003188 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a003186:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003188:	281c      	cmp	r0, #28
1a00318a:	d118      	bne.n	1a0031be <Chip_Clock_FindBaseClock+0x42>
1a00318c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003190:	0051      	lsls	r1, r2, #1
1a003192:	4a0c      	ldr	r2, [pc, #48]	; (1a0031c4 <Chip_Clock_FindBaseClock+0x48>)
1a003194:	440a      	add	r2, r1
1a003196:	7914      	ldrb	r4, [r2, #4]
1a003198:	4284      	cmp	r4, r0
1a00319a:	d010      	beq.n	1a0031be <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00319c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0031a0:	004a      	lsls	r2, r1, #1
1a0031a2:	4908      	ldr	r1, [pc, #32]	; (1a0031c4 <Chip_Clock_FindBaseClock+0x48>)
1a0031a4:	5a8a      	ldrh	r2, [r1, r2]
1a0031a6:	42aa      	cmp	r2, r5
1a0031a8:	d8ed      	bhi.n	1a003186 <Chip_Clock_FindBaseClock+0xa>
1a0031aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0031ae:	0051      	lsls	r1, r2, #1
1a0031b0:	4a04      	ldr	r2, [pc, #16]	; (1a0031c4 <Chip_Clock_FindBaseClock+0x48>)
1a0031b2:	440a      	add	r2, r1
1a0031b4:	8852      	ldrh	r2, [r2, #2]
1a0031b6:	42aa      	cmp	r2, r5
1a0031b8:	d3e5      	bcc.n	1a003186 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0031ba:	4620      	mov	r0, r4
1a0031bc:	e7e4      	b.n	1a003188 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0031be:	bc30      	pop	{r4, r5}
1a0031c0:	4770      	bx	lr
1a0031c2:	bf00      	nop
1a0031c4:	1a0057e8 	.word	0x1a0057e8

1a0031c8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0031c8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0031ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0031ce:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0031d0:	4a0d      	ldr	r2, [pc, #52]	; (1a003208 <Chip_Clock_EnableCrystal+0x40>)
1a0031d2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0031d4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0031d8:	6992      	ldr	r2, [r2, #24]
1a0031da:	428a      	cmp	r2, r1
1a0031dc:	d001      	beq.n	1a0031e2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0031de:	4a0a      	ldr	r2, [pc, #40]	; (1a003208 <Chip_Clock_EnableCrystal+0x40>)
1a0031e0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0031e2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0031e6:	4a09      	ldr	r2, [pc, #36]	; (1a00320c <Chip_Clock_EnableCrystal+0x44>)
1a0031e8:	6811      	ldr	r1, [r2, #0]
1a0031ea:	4a09      	ldr	r2, [pc, #36]	; (1a003210 <Chip_Clock_EnableCrystal+0x48>)
1a0031ec:	4291      	cmp	r1, r2
1a0031ee:	d901      	bls.n	1a0031f4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0031f0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0031f4:	4a04      	ldr	r2, [pc, #16]	; (1a003208 <Chip_Clock_EnableCrystal+0x40>)
1a0031f6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0031f8:	9b01      	ldr	r3, [sp, #4]
1a0031fa:	1e5a      	subs	r2, r3, #1
1a0031fc:	9201      	str	r2, [sp, #4]
1a0031fe:	2b00      	cmp	r3, #0
1a003200:	d1fa      	bne.n	1a0031f8 <Chip_Clock_EnableCrystal+0x30>
}
1a003202:	b002      	add	sp, #8
1a003204:	4770      	bx	lr
1a003206:	bf00      	nop
1a003208:	40050000 	.word	0x40050000
1a00320c:	1a005750 	.word	0x1a005750
1a003210:	01312cff 	.word	0x01312cff

1a003214 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003214:	3012      	adds	r0, #18
1a003216:	4b05      	ldr	r3, [pc, #20]	; (1a00322c <Chip_Clock_GetDividerSource+0x18>)
1a003218:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00321c:	f010 0f01 	tst.w	r0, #1
1a003220:	d102      	bne.n	1a003228 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003222:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003226:	4770      	bx	lr
		return CLKINPUT_PD;
1a003228:	2011      	movs	r0, #17
}
1a00322a:	4770      	bx	lr
1a00322c:	40050000 	.word	0x40050000

1a003230 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003230:	f100 0212 	add.w	r2, r0, #18
1a003234:	4b03      	ldr	r3, [pc, #12]	; (1a003244 <Chip_Clock_GetDividerDivisor+0x14>)
1a003236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00323a:	4b03      	ldr	r3, [pc, #12]	; (1a003248 <Chip_Clock_GetDividerDivisor+0x18>)
1a00323c:	5c18      	ldrb	r0, [r3, r0]
}
1a00323e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003242:	4770      	bx	lr
1a003244:	40050000 	.word	0x40050000
1a003248:	1a0057e0 	.word	0x1a0057e0

1a00324c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00324c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00324e:	2810      	cmp	r0, #16
1a003250:	d80a      	bhi.n	1a003268 <Chip_Clock_GetClockInputHz+0x1c>
1a003252:	e8df f000 	tbb	[pc, r0]
1a003256:	0b42      	.short	0x0b42
1a003258:	091f160d 	.word	0x091f160d
1a00325c:	2b282522 	.word	0x2b282522
1a003260:	322e0909 	.word	0x322e0909
1a003264:	3a36      	.short	0x3a36
1a003266:	3e          	.byte	0x3e
1a003267:	00          	.byte	0x00
	uint32_t rate = 0;
1a003268:	2000      	movs	r0, #0
1a00326a:	e038      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00326c:	481e      	ldr	r0, [pc, #120]	; (1a0032e8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00326e:	e036      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003270:	4b1e      	ldr	r3, [pc, #120]	; (1a0032ec <Chip_Clock_GetClockInputHz+0xa0>)
1a003272:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003276:	f003 0307 	and.w	r3, r3, #7
1a00327a:	2b04      	cmp	r3, #4
1a00327c:	d130      	bne.n	1a0032e0 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a00327e:	2000      	movs	r0, #0
1a003280:	e02d      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003282:	4b1a      	ldr	r3, [pc, #104]	; (1a0032ec <Chip_Clock_GetClockInputHz+0xa0>)
1a003284:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003288:	f003 0307 	and.w	r3, r3, #7
1a00328c:	2b04      	cmp	r3, #4
1a00328e:	d029      	beq.n	1a0032e4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003290:	4817      	ldr	r0, [pc, #92]	; (1a0032f0 <Chip_Clock_GetClockInputHz+0xa4>)
1a003292:	e024      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003294:	4b17      	ldr	r3, [pc, #92]	; (1a0032f4 <Chip_Clock_GetClockInputHz+0xa8>)
1a003296:	6818      	ldr	r0, [r3, #0]
		break;
1a003298:	e021      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00329a:	4b17      	ldr	r3, [pc, #92]	; (1a0032f8 <Chip_Clock_GetClockInputHz+0xac>)
1a00329c:	6818      	ldr	r0, [r3, #0]
		break;
1a00329e:	e01e      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0032a0:	4b16      	ldr	r3, [pc, #88]	; (1a0032fc <Chip_Clock_GetClockInputHz+0xb0>)
1a0032a2:	6818      	ldr	r0, [r3, #0]
		break;
1a0032a4:	e01b      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0032a6:	4b15      	ldr	r3, [pc, #84]	; (1a0032fc <Chip_Clock_GetClockInputHz+0xb0>)
1a0032a8:	6858      	ldr	r0, [r3, #4]
		break;
1a0032aa:	e018      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0032ac:	f000 f86a 	bl	1a003384 <Chip_Clock_GetMainPLLHz>
		break;
1a0032b0:	e015      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0032b2:	2100      	movs	r1, #0
1a0032b4:	f000 f89c 	bl	1a0033f0 <Chip_Clock_GetDivRate>
		break;
1a0032b8:	e011      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0032ba:	2101      	movs	r1, #1
1a0032bc:	f000 f898 	bl	1a0033f0 <Chip_Clock_GetDivRate>
		break;
1a0032c0:	e00d      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0032c2:	2102      	movs	r1, #2
1a0032c4:	f000 f894 	bl	1a0033f0 <Chip_Clock_GetDivRate>
		break;
1a0032c8:	e009      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0032ca:	2103      	movs	r1, #3
1a0032cc:	f000 f890 	bl	1a0033f0 <Chip_Clock_GetDivRate>
		break;
1a0032d0:	e005      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0032d2:	2104      	movs	r1, #4
1a0032d4:	f000 f88c 	bl	1a0033f0 <Chip_Clock_GetDivRate>
		break;
1a0032d8:	e001      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0032da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0032de:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0032e0:	4803      	ldr	r0, [pc, #12]	; (1a0032f0 <Chip_Clock_GetClockInputHz+0xa4>)
1a0032e2:	e7fc      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0032e4:	4806      	ldr	r0, [pc, #24]	; (1a003300 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0032e6:	e7fa      	b.n	1a0032de <Chip_Clock_GetClockInputHz+0x92>
1a0032e8:	00b71b00 	.word	0x00b71b00
1a0032ec:	40043000 	.word	0x40043000
1a0032f0:	017d7840 	.word	0x017d7840
1a0032f4:	1a005724 	.word	0x1a005724
1a0032f8:	1a005750 	.word	0x1a005750
1a0032fc:	10002fa0 	.word	0x10002fa0
1a003300:	02faf080 	.word	0x02faf080

1a003304 <Chip_Clock_CalcMainPLLValue>:
{
1a003304:	b538      	push	{r3, r4, r5, lr}
1a003306:	4605      	mov	r5, r0
1a003308:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00330a:	7908      	ldrb	r0, [r1, #4]
1a00330c:	f7ff ff9e 	bl	1a00324c <Chip_Clock_GetClockInputHz>
1a003310:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003312:	4b19      	ldr	r3, [pc, #100]	; (1a003378 <Chip_Clock_CalcMainPLLValue+0x74>)
1a003314:	442b      	add	r3, r5
1a003316:	4a19      	ldr	r2, [pc, #100]	; (1a00337c <Chip_Clock_CalcMainPLLValue+0x78>)
1a003318:	4293      	cmp	r3, r2
1a00331a:	d821      	bhi.n	1a003360 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00331c:	b318      	cbz	r0, 1a003366 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00331e:	2380      	movs	r3, #128	; 0x80
1a003320:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003322:	2300      	movs	r3, #0
1a003324:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003326:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003328:	fbb5 f3f0 	udiv	r3, r5, r0
1a00332c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00332e:	4a14      	ldr	r2, [pc, #80]	; (1a003380 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003330:	4295      	cmp	r5, r2
1a003332:	d903      	bls.n	1a00333c <Chip_Clock_CalcMainPLLValue+0x38>
1a003334:	fb03 f000 	mul.w	r0, r3, r0
1a003338:	42a8      	cmp	r0, r5
1a00333a:	d007      	beq.n	1a00334c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00333c:	4621      	mov	r1, r4
1a00333e:	4628      	mov	r0, r5
1a003340:	f7ff fe96 	bl	1a003070 <pll_get_frac>
		if (!ppll->nsel) {
1a003344:	68a3      	ldr	r3, [r4, #8]
1a003346:	b18b      	cbz	r3, 1a00336c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003348:	3b01      	subs	r3, #1
1a00334a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00334c:	6923      	ldr	r3, [r4, #16]
1a00334e:	b183      	cbz	r3, 1a003372 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003350:	68e2      	ldr	r2, [r4, #12]
1a003352:	b10a      	cbz	r2, 1a003358 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003354:	3a01      	subs	r2, #1
1a003356:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003358:	3b01      	subs	r3, #1
1a00335a:	6123      	str	r3, [r4, #16]
	return 0;
1a00335c:	2000      	movs	r0, #0
}
1a00335e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003364:	e7fb      	b.n	1a00335e <Chip_Clock_CalcMainPLLValue+0x5a>
1a003366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00336a:	e7f8      	b.n	1a00335e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00336c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003370:	e7f5      	b.n	1a00335e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003376:	e7f2      	b.n	1a00335e <Chip_Clock_CalcMainPLLValue+0x5a>
1a003378:	ff6b3a10 	.word	0xff6b3a10
1a00337c:	0b940510 	.word	0x0b940510
1a003380:	094c5eff 	.word	0x094c5eff

1a003384 <Chip_Clock_GetMainPLLHz>:
{
1a003384:	b530      	push	{r4, r5, lr}
1a003386:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003388:	4d17      	ldr	r5, [pc, #92]	; (1a0033e8 <Chip_Clock_GetMainPLLHz+0x64>)
1a00338a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00338c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003390:	f7ff ff5c 	bl	1a00324c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003394:	4b15      	ldr	r3, [pc, #84]	; (1a0033ec <Chip_Clock_GetMainPLLHz+0x68>)
1a003396:	681b      	ldr	r3, [r3, #0]
1a003398:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00339a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00339c:	f013 0f01 	tst.w	r3, #1
1a0033a0:	d01f      	beq.n	1a0033e2 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0033a2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0033a6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0033aa:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0033ae:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0033b2:	3301      	adds	r3, #1
	n = nsel + 1;
1a0033b4:	3201      	adds	r2, #1
	p = ptab[psel];
1a0033b6:	f10d 0c08 	add.w	ip, sp, #8
1a0033ba:	4461      	add	r1, ip
1a0033bc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0033c0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0033c4:	d108      	bne.n	1a0033d8 <Chip_Clock_GetMainPLLHz+0x54>
1a0033c6:	b93d      	cbnz	r5, 1a0033d8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0033c8:	0049      	lsls	r1, r1, #1
1a0033ca:	fbb3 f3f1 	udiv	r3, r3, r1
1a0033ce:	fbb0 f0f2 	udiv	r0, r0, r2
1a0033d2:	fb00 f003 	mul.w	r0, r0, r3
1a0033d6:	e005      	b.n	1a0033e4 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0033d8:	fbb0 f0f2 	udiv	r0, r0, r2
1a0033dc:	fb03 f000 	mul.w	r0, r3, r0
1a0033e0:	e000      	b.n	1a0033e4 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0033e2:	2000      	movs	r0, #0
}
1a0033e4:	b003      	add	sp, #12
1a0033e6:	bd30      	pop	{r4, r5, pc}
1a0033e8:	40050000 	.word	0x40050000
1a0033ec:	1a0057dc 	.word	0x1a0057dc

1a0033f0 <Chip_Clock_GetDivRate>:
{
1a0033f0:	b538      	push	{r3, r4, r5, lr}
1a0033f2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0033f4:	4608      	mov	r0, r1
1a0033f6:	f7ff ff0d 	bl	1a003214 <Chip_Clock_GetDividerSource>
1a0033fa:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0033fc:	4620      	mov	r0, r4
1a0033fe:	f7ff ff17 	bl	1a003230 <Chip_Clock_GetDividerDivisor>
1a003402:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003404:	4628      	mov	r0, r5
1a003406:	f7ff ff21 	bl	1a00324c <Chip_Clock_GetClockInputHz>
1a00340a:	3401      	adds	r4, #1
}
1a00340c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003410:	bd38      	pop	{r3, r4, r5, pc}
1a003412:	Address 0x000000001a003412 is out of bounds.


1a003414 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003414:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003416:	f100 0416 	add.w	r4, r0, #22
1a00341a:	00a4      	lsls	r4, r4, #2
1a00341c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003420:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003424:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003426:	281b      	cmp	r0, #27
1a003428:	d813      	bhi.n	1a003452 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00342a:	2911      	cmp	r1, #17
1a00342c:	d01a      	beq.n	1a003464 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00342e:	4d0e      	ldr	r5, [pc, #56]	; (1a003468 <Chip_Clock_SetBaseClock+0x54>)
1a003430:	4025      	ands	r5, r4

			if (autoblocken) {
1a003432:	b10a      	cbz	r2, 1a003438 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003434:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003438:	b10b      	cbz	r3, 1a00343e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00343a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00343e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003442:	3016      	adds	r0, #22
1a003444:	0080      	lsls	r0, r0, #2
1a003446:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00344a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00344e:	6045      	str	r5, [r0, #4]
1a003450:	e008      	b.n	1a003464 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003452:	f044 0401 	orr.w	r4, r4, #1
1a003456:	3016      	adds	r0, #22
1a003458:	0080      	lsls	r0, r0, #2
1a00345a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00345e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003462:	6044      	str	r4, [r0, #4]
	}
}
1a003464:	bc30      	pop	{r4, r5}
1a003466:	4770      	bx	lr
1a003468:	e0fff7fe 	.word	0xe0fff7fe

1a00346c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00346c:	281b      	cmp	r0, #27
1a00346e:	d80c      	bhi.n	1a00348a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003470:	3016      	adds	r0, #22
1a003472:	0080      	lsls	r0, r0, #2
1a003474:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003478:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00347c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00347e:	f010 0f01 	tst.w	r0, #1
1a003482:	d104      	bne.n	1a00348e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003484:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003488:	4770      	bx	lr
		return CLKINPUT_PD;
1a00348a:	2011      	movs	r0, #17
1a00348c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00348e:	2011      	movs	r0, #17
}
1a003490:	4770      	bx	lr

1a003492 <Chip_Clock_GetBaseClocktHz>:
{
1a003492:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003494:	f7ff ffea 	bl	1a00346c <Chip_Clock_GetBaseClock>
1a003498:	f7ff fed8 	bl	1a00324c <Chip_Clock_GetClockInputHz>
}
1a00349c:	bd08      	pop	{r3, pc}
1a00349e:	Address 0x000000001a00349e is out of bounds.


1a0034a0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0034a0:	b969      	cbnz	r1, 1a0034be <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0034a2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0034a4:	b10a      	cbz	r2, 1a0034aa <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0034a6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0034aa:	2b02      	cmp	r3, #2
1a0034ac:	d009      	beq.n	1a0034c2 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0034ae:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0034b2:	d209      	bcs.n	1a0034c8 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0034b4:	3020      	adds	r0, #32
1a0034b6:	4b07      	ldr	r3, [pc, #28]	; (1a0034d4 <Chip_Clock_EnableOpts+0x34>)
1a0034b8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0034bc:	4770      	bx	lr
		reg |= (1 << 1);
1a0034be:	2103      	movs	r1, #3
1a0034c0:	e7f0      	b.n	1a0034a4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0034c2:	f041 0120 	orr.w	r1, r1, #32
1a0034c6:	e7f2      	b.n	1a0034ae <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0034c8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0034cc:	4b02      	ldr	r3, [pc, #8]	; (1a0034d8 <Chip_Clock_EnableOpts+0x38>)
1a0034ce:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0034d2:	4770      	bx	lr
1a0034d4:	40051000 	.word	0x40051000
1a0034d8:	40052000 	.word	0x40052000

1a0034dc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0034dc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0034e0:	d208      	bcs.n	1a0034f4 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0034e2:	4a09      	ldr	r2, [pc, #36]	; (1a003508 <Chip_Clock_Enable+0x2c>)
1a0034e4:	3020      	adds	r0, #32
1a0034e6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0034ea:	f043 0301 	orr.w	r3, r3, #1
1a0034ee:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0034f2:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0034f4:	4a05      	ldr	r2, [pc, #20]	; (1a00350c <Chip_Clock_Enable+0x30>)
1a0034f6:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0034fa:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0034fe:	f043 0301 	orr.w	r3, r3, #1
1a003502:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003506:	4770      	bx	lr
1a003508:	40051000 	.word	0x40051000
1a00350c:	40052000 	.word	0x40052000

1a003510 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003510:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003512:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003516:	d309      	bcc.n	1a00352c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003518:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00351c:	4a0d      	ldr	r2, [pc, #52]	; (1a003554 <Chip_Clock_GetRate+0x44>)
1a00351e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003522:	f014 0f01 	tst.w	r4, #1
1a003526:	d107      	bne.n	1a003538 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003528:	2000      	movs	r0, #0
	}

	return rate;
}
1a00352a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00352c:	f100 0320 	add.w	r3, r0, #32
1a003530:	4a09      	ldr	r2, [pc, #36]	; (1a003558 <Chip_Clock_GetRate+0x48>)
1a003532:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003536:	e7f4      	b.n	1a003522 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003538:	f7ff fe20 	bl	1a00317c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00353c:	f7ff ffa9 	bl	1a003492 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003540:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003544:	d103      	bne.n	1a00354e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003546:	2301      	movs	r3, #1
		rate = rate / div;
1a003548:	fbb0 f0f3 	udiv	r0, r0, r3
1a00354c:	e7ed      	b.n	1a00352a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00354e:	2302      	movs	r3, #2
1a003550:	e7fa      	b.n	1a003548 <Chip_Clock_GetRate+0x38>
1a003552:	bf00      	nop
1a003554:	40052000 	.word	0x40052000
1a003558:	40051000 	.word	0x40051000

1a00355c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00355c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00355e:	2069      	movs	r0, #105	; 0x69
1a003560:	f7ff ffd6 	bl	1a003510 <Chip_Clock_GetRate>
1a003564:	4b01      	ldr	r3, [pc, #4]	; (1a00356c <SystemCoreClockUpdate+0x10>)
1a003566:	6018      	str	r0, [r3, #0]
}
1a003568:	bd08      	pop	{r3, pc}
1a00356a:	bf00      	nop
1a00356c:	1000315c 	.word	0x1000315c

1a003570 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003570:	b570      	push	{r4, r5, r6, lr}
1a003572:	b08a      	sub	sp, #40	; 0x28
1a003574:	4605      	mov	r5, r0
1a003576:	460e      	mov	r6, r1
1a003578:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00357a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00357e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003580:	2806      	cmp	r0, #6
1a003582:	d018      	beq.n	1a0035b6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003584:	2300      	movs	r3, #0
1a003586:	2201      	movs	r2, #1
1a003588:	4629      	mov	r1, r5
1a00358a:	2004      	movs	r0, #4
1a00358c:	f7ff ff42 	bl	1a003414 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003590:	4a49      	ldr	r2, [pc, #292]	; (1a0036b8 <Chip_SetupCoreClock+0x148>)
1a003592:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003594:	f043 0301 	orr.w	r3, r3, #1
1a003598:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00359a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00359e:	a901      	add	r1, sp, #4
1a0035a0:	4630      	mov	r0, r6
1a0035a2:	f7ff feaf 	bl	1a003304 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0035a6:	4b45      	ldr	r3, [pc, #276]	; (1a0036bc <Chip_SetupCoreClock+0x14c>)
1a0035a8:	429e      	cmp	r6, r3
1a0035aa:	d916      	bls.n	1a0035da <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0035ac:	9b01      	ldr	r3, [sp, #4]
1a0035ae:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0035b2:	d003      	beq.n	1a0035bc <Chip_SetupCoreClock+0x4c>
1a0035b4:	e7fe      	b.n	1a0035b4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0035b6:	f7ff fe07 	bl	1a0031c8 <Chip_Clock_EnableCrystal>
1a0035ba:	e7e3      	b.n	1a003584 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0035bc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0035c0:	d005      	beq.n	1a0035ce <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0035c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0035c6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0035c8:	2500      	movs	r5, #0
			direct = 1;
1a0035ca:	2601      	movs	r6, #1
1a0035cc:	e007      	b.n	1a0035de <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0035ce:	9b04      	ldr	r3, [sp, #16]
1a0035d0:	3301      	adds	r3, #1
1a0035d2:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0035d4:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0035d6:	2600      	movs	r6, #0
1a0035d8:	e001      	b.n	1a0035de <Chip_SetupCoreClock+0x6e>
1a0035da:	2500      	movs	r5, #0
1a0035dc:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0035de:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0035e2:	9b01      	ldr	r3, [sp, #4]
1a0035e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0035e8:	9a05      	ldr	r2, [sp, #20]
1a0035ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0035ee:	9a03      	ldr	r2, [sp, #12]
1a0035f0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0035f4:	9a04      	ldr	r2, [sp, #16]
1a0035f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0035fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0035fe:	4a2e      	ldr	r2, [pc, #184]	; (1a0036b8 <Chip_SetupCoreClock+0x148>)
1a003600:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003602:	4b2d      	ldr	r3, [pc, #180]	; (1a0036b8 <Chip_SetupCoreClock+0x148>)
1a003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003606:	f013 0f01 	tst.w	r3, #1
1a00360a:	d0fa      	beq.n	1a003602 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00360c:	2300      	movs	r3, #0
1a00360e:	2201      	movs	r2, #1
1a003610:	2109      	movs	r1, #9
1a003612:	2004      	movs	r0, #4
1a003614:	f7ff fefe 	bl	1a003414 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003618:	b1fe      	cbz	r6, 1a00365a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00361a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00361e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003620:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003622:	1e5a      	subs	r2, r3, #1
1a003624:	9209      	str	r2, [sp, #36]	; 0x24
1a003626:	2b00      	cmp	r3, #0
1a003628:	d1fa      	bne.n	1a003620 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00362a:	9b01      	ldr	r3, [sp, #4]
1a00362c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003630:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003632:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003636:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00363a:	9a05      	ldr	r2, [sp, #20]
1a00363c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003640:	9a03      	ldr	r2, [sp, #12]
1a003642:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003646:	9a04      	ldr	r2, [sp, #16]
1a003648:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00364c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003650:	4a19      	ldr	r2, [pc, #100]	; (1a0036b8 <Chip_SetupCoreClock+0x148>)
1a003652:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003654:	b36c      	cbz	r4, 1a0036b2 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003656:	2400      	movs	r4, #0
1a003658:	e029      	b.n	1a0036ae <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00365a:	2d00      	cmp	r5, #0
1a00365c:	d0fa      	beq.n	1a003654 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00365e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003662:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003664:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003666:	1e5a      	subs	r2, r3, #1
1a003668:	9209      	str	r2, [sp, #36]	; 0x24
1a00366a:	2b00      	cmp	r3, #0
1a00366c:	d1fa      	bne.n	1a003664 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00366e:	9b04      	ldr	r3, [sp, #16]
1a003670:	1e5a      	subs	r2, r3, #1
1a003672:	9204      	str	r2, [sp, #16]
1a003674:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003678:	9b01      	ldr	r3, [sp, #4]
1a00367a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00367e:	9905      	ldr	r1, [sp, #20]
1a003680:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003684:	9903      	ldr	r1, [sp, #12]
1a003686:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00368a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00368e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003692:	4a09      	ldr	r2, [pc, #36]	; (1a0036b8 <Chip_SetupCoreClock+0x148>)
1a003694:	6453      	str	r3, [r2, #68]	; 0x44
1a003696:	e7dd      	b.n	1a003654 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003698:	4809      	ldr	r0, [pc, #36]	; (1a0036c0 <Chip_SetupCoreClock+0x150>)
1a00369a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00369e:	78cb      	ldrb	r3, [r1, #3]
1a0036a0:	788a      	ldrb	r2, [r1, #2]
1a0036a2:	7849      	ldrb	r1, [r1, #1]
1a0036a4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0036a8:	f7ff feb4 	bl	1a003414 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0036ac:	3401      	adds	r4, #1
1a0036ae:	2c11      	cmp	r4, #17
1a0036b0:	d9f2      	bls.n	1a003698 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0036b2:	b00a      	add	sp, #40	; 0x28
1a0036b4:	bd70      	pop	{r4, r5, r6, pc}
1a0036b6:	bf00      	nop
1a0036b8:	40050000 	.word	0x40050000
1a0036bc:	068e7780 	.word	0x068e7780
1a0036c0:	1a005854 	.word	0x1a005854

1a0036c4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0036c4:	4770      	bx	lr
1a0036c6:	Address 0x000000001a0036c6 is out of bounds.


1a0036c8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0036c8:	4b03      	ldr	r3, [pc, #12]	; (1a0036d8 <Chip_SSP_GetClockIndex+0x10>)
1a0036ca:	4298      	cmp	r0, r3
1a0036cc:	d001      	beq.n	1a0036d2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0036ce:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0036d0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0036d2:	20a5      	movs	r0, #165	; 0xa5
1a0036d4:	4770      	bx	lr
1a0036d6:	bf00      	nop
1a0036d8:	400c5000 	.word	0x400c5000

1a0036dc <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0036dc:	4b04      	ldr	r3, [pc, #16]	; (1a0036f0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0036de:	4298      	cmp	r0, r3
1a0036e0:	d002      	beq.n	1a0036e8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0036e2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0036e6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0036e8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0036ec:	4770      	bx	lr
1a0036ee:	bf00      	nop
1a0036f0:	400c5000 	.word	0x400c5000

1a0036f4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0036f4:	6803      	ldr	r3, [r0, #0]
1a0036f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0036fa:	0209      	lsls	r1, r1, #8
1a0036fc:	b289      	uxth	r1, r1
1a0036fe:	4319      	orrs	r1, r3
1a003700:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003702:	6102      	str	r2, [r0, #16]
}
1a003704:	4770      	bx	lr

1a003706 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003706:	b570      	push	{r4, r5, r6, lr}
1a003708:	4606      	mov	r6, r0
1a00370a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00370c:	f7ff ffe6 	bl	1a0036dc <Chip_SSP_GetPeriphClockIndex>
1a003710:	f7ff fefe 	bl	1a003510 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003714:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00371a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00371c:	e000      	b.n	1a003720 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00371e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003720:	42ab      	cmp	r3, r5
1a003722:	d90b      	bls.n	1a00373c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003724:	1c4c      	adds	r4, r1, #1
1a003726:	fb02 f304 	mul.w	r3, r2, r4
1a00372a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00372e:	429d      	cmp	r5, r3
1a003730:	d2f6      	bcs.n	1a003720 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003732:	2cff      	cmp	r4, #255	; 0xff
1a003734:	d9f3      	bls.n	1a00371e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003736:	3202      	adds	r2, #2
				cr0_div = 0;
1a003738:	2100      	movs	r1, #0
1a00373a:	e7f1      	b.n	1a003720 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00373c:	4630      	mov	r0, r6
1a00373e:	f7ff ffd9 	bl	1a0036f4 <Chip_SSP_SetClockRate>
}
1a003742:	bd70      	pop	{r4, r5, r6, pc}

1a003744 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003744:	b510      	push	{r4, lr}
1a003746:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003748:	f7ff ffbe 	bl	1a0036c8 <Chip_SSP_GetClockIndex>
1a00374c:	f7ff fec6 	bl	1a0034dc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003750:	4620      	mov	r0, r4
1a003752:	f7ff ffc3 	bl	1a0036dc <Chip_SSP_GetPeriphClockIndex>
1a003756:	f7ff fec1 	bl	1a0034dc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00375a:	6863      	ldr	r3, [r4, #4]
1a00375c:	f023 0304 	bic.w	r3, r3, #4
1a003760:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003762:	6823      	ldr	r3, [r4, #0]
1a003764:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003768:	f043 0307 	orr.w	r3, r3, #7
1a00376c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00376e:	4902      	ldr	r1, [pc, #8]	; (1a003778 <Chip_SSP_Init+0x34>)
1a003770:	4620      	mov	r0, r4
1a003772:	f7ff ffc8 	bl	1a003706 <Chip_SSP_SetBitRate>
}
1a003776:	bd10      	pop	{r4, pc}
1a003778:	000186a0 	.word	0x000186a0

1a00377c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00377c:	2901      	cmp	r1, #1
1a00377e:	d000      	beq.n	1a003782 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003780:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003782:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003786:	0082      	lsls	r2, r0, #2
1a003788:	4b03      	ldr	r3, [pc, #12]	; (1a003798 <Chip_I2C_EventHandler+0x1c>)
1a00378a:	4413      	add	r3, r2
1a00378c:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a00378e:	7d13      	ldrb	r3, [r2, #20]
1a003790:	b2db      	uxtb	r3, r3
1a003792:	2b04      	cmp	r3, #4
1a003794:	d0fb      	beq.n	1a00378e <Chip_I2C_EventHandler+0x12>
1a003796:	e7f3      	b.n	1a003780 <Chip_I2C_EventHandler+0x4>
1a003798:	10000018 	.word	0x10000018

1a00379c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00379c:	b570      	push	{r4, r5, r6, lr}
1a00379e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0037a0:	4e06      	ldr	r6, [pc, #24]	; (1a0037bc <Chip_I2C_Init+0x20>)
1a0037a2:	00c4      	lsls	r4, r0, #3
1a0037a4:	1a22      	subs	r2, r4, r0
1a0037a6:	0093      	lsls	r3, r2, #2
1a0037a8:	4433      	add	r3, r6
1a0037aa:	8898      	ldrh	r0, [r3, #4]
1a0037ac:	f7ff fe96 	bl	1a0034dc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0037b0:	1b64      	subs	r4, r4, r5
1a0037b2:	00a3      	lsls	r3, r4, #2
1a0037b4:	58f3      	ldr	r3, [r6, r3]
1a0037b6:	226c      	movs	r2, #108	; 0x6c
1a0037b8:	619a      	str	r2, [r3, #24]
}
1a0037ba:	bd70      	pop	{r4, r5, r6, pc}
1a0037bc:	10000018 	.word	0x10000018

1a0037c0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0037c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0037c4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0037c6:	4e0b      	ldr	r6, [pc, #44]	; (1a0037f4 <Chip_I2C_SetClockRate+0x34>)
1a0037c8:	00c5      	lsls	r5, r0, #3
1a0037ca:	1a2b      	subs	r3, r5, r0
1a0037cc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0037d0:	eb06 0308 	add.w	r3, r6, r8
1a0037d4:	8898      	ldrh	r0, [r3, #4]
1a0037d6:	f7ff fe9b 	bl	1a003510 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0037da:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0037de:	f856 3008 	ldr.w	r3, [r6, r8]
1a0037e2:	0842      	lsrs	r2, r0, #1
1a0037e4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0037e6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0037ea:	691a      	ldr	r2, [r3, #16]
1a0037ec:	1a80      	subs	r0, r0, r2
1a0037ee:	6158      	str	r0, [r3, #20]
}
1a0037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0037f4:	10000018 	.word	0x10000018

1a0037f8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0037f8:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0037fa:	4a0b      	ldr	r2, [pc, #44]	; (1a003828 <SystemInit+0x30>)
1a0037fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00382c <SystemInit+0x34>)
1a0037fe:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003800:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003804:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003806:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00380a:	2b20      	cmp	r3, #32
1a00380c:	d004      	beq.n	1a003818 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00380e:	f7ff fa9f 	bl	1a002d50 <Board_SystemInit>
   Board_Init();
1a003812:	f7ff fa31 	bl	1a002c78 <Board_Init>
}
1a003816:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003818:	4a04      	ldr	r2, [pc, #16]	; (1a00382c <SystemInit+0x34>)
1a00381a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00381e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003822:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003826:	e7f2      	b.n	1a00380e <SystemInit+0x16>
1a003828:	1a000000 	.word	0x1a000000
1a00382c:	e000ed00 	.word	0xe000ed00

1a003830 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003830:	4b04      	ldr	r3, [pc, #16]	; (1a003844 <cyclesCounterInit+0x14>)
1a003832:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003834:	4a04      	ldr	r2, [pc, #16]	; (1a003848 <cyclesCounterInit+0x18>)
1a003836:	6813      	ldr	r3, [r2, #0]
1a003838:	f043 0301 	orr.w	r3, r3, #1
1a00383c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00383e:	2001      	movs	r0, #1
1a003840:	4770      	bx	lr
1a003842:	bf00      	nop
1a003844:	10000050 	.word	0x10000050
1a003848:	e0001000 	.word	0xe0001000
1a00384c:	ffffffff 	.word	0xffffffff

1a003850 <cyclesCounterToUs>:
 * llamado previamente a la funcion cyclesCounterInit (CLOCK_SPEED);
 * @param cycles la cantidad de ciclos.
 * @return el valor convertido a micro segundos.
 */
float cyclesCounterToUs( uint32_t cycles )
{
1a003850:	b538      	push	{r3, r4, r5, lr}
   float valueInMicroSeconds = 0.0;
   valueInMicroSeconds = (float)cycles/((float)ClockSpeed/1000000.0);
1a003852:	ee07 0a90 	vmov	s15, r0
1a003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a00385a:	ee17 0a90 	vmov	r0, s15
1a00385e:	f000 fdc3 	bl	1a0043e8 <__aeabi_f2d>
1a003862:	4604      	mov	r4, r0
1a003864:	460d      	mov	r5, r1
1a003866:	4b10      	ldr	r3, [pc, #64]	; (1a0038a8 <cyclesCounterToUs+0x58>)
1a003868:	6818      	ldr	r0, [r3, #0]
1a00386a:	ee07 0a90 	vmov	s15, r0
1a00386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a003872:	ee17 0a90 	vmov	r0, s15
1a003876:	f000 fdb7 	bl	1a0043e8 <__aeabi_f2d>
1a00387a:	a309      	add	r3, pc, #36	; (adr r3, 1a0038a0 <cyclesCounterToUs+0x50>)
1a00387c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003880:	f000 ff34 	bl	1a0046ec <__aeabi_ddiv>
1a003884:	4602      	mov	r2, r0
1a003886:	460b      	mov	r3, r1
1a003888:	4620      	mov	r0, r4
1a00388a:	4629      	mov	r1, r5
1a00388c:	f000 ff2e 	bl	1a0046ec <__aeabi_ddiv>
1a003890:	f001 f814 	bl	1a0048bc <__aeabi_d2f>
   return valueInMicroSeconds;
}
1a003894:	ee00 0a10 	vmov	s0, r0
1a003898:	bd38      	pop	{r3, r4, r5, pc}
1a00389a:	bf00      	nop
1a00389c:	f3af 8000 	nop.w
1a0038a0:	00000000 	.word	0x00000000
1a0038a4:	412e8480 	.word	0x412e8480
1a0038a8:	10000050 	.word	0x10000050

1a0038ac <uartProcessIRQ>:
{
1a0038ac:	b570      	push	{r4, r5, r6, lr}
1a0038ae:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0038b0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0038b4:	0093      	lsls	r3, r2, #2
1a0038b6:	4a1f      	ldr	r2, [pc, #124]	; (1a003934 <uartProcessIRQ+0x88>)
1a0038b8:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0038ba:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0038bc:	b2ed      	uxtb	r5, r5
1a0038be:	f015 0f01 	tst.w	r5, #1
1a0038c2:	d009      	beq.n	1a0038d8 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0038c4:	b920      	cbnz	r0, 1a0038d0 <uartProcessIRQ+0x24>
1a0038c6:	4b1c      	ldr	r3, [pc, #112]	; (1a003938 <uartProcessIRQ+0x8c>)
1a0038c8:	681b      	ldr	r3, [r3, #0]
1a0038ca:	b10b      	cbz	r3, 1a0038d0 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a0038cc:	2000      	movs	r0, #0
1a0038ce:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0038d0:	2c03      	cmp	r4, #3
1a0038d2:	d013      	beq.n	1a0038fc <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0038d4:	2c05      	cmp	r4, #5
1a0038d6:	d018      	beq.n	1a00390a <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0038d8:	f015 0f20 	tst.w	r5, #32
1a0038dc:	d00d      	beq.n	1a0038fa <uartProcessIRQ+0x4e>
	return pUART->IER;
1a0038de:	6873      	ldr	r3, [r6, #4]
1a0038e0:	f013 0f02 	tst.w	r3, #2
1a0038e4:	d009      	beq.n	1a0038fa <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0038e6:	b924      	cbnz	r4, 1a0038f2 <uartProcessIRQ+0x46>
1a0038e8:	4b14      	ldr	r3, [pc, #80]	; (1a00393c <uartProcessIRQ+0x90>)
1a0038ea:	681b      	ldr	r3, [r3, #0]
1a0038ec:	b10b      	cbz	r3, 1a0038f2 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a0038ee:	2000      	movs	r0, #0
1a0038f0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0038f2:	2c03      	cmp	r4, #3
1a0038f4:	d010      	beq.n	1a003918 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0038f6:	2c05      	cmp	r4, #5
1a0038f8:	d015      	beq.n	1a003926 <uartProcessIRQ+0x7a>
}
1a0038fa:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0038fc:	4b10      	ldr	r3, [pc, #64]	; (1a003940 <uartProcessIRQ+0x94>)
1a0038fe:	681b      	ldr	r3, [r3, #0]
1a003900:	2b00      	cmp	r3, #0
1a003902:	d0e7      	beq.n	1a0038d4 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a003904:	2000      	movs	r0, #0
1a003906:	4798      	blx	r3
1a003908:	e7e4      	b.n	1a0038d4 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00390a:	4b0e      	ldr	r3, [pc, #56]	; (1a003944 <uartProcessIRQ+0x98>)
1a00390c:	681b      	ldr	r3, [r3, #0]
1a00390e:	2b00      	cmp	r3, #0
1a003910:	d0e2      	beq.n	1a0038d8 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a003912:	2000      	movs	r0, #0
1a003914:	4798      	blx	r3
1a003916:	e7df      	b.n	1a0038d8 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003918:	4b0b      	ldr	r3, [pc, #44]	; (1a003948 <uartProcessIRQ+0x9c>)
1a00391a:	681b      	ldr	r3, [r3, #0]
1a00391c:	2b00      	cmp	r3, #0
1a00391e:	d0ea      	beq.n	1a0038f6 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a003920:	2000      	movs	r0, #0
1a003922:	4798      	blx	r3
1a003924:	e7e7      	b.n	1a0038f6 <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003926:	4b09      	ldr	r3, [pc, #36]	; (1a00394c <uartProcessIRQ+0xa0>)
1a003928:	681b      	ldr	r3, [r3, #0]
1a00392a:	2b00      	cmp	r3, #0
1a00392c:	d0e5      	beq.n	1a0038fa <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a00392e:	2000      	movs	r0, #0
1a003930:	4798      	blx	r3
}
1a003932:	e7e2      	b.n	1a0038fa <uartProcessIRQ+0x4e>
1a003934:	1a00589c 	.word	0x1a00589c
1a003938:	10002fa8 	.word	0x10002fa8
1a00393c:	10002fb4 	.word	0x10002fb4
1a003940:	10002fac 	.word	0x10002fac
1a003944:	10002fb0 	.word	0x10002fb0
1a003948:	10002fb8 	.word	0x10002fb8
1a00394c:	10002fbc 	.word	0x10002fbc

1a003950 <uartInterrupt>:
   if( enable ) {
1a003950:	b341      	cbz	r1, 1a0039a4 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a003952:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003956:	009a      	lsls	r2, r3, #2
1a003958:	4b1e      	ldr	r3, [pc, #120]	; (1a0039d4 <uartInterrupt+0x84>)
1a00395a:	4413      	add	r3, r2
1a00395c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003960:	2b00      	cmp	r3, #0
1a003962:	db18      	blt.n	1a003996 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003964:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003968:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a00396c:	22a0      	movs	r2, #160	; 0xa0
1a00396e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003972:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003976:	0082      	lsls	r2, r0, #2
1a003978:	4b16      	ldr	r3, [pc, #88]	; (1a0039d4 <uartInterrupt+0x84>)
1a00397a:	4413      	add	r3, r2
1a00397c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003980:	2b00      	cmp	r3, #0
1a003982:	db25      	blt.n	1a0039d0 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003984:	f003 011f 	and.w	r1, r3, #31
1a003988:	095b      	lsrs	r3, r3, #5
1a00398a:	2201      	movs	r2, #1
1a00398c:	408a      	lsls	r2, r1
1a00398e:	4912      	ldr	r1, [pc, #72]	; (1a0039d8 <uartInterrupt+0x88>)
1a003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003994:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003996:	f003 030f 	and.w	r3, r3, #15
1a00399a:	4a10      	ldr	r2, [pc, #64]	; (1a0039dc <uartInterrupt+0x8c>)
1a00399c:	441a      	add	r2, r3
1a00399e:	23a0      	movs	r3, #160	; 0xa0
1a0039a0:	7613      	strb	r3, [r2, #24]
1a0039a2:	e7e6      	b.n	1a003972 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a0039a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0039a8:	0082      	lsls	r2, r0, #2
1a0039aa:	4b0a      	ldr	r3, [pc, #40]	; (1a0039d4 <uartInterrupt+0x84>)
1a0039ac:	4413      	add	r3, r2
1a0039ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0039b2:	2b00      	cmp	r3, #0
1a0039b4:	db0c      	blt.n	1a0039d0 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0039b6:	f003 011f 	and.w	r1, r3, #31
1a0039ba:	095b      	lsrs	r3, r3, #5
1a0039bc:	2201      	movs	r2, #1
1a0039be:	408a      	lsls	r2, r1
1a0039c0:	3320      	adds	r3, #32
1a0039c2:	4905      	ldr	r1, [pc, #20]	; (1a0039d8 <uartInterrupt+0x88>)
1a0039c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0039c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0039cc:	f3bf 8f6f 	isb	sy
}
1a0039d0:	4770      	bx	lr
1a0039d2:	bf00      	nop
1a0039d4:	1a00589c 	.word	0x1a00589c
1a0039d8:	e000e100 	.word	0xe000e100
1a0039dc:	e000ecfc 	.word	0xe000ecfc

1a0039e0 <uartCallbackSet>:
   switch(event){
1a0039e0:	b111      	cbz	r1, 1a0039e8 <uartCallbackSet+0x8>
1a0039e2:	2901      	cmp	r1, #1
1a0039e4:	d01d      	beq.n	1a003a22 <uartCallbackSet+0x42>
1a0039e6:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a0039e8:	b182      	cbz	r2, 1a003a0c <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0039ea:	2801      	cmp	r0, #1
1a0039ec:	d90f      	bls.n	1a003a0e <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0039ee:	1ec3      	subs	r3, r0, #3
1a0039f0:	b2db      	uxtb	r3, r3
1a0039f2:	2b01      	cmp	r3, #1
1a0039f4:	d90e      	bls.n	1a003a14 <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a0039f6:	2805      	cmp	r0, #5
1a0039f8:	d00f      	beq.n	1a003a1a <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0039fa:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a0039fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003a00:	0082      	lsls	r2, r0, #2
1a003a02:	4913      	ldr	r1, [pc, #76]	; (1a003a50 <uartCallbackSet+0x70>)
1a003a04:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a003a06:	6851      	ldr	r1, [r2, #4]
1a003a08:	430b      	orrs	r3, r1
1a003a0a:	6053      	str	r3, [r2, #4]
}
1a003a0c:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a003a0e:	4b11      	ldr	r3, [pc, #68]	; (1a003a54 <uartCallbackSet+0x74>)
1a003a10:	601a      	str	r2, [r3, #0]
1a003a12:	e7ec      	b.n	1a0039ee <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a003a14:	4b10      	ldr	r3, [pc, #64]	; (1a003a58 <uartCallbackSet+0x78>)
1a003a16:	601a      	str	r2, [r3, #0]
1a003a18:	e7ed      	b.n	1a0039f6 <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a003a1a:	4b10      	ldr	r3, [pc, #64]	; (1a003a5c <uartCallbackSet+0x7c>)
1a003a1c:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003a1e:	2305      	movs	r3, #5
1a003a20:	e7ec      	b.n	1a0039fc <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a003a22:	2a00      	cmp	r2, #0
1a003a24:	d0f2      	beq.n	1a003a0c <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003a26:	2801      	cmp	r0, #1
1a003a28:	d907      	bls.n	1a003a3a <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003a2a:	1ec3      	subs	r3, r0, #3
1a003a2c:	b2db      	uxtb	r3, r3
1a003a2e:	2b01      	cmp	r3, #1
1a003a30:	d906      	bls.n	1a003a40 <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a003a32:	2805      	cmp	r0, #5
1a003a34:	d007      	beq.n	1a003a46 <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a003a36:	2302      	movs	r3, #2
1a003a38:	e7e0      	b.n	1a0039fc <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a003a3a:	4b09      	ldr	r3, [pc, #36]	; (1a003a60 <uartCallbackSet+0x80>)
1a003a3c:	601a      	str	r2, [r3, #0]
1a003a3e:	e7f4      	b.n	1a003a2a <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a003a40:	4b08      	ldr	r3, [pc, #32]	; (1a003a64 <uartCallbackSet+0x84>)
1a003a42:	601a      	str	r2, [r3, #0]
1a003a44:	e7f5      	b.n	1a003a32 <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a003a46:	4b08      	ldr	r3, [pc, #32]	; (1a003a68 <uartCallbackSet+0x88>)
1a003a48:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a003a4a:	2302      	movs	r3, #2
1a003a4c:	e7d6      	b.n	1a0039fc <uartCallbackSet+0x1c>
1a003a4e:	bf00      	nop
1a003a50:	1a00589c 	.word	0x1a00589c
1a003a54:	10002fa8 	.word	0x10002fa8
1a003a58:	10002fac 	.word	0x10002fac
1a003a5c:	10002fb0 	.word	0x10002fb0
1a003a60:	10002fb4 	.word	0x10002fb4
1a003a64:	10002fb8 	.word	0x10002fb8
1a003a68:	10002fbc 	.word	0x10002fbc

1a003a6c <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003a6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003a70:	0083      	lsls	r3, r0, #2
1a003a72:	4a03      	ldr	r2, [pc, #12]	; (1a003a80 <uartTxReady+0x14>)
1a003a74:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003a76:	6958      	ldr	r0, [r3, #20]
}
1a003a78:	f000 0020 	and.w	r0, r0, #32
1a003a7c:	4770      	bx	lr
1a003a7e:	bf00      	nop
1a003a80:	1a00589c 	.word	0x1a00589c

1a003a84 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a003a84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003a88:	0083      	lsls	r3, r0, #2
1a003a8a:	4a02      	ldr	r2, [pc, #8]	; (1a003a94 <uartRxRead+0x10>)
1a003a8c:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003a8e:	6818      	ldr	r0, [r3, #0]
}
1a003a90:	b2c0      	uxtb	r0, r0
1a003a92:	4770      	bx	lr
1a003a94:	1a00589c 	.word	0x1a00589c

1a003a98 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003a98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003a9c:	0083      	lsls	r3, r0, #2
1a003a9e:	4a02      	ldr	r2, [pc, #8]	; (1a003aa8 <uartTxWrite+0x10>)
1a003aa0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003aa2:	6019      	str	r1, [r3, #0]
}
1a003aa4:	4770      	bx	lr
1a003aa6:	bf00      	nop
1a003aa8:	1a00589c 	.word	0x1a00589c

1a003aac <uartInit>:
{
1a003aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ab0:	4680      	mov	r8, r0
1a003ab2:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003ab4:	4c19      	ldr	r4, [pc, #100]	; (1a003b1c <uartInit+0x70>)
1a003ab6:	0045      	lsls	r5, r0, #1
1a003ab8:	182a      	adds	r2, r5, r0
1a003aba:	0093      	lsls	r3, r2, #2
1a003abc:	18e6      	adds	r6, r4, r3
1a003abe:	58e7      	ldr	r7, [r4, r3]
1a003ac0:	4638      	mov	r0, r7
1a003ac2:	f7ff f961 	bl	1a002d88 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003ac6:	4649      	mov	r1, r9
1a003ac8:	4638      	mov	r0, r7
1a003aca:	f7ff f987 	bl	1a002ddc <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003ace:	2307      	movs	r3, #7
1a003ad0:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003ad2:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003ad4:	2301      	movs	r3, #1
1a003ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003ad8:	7930      	ldrb	r0, [r6, #4]
1a003ada:	7973      	ldrb	r3, [r6, #5]
1a003adc:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003ade:	f042 0218 	orr.w	r2, r2, #24
1a003ae2:	490f      	ldr	r1, [pc, #60]	; (1a003b20 <uartInit+0x74>)
1a003ae4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003aec:	79f0      	ldrb	r0, [r6, #7]
1a003aee:	7a33      	ldrb	r3, [r6, #8]
1a003af0:	7a72      	ldrb	r2, [r6, #9]
1a003af2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003af6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a003afe:	f1b8 0f01 	cmp.w	r8, #1
1a003b02:	d001      	beq.n	1a003b08 <uartInit+0x5c>
}
1a003b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003b08:	4a06      	ldr	r2, [pc, #24]	; (1a003b24 <uartInit+0x78>)
1a003b0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003b0c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003b10:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003b12:	221a      	movs	r2, #26
1a003b14:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003b18:	e7f4      	b.n	1a003b04 <uartInit+0x58>
1a003b1a:	bf00      	nop
1a003b1c:	1a00589c 	.word	0x1a00589c
1a003b20:	40086000 	.word	0x40086000
1a003b24:	40081000 	.word	0x40081000

1a003b28 <uartWriteByte>:
{
1a003b28:	b538      	push	{r3, r4, r5, lr}
1a003b2a:	4604      	mov	r4, r0
1a003b2c:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a003b2e:	4620      	mov	r0, r4
1a003b30:	f7ff ff9c 	bl	1a003a6c <uartTxReady>
1a003b34:	2800      	cmp	r0, #0
1a003b36:	d0fa      	beq.n	1a003b2e <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003b38:	4629      	mov	r1, r5
1a003b3a:	4620      	mov	r0, r4
1a003b3c:	f7ff ffac 	bl	1a003a98 <uartTxWrite>
}
1a003b40:	bd38      	pop	{r3, r4, r5, pc}

1a003b42 <uartWriteString>:
{
1a003b42:	b538      	push	{r3, r4, r5, lr}
1a003b44:	4605      	mov	r5, r0
1a003b46:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003b48:	e003      	b.n	1a003b52 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003b4a:	4628      	mov	r0, r5
1a003b4c:	f7ff ffec 	bl	1a003b28 <uartWriteByte>
      str++;
1a003b50:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003b52:	7821      	ldrb	r1, [r4, #0]
1a003b54:	2900      	cmp	r1, #0
1a003b56:	d1f8      	bne.n	1a003b4a <uartWriteString+0x8>
}
1a003b58:	bd38      	pop	{r3, r4, r5, pc}

1a003b5a <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003b5a:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003b5c:	2003      	movs	r0, #3
1a003b5e:	f7ff fea5 	bl	1a0038ac <uartProcessIRQ>
}
1a003b62:	bd08      	pop	{r3, pc}

1a003b64 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003b64:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003b66:	2005      	movs	r0, #5
1a003b68:	f7ff fea0 	bl	1a0038ac <uartProcessIRQ>
}
1a003b6c:	bd08      	pop	{r3, pc}
1a003b6e:	Address 0x000000001a003b6e is out of bounds.


1a003b70 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a003b70:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003b74:	4908      	ldr	r1, [pc, #32]	; (1a003b98 <tickerCallback+0x28>)
1a003b76:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003b7a:	f112 0b01 	adds.w	fp, r2, #1
1a003b7e:	f143 0c00 	adc.w	ip, r3, #0
1a003b82:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003b86:	4b05      	ldr	r3, [pc, #20]	; (1a003b9c <tickerCallback+0x2c>)
1a003b88:	681b      	ldr	r3, [r3, #0]
1a003b8a:	b113      	cbz	r3, 1a003b92 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003b8c:	4a04      	ldr	r2, [pc, #16]	; (1a003ba0 <tickerCallback+0x30>)
1a003b8e:	6810      	ldr	r0, [r2, #0]
1a003b90:	4798      	blx	r3
   }
}
1a003b92:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003b96:	bf00      	nop
1a003b98:	10002fc8 	.word	0x10002fc8
1a003b9c:	10002fd0 	.word	0x10002fd0
1a003ba0:	10002fc0 	.word	0x10002fc0

1a003ba4 <tickInit>:
{
1a003ba4:	b510      	push	{r4, lr}
1a003ba6:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003ba8:	4b0e      	ldr	r3, [pc, #56]	; (1a003be4 <tickInit+0x40>)
1a003baa:	9301      	str	r3, [sp, #4]
1a003bac:	4b0e      	ldr	r3, [pc, #56]	; (1a003be8 <tickInit+0x44>)
1a003bae:	9300      	str	r3, [sp, #0]
1a003bb0:	2300      	movs	r3, #0
1a003bb2:	2201      	movs	r2, #1
1a003bb4:	4601      	mov	r1, r0
1a003bb6:	480d      	ldr	r0, [pc, #52]	; (1a003bec <tickInit+0x48>)
1a003bb8:	f7fe fc40 	bl	1a00243c <xTimerCreateStatic>
         if (h == NULL)
1a003bbc:	b178      	cbz	r0, 1a003bde <tickInit+0x3a>
1a003bbe:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a003bc0:	f7fd fff2 	bl	1a001ba8 <xTaskGetTickCount>
1a003bc4:	2300      	movs	r3, #0
1a003bc6:	9300      	str	r3, [sp, #0]
1a003bc8:	4602      	mov	r2, r0
1a003bca:	2101      	movs	r1, #1
1a003bcc:	4620      	mov	r0, r4
1a003bce:	f7fe fc5b 	bl	1a002488 <xTimerGenericCommand>
1a003bd2:	2801      	cmp	r0, #1
1a003bd4:	bf14      	ite	ne
1a003bd6:	2000      	movne	r0, #0
1a003bd8:	2001      	moveq	r0, #1
}
1a003bda:	b002      	add	sp, #8
1a003bdc:	bd10      	pop	{r4, pc}
            return 0;
1a003bde:	2000      	movs	r0, #0
1a003be0:	e7fb      	b.n	1a003bda <tickInit+0x36>
1a003be2:	bf00      	nop
1a003be4:	10002fd4 	.word	0x10002fd4
1a003be8:	1a003b71 	.word	0x1a003b71
1a003bec:	1a0058e4 	.word	0x1a0058e4

1a003bf0 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a003bf0:	e7fe      	b.n	1a003bf0 <errorOcurred>

1a003bf2 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a003bf2:	4770      	bx	lr

1a003bf4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003bf4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003bf6:	2400      	movs	r4, #0
1a003bf8:	e001      	b.n	1a003bfe <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003bfa:	3401      	adds	r4, #1
1a003bfc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003bfe:	2c03      	cmp	r4, #3
1a003c00:	d812      	bhi.n	1a003c28 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a003c02:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003c04:	4b09      	ldr	r3, [pc, #36]	; (1a003c2c <TIMER0_IRQHandler+0x38>)
1a003c06:	681a      	ldr	r2, [r3, #0]
1a003c08:	f004 010f 	and.w	r1, r4, #15
1a003c0c:	2301      	movs	r3, #1
1a003c0e:	408b      	lsls	r3, r1
1a003c10:	421a      	tst	r2, r3
1a003c12:	d0f2      	beq.n	1a003bfa <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003c14:	4b06      	ldr	r3, [pc, #24]	; (1a003c30 <TIMER0_IRQHandler+0x3c>)
1a003c16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a003c1a:	2000      	movs	r0, #0
1a003c1c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003c1e:	2301      	movs	r3, #1
1a003c20:	40ab      	lsls	r3, r5
1a003c22:	4a02      	ldr	r2, [pc, #8]	; (1a003c2c <TIMER0_IRQHandler+0x38>)
1a003c24:	6013      	str	r3, [r2, #0]
1a003c26:	e7e8      	b.n	1a003bfa <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a003c28:	bd38      	pop	{r3, r4, r5, pc}
1a003c2a:	bf00      	nop
1a003c2c:	40084000 	.word	0x40084000
1a003c30:	10000054 	.word	0x10000054

1a003c34 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a003c34:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c36:	2400      	movs	r4, #0
1a003c38:	e001      	b.n	1a003c3e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003c3a:	3401      	adds	r4, #1
1a003c3c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c3e:	2c03      	cmp	r4, #3
1a003c40:	d813      	bhi.n	1a003c6a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a003c42:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003c44:	4b09      	ldr	r3, [pc, #36]	; (1a003c6c <TIMER1_IRQHandler+0x38>)
1a003c46:	681a      	ldr	r2, [r3, #0]
1a003c48:	f004 010f 	and.w	r1, r4, #15
1a003c4c:	2301      	movs	r3, #1
1a003c4e:	408b      	lsls	r3, r1
1a003c50:	421a      	tst	r2, r3
1a003c52:	d0f2      	beq.n	1a003c3a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003c54:	1d23      	adds	r3, r4, #4
1a003c56:	4a06      	ldr	r2, [pc, #24]	; (1a003c70 <TIMER1_IRQHandler+0x3c>)
1a003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003c5c:	2000      	movs	r0, #0
1a003c5e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003c60:	2301      	movs	r3, #1
1a003c62:	40ab      	lsls	r3, r5
1a003c64:	4a01      	ldr	r2, [pc, #4]	; (1a003c6c <TIMER1_IRQHandler+0x38>)
1a003c66:	6013      	str	r3, [r2, #0]
1a003c68:	e7e7      	b.n	1a003c3a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003c6a:	bd38      	pop	{r3, r4, r5, pc}
1a003c6c:	40085000 	.word	0x40085000
1a003c70:	10000054 	.word	0x10000054

1a003c74 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003c74:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c76:	2400      	movs	r4, #0
1a003c78:	e001      	b.n	1a003c7e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003c7a:	3401      	adds	r4, #1
1a003c7c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003c7e:	2c03      	cmp	r4, #3
1a003c80:	d814      	bhi.n	1a003cac <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a003c82:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003c84:	4b0a      	ldr	r3, [pc, #40]	; (1a003cb0 <TIMER2_IRQHandler+0x3c>)
1a003c86:	681a      	ldr	r2, [r3, #0]
1a003c88:	f004 010f 	and.w	r1, r4, #15
1a003c8c:	2301      	movs	r3, #1
1a003c8e:	408b      	lsls	r3, r1
1a003c90:	421a      	tst	r2, r3
1a003c92:	d0f2      	beq.n	1a003c7a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003c94:	f104 0308 	add.w	r3, r4, #8
1a003c98:	4a06      	ldr	r2, [pc, #24]	; (1a003cb4 <TIMER2_IRQHandler+0x40>)
1a003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003c9e:	2000      	movs	r0, #0
1a003ca0:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003ca2:	2301      	movs	r3, #1
1a003ca4:	40ab      	lsls	r3, r5
1a003ca6:	4a02      	ldr	r2, [pc, #8]	; (1a003cb0 <TIMER2_IRQHandler+0x3c>)
1a003ca8:	6013      	str	r3, [r2, #0]
1a003caa:	e7e6      	b.n	1a003c7a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003cac:	bd38      	pop	{r3, r4, r5, pc}
1a003cae:	bf00      	nop
1a003cb0:	400c3000 	.word	0x400c3000
1a003cb4:	10000054 	.word	0x10000054

1a003cb8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003cb8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003cba:	2400      	movs	r4, #0
1a003cbc:	e001      	b.n	1a003cc2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003cbe:	3401      	adds	r4, #1
1a003cc0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003cc2:	2c03      	cmp	r4, #3
1a003cc4:	d814      	bhi.n	1a003cf0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a003cc6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003cc8:	4b0a      	ldr	r3, [pc, #40]	; (1a003cf4 <TIMER3_IRQHandler+0x3c>)
1a003cca:	681a      	ldr	r2, [r3, #0]
1a003ccc:	f004 010f 	and.w	r1, r4, #15
1a003cd0:	2301      	movs	r3, #1
1a003cd2:	408b      	lsls	r3, r1
1a003cd4:	421a      	tst	r2, r3
1a003cd6:	d0f2      	beq.n	1a003cbe <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003cd8:	f104 030c 	add.w	r3, r4, #12
1a003cdc:	4a06      	ldr	r2, [pc, #24]	; (1a003cf8 <TIMER3_IRQHandler+0x40>)
1a003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003ce2:	2000      	movs	r0, #0
1a003ce4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003ce6:	2301      	movs	r3, #1
1a003ce8:	40ab      	lsls	r3, r5
1a003cea:	4a02      	ldr	r2, [pc, #8]	; (1a003cf4 <TIMER3_IRQHandler+0x3c>)
1a003cec:	6013      	str	r3, [r2, #0]
1a003cee:	e7e6      	b.n	1a003cbe <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003cf0:	bd38      	pop	{r3, r4, r5, pc}
1a003cf2:	bf00      	nop
1a003cf4:	400c4000 	.word	0x400c4000
1a003cf8:	10000054 	.word	0x10000054

1a003cfc <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003cfc:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003cfe:	4d0b      	ldr	r5, [pc, #44]	; (1a003d2c <gpioObtainPinInit+0x30>)
1a003d00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003d04:	182c      	adds	r4, r5, r0
1a003d06:	5628      	ldrsb	r0, [r5, r0]
1a003d08:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003d0a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003d0e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003d10:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003d14:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003d16:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003d1a:	9b02      	ldr	r3, [sp, #8]
1a003d1c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003d1e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003d22:	9b03      	ldr	r3, [sp, #12]
1a003d24:	701a      	strb	r2, [r3, #0]
}
1a003d26:	bc30      	pop	{r4, r5}
1a003d28:	4770      	bx	lr
1a003d2a:	bf00      	nop
1a003d2c:	1a0058f0 	.word	0x1a0058f0

1a003d30 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a003d30:	b570      	push	{r4, r5, r6, lr}
1a003d32:	b084      	sub	sp, #16
1a003d34:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003d36:	2300      	movs	r3, #0
1a003d38:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003d3c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003d40:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003d44:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003d48:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003d4c:	f10d 030b 	add.w	r3, sp, #11
1a003d50:	9301      	str	r3, [sp, #4]
1a003d52:	ab03      	add	r3, sp, #12
1a003d54:	9300      	str	r3, [sp, #0]
1a003d56:	f10d 030d 	add.w	r3, sp, #13
1a003d5a:	f10d 020e 	add.w	r2, sp, #14
1a003d5e:	f10d 010f 	add.w	r1, sp, #15
1a003d62:	f7ff ffcb 	bl	1a003cfc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003d66:	2c05      	cmp	r4, #5
1a003d68:	f200 80a5 	bhi.w	1a003eb6 <gpioInit+0x186>
1a003d6c:	e8df f004 	tbb	[pc, r4]
1a003d70:	45278109 	.word	0x45278109
1a003d74:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003d76:	4851      	ldr	r0, [pc, #324]	; (1a003ebc <gpioInit+0x18c>)
1a003d78:	f7ff fca4 	bl	1a0036c4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003d7c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003d7e:	b004      	add	sp, #16
1a003d80:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003d82:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003d86:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003d8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003d8e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003d92:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003d96:	494a      	ldr	r1, [pc, #296]	; (1a003ec0 <gpioInit+0x190>)
1a003d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003d9c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003da0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003da4:	2001      	movs	r0, #1
1a003da6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003daa:	4c44      	ldr	r4, [pc, #272]	; (1a003ebc <gpioInit+0x18c>)
1a003dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003db0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003db4:	ea22 0201 	bic.w	r2, r2, r1
1a003db8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003dbc:	e7df      	b.n	1a003d7e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003dbe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dc2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003dc6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003dca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003dce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003dd2:	493b      	ldr	r1, [pc, #236]	; (1a003ec0 <gpioInit+0x190>)
1a003dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003dd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ddc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003de0:	2001      	movs	r0, #1
1a003de2:	fa00 f102 	lsl.w	r1, r0, r2
1a003de6:	4c35      	ldr	r4, [pc, #212]	; (1a003ebc <gpioInit+0x18c>)
1a003de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003dec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003df0:	ea22 0201 	bic.w	r2, r2, r1
1a003df4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003df8:	e7c1      	b.n	1a003d7e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003dfa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003dfe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003e02:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e06:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003e0a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e0e:	492c      	ldr	r1, [pc, #176]	; (1a003ec0 <gpioInit+0x190>)
1a003e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003e14:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003e18:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e1c:	2001      	movs	r0, #1
1a003e1e:	fa00 f102 	lsl.w	r1, r0, r2
1a003e22:	4c26      	ldr	r4, [pc, #152]	; (1a003ebc <gpioInit+0x18c>)
1a003e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003e28:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003e2c:	ea22 0201 	bic.w	r2, r2, r1
1a003e30:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003e34:	e7a3      	b.n	1a003d7e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003e36:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003e3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003e3e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e42:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003e46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e4a:	491d      	ldr	r1, [pc, #116]	; (1a003ec0 <gpioInit+0x190>)
1a003e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003e50:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003e54:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e58:	2001      	movs	r0, #1
1a003e5a:	fa00 f102 	lsl.w	r1, r0, r2
1a003e5e:	4c17      	ldr	r4, [pc, #92]	; (1a003ebc <gpioInit+0x18c>)
1a003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003e64:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003e68:	ea22 0201 	bic.w	r2, r2, r1
1a003e6c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003e70:	e785      	b.n	1a003d7e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003e72:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003e76:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003e7a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003e7e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003e82:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003e86:	490e      	ldr	r1, [pc, #56]	; (1a003ec0 <gpioInit+0x190>)
1a003e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003e8c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003e90:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003e94:	2001      	movs	r0, #1
1a003e96:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003e9a:	4b08      	ldr	r3, [pc, #32]	; (1a003ebc <gpioInit+0x18c>)
1a003e9c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003ea0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003ea4:	4331      	orrs	r1, r6
1a003ea6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003eaa:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003eac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003eb0:	2100      	movs	r1, #0
1a003eb2:	5499      	strb	r1, [r3, r2]
1a003eb4:	e763      	b.n	1a003d7e <gpioInit+0x4e>
      ret_val = 0;
1a003eb6:	2000      	movs	r0, #0
1a003eb8:	e761      	b.n	1a003d7e <gpioInit+0x4e>
1a003eba:	bf00      	nop
1a003ebc:	400f4000 	.word	0x400f4000
1a003ec0:	40086000 	.word	0x40086000

1a003ec4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003ec4:	b510      	push	{r4, lr}
1a003ec6:	b084      	sub	sp, #16
1a003ec8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003eca:	2300      	movs	r3, #0
1a003ecc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003ed0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003ed4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003ed8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003edc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003ee0:	f10d 030b 	add.w	r3, sp, #11
1a003ee4:	9301      	str	r3, [sp, #4]
1a003ee6:	ab03      	add	r3, sp, #12
1a003ee8:	9300      	str	r3, [sp, #0]
1a003eea:	f10d 030d 	add.w	r3, sp, #13
1a003eee:	f10d 020e 	add.w	r2, sp, #14
1a003ef2:	f10d 010f 	add.w	r1, sp, #15
1a003ef6:	f7ff ff01 	bl	1a003cfc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003efa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003efe:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003f02:	3400      	adds	r4, #0
1a003f04:	bf18      	it	ne
1a003f06:	2401      	movne	r4, #1
1a003f08:	015b      	lsls	r3, r3, #5
1a003f0a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003f0e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003f12:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003f14:	2001      	movs	r0, #1
1a003f16:	b004      	add	sp, #16
1a003f18:	bd10      	pop	{r4, pc}

1a003f1a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a003f1a:	b500      	push	{lr}
1a003f1c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003f1e:	2300      	movs	r3, #0
1a003f20:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003f24:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003f28:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003f2c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003f30:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003f34:	f10d 030b 	add.w	r3, sp, #11
1a003f38:	9301      	str	r3, [sp, #4]
1a003f3a:	ab03      	add	r3, sp, #12
1a003f3c:	9300      	str	r3, [sp, #0]
1a003f3e:	f10d 030d 	add.w	r3, sp, #13
1a003f42:	f10d 020e 	add.w	r2, sp, #14
1a003f46:	f10d 010f 	add.w	r1, sp, #15
1a003f4a:	f7ff fed7 	bl	1a003cfc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003f4e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003f52:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003f56:	015b      	lsls	r3, r3, #5
1a003f58:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003f5c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003f60:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a003f62:	3000      	adds	r0, #0
1a003f64:	bf18      	it	ne
1a003f66:	2001      	movne	r0, #1
1a003f68:	b005      	add	sp, #20
1a003f6a:	f85d fb04 	ldr.w	pc, [sp], #4

1a003f6e <gpioToggle>:
{
1a003f6e:	b510      	push	{r4, lr}
1a003f70:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a003f72:	f7ff ffd2 	bl	1a003f1a <gpioRead>
1a003f76:	fab0 f180 	clz	r1, r0
1a003f7a:	0949      	lsrs	r1, r1, #5
1a003f7c:	4620      	mov	r0, r4
1a003f7e:	f7ff ffa1 	bl	1a003ec4 <gpioWrite>
}
1a003f82:	bd10      	pop	{r4, pc}

1a003f84 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003f84:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003f86:	4b04      	ldr	r3, [pc, #16]	; (1a003f98 <USB0_IRQHandler+0x14>)
1a003f88:	681b      	ldr	r3, [r3, #0]
1a003f8a:	681b      	ldr	r3, [r3, #0]
1a003f8c:	68db      	ldr	r3, [r3, #12]
1a003f8e:	4a03      	ldr	r2, [pc, #12]	; (1a003f9c <USB0_IRQHandler+0x18>)
1a003f90:	6810      	ldr	r0, [r2, #0]
1a003f92:	4798      	blx	r3
}
1a003f94:	bd08      	pop	{r3, pc}
1a003f96:	bf00      	nop
1a003f98:	10003160 	.word	0x10003160
1a003f9c:	10003004 	.word	0x10003004

1a003fa0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003fa0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003fa2:	f7ff fadb 	bl	1a00355c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003fa6:	4b3a      	ldr	r3, [pc, #232]	; (1a004090 <boardInit+0xf0>)
1a003fa8:	6818      	ldr	r0, [r3, #0]
1a003faa:	f7ff fc41 	bl	1a003830 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a003fae:	2001      	movs	r0, #1
1a003fb0:	2100      	movs	r1, #0
1a003fb2:	f7ff fdf7 	bl	1a003ba4 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003fb6:	2105      	movs	r1, #5
1a003fb8:	2000      	movs	r0, #0
1a003fba:	f7ff feb9 	bl	1a003d30 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003fbe:	2100      	movs	r1, #0
1a003fc0:	2026      	movs	r0, #38	; 0x26
1a003fc2:	f7ff feb5 	bl	1a003d30 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003fc6:	2100      	movs	r1, #0
1a003fc8:	2027      	movs	r0, #39	; 0x27
1a003fca:	f7ff feb1 	bl	1a003d30 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a003fce:	2100      	movs	r1, #0
1a003fd0:	2028      	movs	r0, #40	; 0x28
1a003fd2:	f7ff fead 	bl	1a003d30 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003fd6:	2100      	movs	r1, #0
1a003fd8:	2029      	movs	r0, #41	; 0x29
1a003fda:	f7ff fea9 	bl	1a003d30 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a003fde:	2101      	movs	r1, #1
1a003fe0:	202a      	movs	r0, #42	; 0x2a
1a003fe2:	f7ff fea5 	bl	1a003d30 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003fe6:	2101      	movs	r1, #1
1a003fe8:	202b      	movs	r0, #43	; 0x2b
1a003fea:	f7ff fea1 	bl	1a003d30 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a003fee:	2101      	movs	r1, #1
1a003ff0:	202c      	movs	r0, #44	; 0x2c
1a003ff2:	f7ff fe9d 	bl	1a003d30 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003ff6:	2101      	movs	r1, #1
1a003ff8:	202d      	movs	r0, #45	; 0x2d
1a003ffa:	f7ff fe99 	bl	1a003d30 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a003ffe:	2101      	movs	r1, #1
1a004000:	202e      	movs	r0, #46	; 0x2e
1a004002:	f7ff fe95 	bl	1a003d30 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a004006:	2101      	movs	r1, #1
1a004008:	202f      	movs	r0, #47	; 0x2f
1a00400a:	f7ff fe91 	bl	1a003d30 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00400e:	2100      	movs	r1, #0
1a004010:	2030      	movs	r0, #48	; 0x30
1a004012:	f7ff fe8d 	bl	1a003d30 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a004016:	2100      	movs	r1, #0
1a004018:	2031      	movs	r0, #49	; 0x31
1a00401a:	f7ff fe89 	bl	1a003d30 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00401e:	2100      	movs	r1, #0
1a004020:	2032      	movs	r0, #50	; 0x32
1a004022:	f7ff fe85 	bl	1a003d30 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a004026:	2100      	movs	r1, #0
1a004028:	2033      	movs	r0, #51	; 0x33
1a00402a:	f7ff fe81 	bl	1a003d30 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00402e:	2100      	movs	r1, #0
1a004030:	2034      	movs	r0, #52	; 0x34
1a004032:	f7ff fe7d 	bl	1a003d30 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a004036:	2100      	movs	r1, #0
1a004038:	2035      	movs	r0, #53	; 0x35
1a00403a:	f7ff fe79 	bl	1a003d30 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00403e:	2100      	movs	r1, #0
1a004040:	2036      	movs	r0, #54	; 0x36
1a004042:	f7ff fe75 	bl	1a003d30 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a004046:	2100      	movs	r1, #0
1a004048:	2037      	movs	r0, #55	; 0x37
1a00404a:	f7ff fe71 	bl	1a003d30 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00404e:	2101      	movs	r1, #1
1a004050:	2038      	movs	r0, #56	; 0x38
1a004052:	f7ff fe6d 	bl	1a003d30 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a004056:	2101      	movs	r1, #1
1a004058:	2039      	movs	r0, #57	; 0x39
1a00405a:	f7ff fe69 	bl	1a003d30 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00405e:	2101      	movs	r1, #1
1a004060:	203a      	movs	r0, #58	; 0x3a
1a004062:	f7ff fe65 	bl	1a003d30 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a004066:	2101      	movs	r1, #1
1a004068:	203b      	movs	r0, #59	; 0x3b
1a00406a:	f7ff fe61 	bl	1a003d30 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00406e:	2101      	movs	r1, #1
1a004070:	203c      	movs	r0, #60	; 0x3c
1a004072:	f7ff fe5d 	bl	1a003d30 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a004076:	2101      	movs	r1, #1
1a004078:	203d      	movs	r0, #61	; 0x3d
1a00407a:	f7ff fe59 	bl	1a003d30 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00407e:	2101      	movs	r1, #1
1a004080:	203e      	movs	r0, #62	; 0x3e
1a004082:	f7ff fe55 	bl	1a003d30 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a004086:	2101      	movs	r1, #1
1a004088:	203f      	movs	r0, #63	; 0x3f
1a00408a:	f7ff fe51 	bl	1a003d30 <gpioInit>

}
1a00408e:	bd08      	pop	{r3, pc}
1a004090:	1000315c 	.word	0x1000315c

1a004094 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a004094:	2301      	movs	r3, #1
1a004096:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00409a:	4b01      	ldr	r3, [pc, #4]	; (1a0040a0 <clearInterrupt+0xc>)
1a00409c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00409e:	4770      	bx	lr
1a0040a0:	40087000 	.word	0x40087000

1a0040a4 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0040a6:	4b12      	ldr	r3, [pc, #72]	; (1a0040f0 <serveInterrupt+0x4c>)
1a0040a8:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0040aa:	4b12      	ldr	r3, [pc, #72]	; (1a0040f4 <serveInterrupt+0x50>)
1a0040ac:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0040ae:	2301      	movs	r3, #1
1a0040b0:	4083      	lsls	r3, r0
1a0040b2:	420b      	tst	r3, r1
1a0040b4:	d111      	bne.n	1a0040da <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0040b6:	4910      	ldr	r1, [pc, #64]	; (1a0040f8 <serveInterrupt+0x54>)
1a0040b8:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0040ba:	4d10      	ldr	r5, [pc, #64]	; (1a0040fc <serveInterrupt+0x58>)
1a0040bc:	0051      	lsls	r1, r2, #1
1a0040be:	188f      	adds	r7, r1, r2
1a0040c0:	00fc      	lsls	r4, r7, #3
1a0040c2:	4627      	mov	r7, r4
1a0040c4:	442c      	add	r4, r5
1a0040c6:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0040c8:	6864      	ldr	r4, [r4, #4]
1a0040ca:	1b36      	subs	r6, r6, r4
1a0040cc:	443d      	add	r5, r7
1a0040ce:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0040d0:	4a08      	ldr	r2, [pc, #32]	; (1a0040f4 <serveInterrupt+0x50>)
1a0040d2:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0040d4:	f7ff ffde 	bl	1a004094 <clearInterrupt>
}
1a0040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0040da:	4907      	ldr	r1, [pc, #28]	; (1a0040f8 <serveInterrupt+0x54>)
1a0040dc:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0040de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0040e2:	00d1      	lsls	r1, r2, #3
1a0040e4:	4a05      	ldr	r2, [pc, #20]	; (1a0040fc <serveInterrupt+0x58>)
1a0040e6:	440a      	add	r2, r1
1a0040e8:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a0040ea:	4a02      	ldr	r2, [pc, #8]	; (1a0040f4 <serveInterrupt+0x50>)
1a0040ec:	61d3      	str	r3, [r2, #28]
1a0040ee:	e7f1      	b.n	1a0040d4 <serveInterrupt+0x30>
1a0040f0:	1a005a30 	.word	0x1a005a30
1a0040f4:	40087000 	.word	0x40087000
1a0040f8:	40084000 	.word	0x40084000
1a0040fc:	10000094 	.word	0x10000094

1a004100 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a004100:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a004102:	2000      	movs	r0, #0
1a004104:	f7ff ffce 	bl	1a0040a4 <serveInterrupt>
}
1a004108:	bd08      	pop	{r3, pc}

1a00410a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00410a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00410c:	2001      	movs	r0, #1
1a00410e:	f7ff ffc9 	bl	1a0040a4 <serveInterrupt>
}
1a004112:	bd08      	pop	{r3, pc}

1a004114 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a004114:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a004116:	2002      	movs	r0, #2
1a004118:	f7ff ffc4 	bl	1a0040a4 <serveInterrupt>
}
1a00411c:	bd08      	pop	{r3, pc}
1a00411e:	Address 0x000000001a00411e is out of bounds.


1a004120 <__aeabi_drsub>:
1a004120:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a004124:	e002      	b.n	1a00412c <__adddf3>
1a004126:	bf00      	nop

1a004128 <__aeabi_dsub>:
1a004128:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a00412c <__adddf3>:
1a00412c:	b530      	push	{r4, r5, lr}
1a00412e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a004132:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a004136:	ea94 0f05 	teq	r4, r5
1a00413a:	bf08      	it	eq
1a00413c:	ea90 0f02 	teqeq	r0, r2
1a004140:	bf1f      	itttt	ne
1a004142:	ea54 0c00 	orrsne.w	ip, r4, r0
1a004146:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00414a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00414e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004152:	f000 80e2 	beq.w	1a00431a <__adddf3+0x1ee>
1a004156:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00415a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00415e:	bfb8      	it	lt
1a004160:	426d      	neglt	r5, r5
1a004162:	dd0c      	ble.n	1a00417e <__adddf3+0x52>
1a004164:	442c      	add	r4, r5
1a004166:	ea80 0202 	eor.w	r2, r0, r2
1a00416a:	ea81 0303 	eor.w	r3, r1, r3
1a00416e:	ea82 0000 	eor.w	r0, r2, r0
1a004172:	ea83 0101 	eor.w	r1, r3, r1
1a004176:	ea80 0202 	eor.w	r2, r0, r2
1a00417a:	ea81 0303 	eor.w	r3, r1, r3
1a00417e:	2d36      	cmp	r5, #54	; 0x36
1a004180:	bf88      	it	hi
1a004182:	bd30      	pophi	{r4, r5, pc}
1a004184:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a004188:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a00418c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a004190:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a004194:	d002      	beq.n	1a00419c <__adddf3+0x70>
1a004196:	4240      	negs	r0, r0
1a004198:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00419c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0041a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0041a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0041a8:	d002      	beq.n	1a0041b0 <__adddf3+0x84>
1a0041aa:	4252      	negs	r2, r2
1a0041ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0041b0:	ea94 0f05 	teq	r4, r5
1a0041b4:	f000 80a7 	beq.w	1a004306 <__adddf3+0x1da>
1a0041b8:	f1a4 0401 	sub.w	r4, r4, #1
1a0041bc:	f1d5 0e20 	rsbs	lr, r5, #32
1a0041c0:	db0d      	blt.n	1a0041de <__adddf3+0xb2>
1a0041c2:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0041c6:	fa22 f205 	lsr.w	r2, r2, r5
1a0041ca:	1880      	adds	r0, r0, r2
1a0041cc:	f141 0100 	adc.w	r1, r1, #0
1a0041d0:	fa03 f20e 	lsl.w	r2, r3, lr
1a0041d4:	1880      	adds	r0, r0, r2
1a0041d6:	fa43 f305 	asr.w	r3, r3, r5
1a0041da:	4159      	adcs	r1, r3
1a0041dc:	e00e      	b.n	1a0041fc <__adddf3+0xd0>
1a0041de:	f1a5 0520 	sub.w	r5, r5, #32
1a0041e2:	f10e 0e20 	add.w	lr, lr, #32
1a0041e6:	2a01      	cmp	r2, #1
1a0041e8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0041ec:	bf28      	it	cs
1a0041ee:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0041f2:	fa43 f305 	asr.w	r3, r3, r5
1a0041f6:	18c0      	adds	r0, r0, r3
1a0041f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0041fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004200:	d507      	bpl.n	1a004212 <__adddf3+0xe6>
1a004202:	f04f 0e00 	mov.w	lr, #0
1a004206:	f1dc 0c00 	rsbs	ip, ip, #0
1a00420a:	eb7e 0000 	sbcs.w	r0, lr, r0
1a00420e:	eb6e 0101 	sbc.w	r1, lr, r1
1a004212:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a004216:	d31b      	bcc.n	1a004250 <__adddf3+0x124>
1a004218:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a00421c:	d30c      	bcc.n	1a004238 <__adddf3+0x10c>
1a00421e:	0849      	lsrs	r1, r1, #1
1a004220:	ea5f 0030 	movs.w	r0, r0, rrx
1a004224:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a004228:	f104 0401 	add.w	r4, r4, #1
1a00422c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a004230:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a004234:	f080 809a 	bcs.w	1a00436c <__adddf3+0x240>
1a004238:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a00423c:	bf08      	it	eq
1a00423e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004242:	f150 0000 	adcs.w	r0, r0, #0
1a004246:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00424a:	ea41 0105 	orr.w	r1, r1, r5
1a00424e:	bd30      	pop	{r4, r5, pc}
1a004250:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a004254:	4140      	adcs	r0, r0
1a004256:	eb41 0101 	adc.w	r1, r1, r1
1a00425a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00425e:	f1a4 0401 	sub.w	r4, r4, #1
1a004262:	d1e9      	bne.n	1a004238 <__adddf3+0x10c>
1a004264:	f091 0f00 	teq	r1, #0
1a004268:	bf04      	itt	eq
1a00426a:	4601      	moveq	r1, r0
1a00426c:	2000      	moveq	r0, #0
1a00426e:	fab1 f381 	clz	r3, r1
1a004272:	bf08      	it	eq
1a004274:	3320      	addeq	r3, #32
1a004276:	f1a3 030b 	sub.w	r3, r3, #11
1a00427a:	f1b3 0220 	subs.w	r2, r3, #32
1a00427e:	da0c      	bge.n	1a00429a <__adddf3+0x16e>
1a004280:	320c      	adds	r2, #12
1a004282:	dd08      	ble.n	1a004296 <__adddf3+0x16a>
1a004284:	f102 0c14 	add.w	ip, r2, #20
1a004288:	f1c2 020c 	rsb	r2, r2, #12
1a00428c:	fa01 f00c 	lsl.w	r0, r1, ip
1a004290:	fa21 f102 	lsr.w	r1, r1, r2
1a004294:	e00c      	b.n	1a0042b0 <__adddf3+0x184>
1a004296:	f102 0214 	add.w	r2, r2, #20
1a00429a:	bfd8      	it	le
1a00429c:	f1c2 0c20 	rsble	ip, r2, #32
1a0042a0:	fa01 f102 	lsl.w	r1, r1, r2
1a0042a4:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0042a8:	bfdc      	itt	le
1a0042aa:	ea41 010c 	orrle.w	r1, r1, ip
1a0042ae:	4090      	lslle	r0, r2
1a0042b0:	1ae4      	subs	r4, r4, r3
1a0042b2:	bfa2      	ittt	ge
1a0042b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0042b8:	4329      	orrge	r1, r5
1a0042ba:	bd30      	popge	{r4, r5, pc}
1a0042bc:	ea6f 0404 	mvn.w	r4, r4
1a0042c0:	3c1f      	subs	r4, #31
1a0042c2:	da1c      	bge.n	1a0042fe <__adddf3+0x1d2>
1a0042c4:	340c      	adds	r4, #12
1a0042c6:	dc0e      	bgt.n	1a0042e6 <__adddf3+0x1ba>
1a0042c8:	f104 0414 	add.w	r4, r4, #20
1a0042cc:	f1c4 0220 	rsb	r2, r4, #32
1a0042d0:	fa20 f004 	lsr.w	r0, r0, r4
1a0042d4:	fa01 f302 	lsl.w	r3, r1, r2
1a0042d8:	ea40 0003 	orr.w	r0, r0, r3
1a0042dc:	fa21 f304 	lsr.w	r3, r1, r4
1a0042e0:	ea45 0103 	orr.w	r1, r5, r3
1a0042e4:	bd30      	pop	{r4, r5, pc}
1a0042e6:	f1c4 040c 	rsb	r4, r4, #12
1a0042ea:	f1c4 0220 	rsb	r2, r4, #32
1a0042ee:	fa20 f002 	lsr.w	r0, r0, r2
1a0042f2:	fa01 f304 	lsl.w	r3, r1, r4
1a0042f6:	ea40 0003 	orr.w	r0, r0, r3
1a0042fa:	4629      	mov	r1, r5
1a0042fc:	bd30      	pop	{r4, r5, pc}
1a0042fe:	fa21 f004 	lsr.w	r0, r1, r4
1a004302:	4629      	mov	r1, r5
1a004304:	bd30      	pop	{r4, r5, pc}
1a004306:	f094 0f00 	teq	r4, #0
1a00430a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a00430e:	bf06      	itte	eq
1a004310:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a004314:	3401      	addeq	r4, #1
1a004316:	3d01      	subne	r5, #1
1a004318:	e74e      	b.n	1a0041b8 <__adddf3+0x8c>
1a00431a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00431e:	bf18      	it	ne
1a004320:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a004324:	d029      	beq.n	1a00437a <__adddf3+0x24e>
1a004326:	ea94 0f05 	teq	r4, r5
1a00432a:	bf08      	it	eq
1a00432c:	ea90 0f02 	teqeq	r0, r2
1a004330:	d005      	beq.n	1a00433e <__adddf3+0x212>
1a004332:	ea54 0c00 	orrs.w	ip, r4, r0
1a004336:	bf04      	itt	eq
1a004338:	4619      	moveq	r1, r3
1a00433a:	4610      	moveq	r0, r2
1a00433c:	bd30      	pop	{r4, r5, pc}
1a00433e:	ea91 0f03 	teq	r1, r3
1a004342:	bf1e      	ittt	ne
1a004344:	2100      	movne	r1, #0
1a004346:	2000      	movne	r0, #0
1a004348:	bd30      	popne	{r4, r5, pc}
1a00434a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00434e:	d105      	bne.n	1a00435c <__adddf3+0x230>
1a004350:	0040      	lsls	r0, r0, #1
1a004352:	4149      	adcs	r1, r1
1a004354:	bf28      	it	cs
1a004356:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00435a:	bd30      	pop	{r4, r5, pc}
1a00435c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004360:	bf3c      	itt	cc
1a004362:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004366:	bd30      	popcc	{r4, r5, pc}
1a004368:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00436c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004370:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004374:	f04f 0000 	mov.w	r0, #0
1a004378:	bd30      	pop	{r4, r5, pc}
1a00437a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00437e:	bf1a      	itte	ne
1a004380:	4619      	movne	r1, r3
1a004382:	4610      	movne	r0, r2
1a004384:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004388:	bf1c      	itt	ne
1a00438a:	460b      	movne	r3, r1
1a00438c:	4602      	movne	r2, r0
1a00438e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004392:	bf06      	itte	eq
1a004394:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004398:	ea91 0f03 	teqeq	r1, r3
1a00439c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0043a0:	bd30      	pop	{r4, r5, pc}
1a0043a2:	bf00      	nop

1a0043a4 <__aeabi_ui2d>:
1a0043a4:	f090 0f00 	teq	r0, #0
1a0043a8:	bf04      	itt	eq
1a0043aa:	2100      	moveq	r1, #0
1a0043ac:	4770      	bxeq	lr
1a0043ae:	b530      	push	{r4, r5, lr}
1a0043b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0043b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0043b8:	f04f 0500 	mov.w	r5, #0
1a0043bc:	f04f 0100 	mov.w	r1, #0
1a0043c0:	e750      	b.n	1a004264 <__adddf3+0x138>
1a0043c2:	bf00      	nop

1a0043c4 <__aeabi_i2d>:
1a0043c4:	f090 0f00 	teq	r0, #0
1a0043c8:	bf04      	itt	eq
1a0043ca:	2100      	moveq	r1, #0
1a0043cc:	4770      	bxeq	lr
1a0043ce:	b530      	push	{r4, r5, lr}
1a0043d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0043d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0043d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0043dc:	bf48      	it	mi
1a0043de:	4240      	negmi	r0, r0
1a0043e0:	f04f 0100 	mov.w	r1, #0
1a0043e4:	e73e      	b.n	1a004264 <__adddf3+0x138>
1a0043e6:	bf00      	nop

1a0043e8 <__aeabi_f2d>:
1a0043e8:	0042      	lsls	r2, r0, #1
1a0043ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0043ee:	ea4f 0131 	mov.w	r1, r1, rrx
1a0043f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0043f6:	bf1f      	itttt	ne
1a0043f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0043fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a004400:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a004404:	4770      	bxne	lr
1a004406:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a00440a:	bf08      	it	eq
1a00440c:	4770      	bxeq	lr
1a00440e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a004412:	bf04      	itt	eq
1a004414:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a004418:	4770      	bxeq	lr
1a00441a:	b530      	push	{r4, r5, lr}
1a00441c:	f44f 7460 	mov.w	r4, #896	; 0x380
1a004420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a004424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004428:	e71c      	b.n	1a004264 <__adddf3+0x138>
1a00442a:	bf00      	nop

1a00442c <__aeabi_ul2d>:
1a00442c:	ea50 0201 	orrs.w	r2, r0, r1
1a004430:	bf08      	it	eq
1a004432:	4770      	bxeq	lr
1a004434:	b530      	push	{r4, r5, lr}
1a004436:	f04f 0500 	mov.w	r5, #0
1a00443a:	e00a      	b.n	1a004452 <__aeabi_l2d+0x16>

1a00443c <__aeabi_l2d>:
1a00443c:	ea50 0201 	orrs.w	r2, r0, r1
1a004440:	bf08      	it	eq
1a004442:	4770      	bxeq	lr
1a004444:	b530      	push	{r4, r5, lr}
1a004446:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00444a:	d502      	bpl.n	1a004452 <__aeabi_l2d+0x16>
1a00444c:	4240      	negs	r0, r0
1a00444e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004452:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004456:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00445a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00445e:	f43f aed8 	beq.w	1a004212 <__adddf3+0xe6>
1a004462:	f04f 0203 	mov.w	r2, #3
1a004466:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00446a:	bf18      	it	ne
1a00446c:	3203      	addne	r2, #3
1a00446e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004472:	bf18      	it	ne
1a004474:	3203      	addne	r2, #3
1a004476:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00447a:	f1c2 0320 	rsb	r3, r2, #32
1a00447e:	fa00 fc03 	lsl.w	ip, r0, r3
1a004482:	fa20 f002 	lsr.w	r0, r0, r2
1a004486:	fa01 fe03 	lsl.w	lr, r1, r3
1a00448a:	ea40 000e 	orr.w	r0, r0, lr
1a00448e:	fa21 f102 	lsr.w	r1, r1, r2
1a004492:	4414      	add	r4, r2
1a004494:	e6bd      	b.n	1a004212 <__adddf3+0xe6>
1a004496:	bf00      	nop

1a004498 <__aeabi_dmul>:
1a004498:	b570      	push	{r4, r5, r6, lr}
1a00449a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00449e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0044a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0044a6:	bf1d      	ittte	ne
1a0044a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0044ac:	ea94 0f0c 	teqne	r4, ip
1a0044b0:	ea95 0f0c 	teqne	r5, ip
1a0044b4:	f000 f8de 	bleq	1a004674 <__aeabi_dmul+0x1dc>
1a0044b8:	442c      	add	r4, r5
1a0044ba:	ea81 0603 	eor.w	r6, r1, r3
1a0044be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0044c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a0044c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a0044ca:	bf18      	it	ne
1a0044cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0044d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0044d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0044d8:	d038      	beq.n	1a00454c <__aeabi_dmul+0xb4>
1a0044da:	fba0 ce02 	umull	ip, lr, r0, r2
1a0044de:	f04f 0500 	mov.w	r5, #0
1a0044e2:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0044e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0044ea:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0044ee:	f04f 0600 	mov.w	r6, #0
1a0044f2:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0044f6:	f09c 0f00 	teq	ip, #0
1a0044fa:	bf18      	it	ne
1a0044fc:	f04e 0e01 	orrne.w	lr, lr, #1
1a004500:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a004504:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a004508:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a00450c:	d204      	bcs.n	1a004518 <__aeabi_dmul+0x80>
1a00450e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a004512:	416d      	adcs	r5, r5
1a004514:	eb46 0606 	adc.w	r6, r6, r6
1a004518:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a00451c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a004520:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a004524:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a004528:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a00452c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004530:	bf88      	it	hi
1a004532:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004536:	d81e      	bhi.n	1a004576 <__aeabi_dmul+0xde>
1a004538:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a00453c:	bf08      	it	eq
1a00453e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004542:	f150 0000 	adcs.w	r0, r0, #0
1a004546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00454a:	bd70      	pop	{r4, r5, r6, pc}
1a00454c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004550:	ea46 0101 	orr.w	r1, r6, r1
1a004554:	ea40 0002 	orr.w	r0, r0, r2
1a004558:	ea81 0103 	eor.w	r1, r1, r3
1a00455c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004560:	bfc2      	ittt	gt
1a004562:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004566:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00456a:	bd70      	popgt	{r4, r5, r6, pc}
1a00456c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004570:	f04f 0e00 	mov.w	lr, #0
1a004574:	3c01      	subs	r4, #1
1a004576:	f300 80ab 	bgt.w	1a0046d0 <__aeabi_dmul+0x238>
1a00457a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00457e:	bfde      	ittt	le
1a004580:	2000      	movle	r0, #0
1a004582:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004586:	bd70      	pople	{r4, r5, r6, pc}
1a004588:	f1c4 0400 	rsb	r4, r4, #0
1a00458c:	3c20      	subs	r4, #32
1a00458e:	da35      	bge.n	1a0045fc <__aeabi_dmul+0x164>
1a004590:	340c      	adds	r4, #12
1a004592:	dc1b      	bgt.n	1a0045cc <__aeabi_dmul+0x134>
1a004594:	f104 0414 	add.w	r4, r4, #20
1a004598:	f1c4 0520 	rsb	r5, r4, #32
1a00459c:	fa00 f305 	lsl.w	r3, r0, r5
1a0045a0:	fa20 f004 	lsr.w	r0, r0, r4
1a0045a4:	fa01 f205 	lsl.w	r2, r1, r5
1a0045a8:	ea40 0002 	orr.w	r0, r0, r2
1a0045ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0045b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0045b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0045b8:	fa21 f604 	lsr.w	r6, r1, r4
1a0045bc:	eb42 0106 	adc.w	r1, r2, r6
1a0045c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0045c4:	bf08      	it	eq
1a0045c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0045ca:	bd70      	pop	{r4, r5, r6, pc}
1a0045cc:	f1c4 040c 	rsb	r4, r4, #12
1a0045d0:	f1c4 0520 	rsb	r5, r4, #32
1a0045d4:	fa00 f304 	lsl.w	r3, r0, r4
1a0045d8:	fa20 f005 	lsr.w	r0, r0, r5
1a0045dc:	fa01 f204 	lsl.w	r2, r1, r4
1a0045e0:	ea40 0002 	orr.w	r0, r0, r2
1a0045e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0045e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0045ec:	f141 0100 	adc.w	r1, r1, #0
1a0045f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0045f4:	bf08      	it	eq
1a0045f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0045fa:	bd70      	pop	{r4, r5, r6, pc}
1a0045fc:	f1c4 0520 	rsb	r5, r4, #32
1a004600:	fa00 f205 	lsl.w	r2, r0, r5
1a004604:	ea4e 0e02 	orr.w	lr, lr, r2
1a004608:	fa20 f304 	lsr.w	r3, r0, r4
1a00460c:	fa01 f205 	lsl.w	r2, r1, r5
1a004610:	ea43 0302 	orr.w	r3, r3, r2
1a004614:	fa21 f004 	lsr.w	r0, r1, r4
1a004618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00461c:	fa21 f204 	lsr.w	r2, r1, r4
1a004620:	ea20 0002 	bic.w	r0, r0, r2
1a004624:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a004628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00462c:	bf08      	it	eq
1a00462e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004632:	bd70      	pop	{r4, r5, r6, pc}
1a004634:	f094 0f00 	teq	r4, #0
1a004638:	d10f      	bne.n	1a00465a <__aeabi_dmul+0x1c2>
1a00463a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00463e:	0040      	lsls	r0, r0, #1
1a004640:	eb41 0101 	adc.w	r1, r1, r1
1a004644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004648:	bf08      	it	eq
1a00464a:	3c01      	subeq	r4, #1
1a00464c:	d0f7      	beq.n	1a00463e <__aeabi_dmul+0x1a6>
1a00464e:	ea41 0106 	orr.w	r1, r1, r6
1a004652:	f095 0f00 	teq	r5, #0
1a004656:	bf18      	it	ne
1a004658:	4770      	bxne	lr
1a00465a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00465e:	0052      	lsls	r2, r2, #1
1a004660:	eb43 0303 	adc.w	r3, r3, r3
1a004664:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004668:	bf08      	it	eq
1a00466a:	3d01      	subeq	r5, #1
1a00466c:	d0f7      	beq.n	1a00465e <__aeabi_dmul+0x1c6>
1a00466e:	ea43 0306 	orr.w	r3, r3, r6
1a004672:	4770      	bx	lr
1a004674:	ea94 0f0c 	teq	r4, ip
1a004678:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00467c:	bf18      	it	ne
1a00467e:	ea95 0f0c 	teqne	r5, ip
1a004682:	d00c      	beq.n	1a00469e <__aeabi_dmul+0x206>
1a004684:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004688:	bf18      	it	ne
1a00468a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00468e:	d1d1      	bne.n	1a004634 <__aeabi_dmul+0x19c>
1a004690:	ea81 0103 	eor.w	r1, r1, r3
1a004694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004698:	f04f 0000 	mov.w	r0, #0
1a00469c:	bd70      	pop	{r4, r5, r6, pc}
1a00469e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0046a2:	bf06      	itte	eq
1a0046a4:	4610      	moveq	r0, r2
1a0046a6:	4619      	moveq	r1, r3
1a0046a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0046ac:	d019      	beq.n	1a0046e2 <__aeabi_dmul+0x24a>
1a0046ae:	ea94 0f0c 	teq	r4, ip
1a0046b2:	d102      	bne.n	1a0046ba <__aeabi_dmul+0x222>
1a0046b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0046b8:	d113      	bne.n	1a0046e2 <__aeabi_dmul+0x24a>
1a0046ba:	ea95 0f0c 	teq	r5, ip
1a0046be:	d105      	bne.n	1a0046cc <__aeabi_dmul+0x234>
1a0046c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0046c4:	bf1c      	itt	ne
1a0046c6:	4610      	movne	r0, r2
1a0046c8:	4619      	movne	r1, r3
1a0046ca:	d10a      	bne.n	1a0046e2 <__aeabi_dmul+0x24a>
1a0046cc:	ea81 0103 	eor.w	r1, r1, r3
1a0046d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0046d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0046d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0046dc:	f04f 0000 	mov.w	r0, #0
1a0046e0:	bd70      	pop	{r4, r5, r6, pc}
1a0046e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0046e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0046ea:	bd70      	pop	{r4, r5, r6, pc}

1a0046ec <__aeabi_ddiv>:
1a0046ec:	b570      	push	{r4, r5, r6, lr}
1a0046ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0046f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0046f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0046fa:	bf1d      	ittte	ne
1a0046fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a004700:	ea94 0f0c 	teqne	r4, ip
1a004704:	ea95 0f0c 	teqne	r5, ip
1a004708:	f000 f8a7 	bleq	1a00485a <__aeabi_ddiv+0x16e>
1a00470c:	eba4 0405 	sub.w	r4, r4, r5
1a004710:	ea81 0e03 	eor.w	lr, r1, r3
1a004714:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004718:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a00471c:	f000 8088 	beq.w	1a004830 <__aeabi_ddiv+0x144>
1a004720:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a004724:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a004728:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a00472c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a004730:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004734:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004738:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a00473c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a004740:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004744:	429d      	cmp	r5, r3
1a004746:	bf08      	it	eq
1a004748:	4296      	cmpeq	r6, r2
1a00474a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00474e:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a004752:	d202      	bcs.n	1a00475a <__aeabi_ddiv+0x6e>
1a004754:	085b      	lsrs	r3, r3, #1
1a004756:	ea4f 0232 	mov.w	r2, r2, rrx
1a00475a:	1ab6      	subs	r6, r6, r2
1a00475c:	eb65 0503 	sbc.w	r5, r5, r3
1a004760:	085b      	lsrs	r3, r3, #1
1a004762:	ea4f 0232 	mov.w	r2, r2, rrx
1a004766:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00476a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00476e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004772:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004776:	bf22      	ittt	cs
1a004778:	1ab6      	subcs	r6, r6, r2
1a00477a:	4675      	movcs	r5, lr
1a00477c:	ea40 000c 	orrcs.w	r0, r0, ip
1a004780:	085b      	lsrs	r3, r3, #1
1a004782:	ea4f 0232 	mov.w	r2, r2, rrx
1a004786:	ebb6 0e02 	subs.w	lr, r6, r2
1a00478a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00478e:	bf22      	ittt	cs
1a004790:	1ab6      	subcs	r6, r6, r2
1a004792:	4675      	movcs	r5, lr
1a004794:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a004798:	085b      	lsrs	r3, r3, #1
1a00479a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00479e:	ebb6 0e02 	subs.w	lr, r6, r2
1a0047a2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0047a6:	bf22      	ittt	cs
1a0047a8:	1ab6      	subcs	r6, r6, r2
1a0047aa:	4675      	movcs	r5, lr
1a0047ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0047b0:	085b      	lsrs	r3, r3, #1
1a0047b2:	ea4f 0232 	mov.w	r2, r2, rrx
1a0047b6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0047ba:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0047be:	bf22      	ittt	cs
1a0047c0:	1ab6      	subcs	r6, r6, r2
1a0047c2:	4675      	movcs	r5, lr
1a0047c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0047c8:	ea55 0e06 	orrs.w	lr, r5, r6
1a0047cc:	d018      	beq.n	1a004800 <__aeabi_ddiv+0x114>
1a0047ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0047d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0047d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0047da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0047de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0047e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0047e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0047ea:	d1c0      	bne.n	1a00476e <__aeabi_ddiv+0x82>
1a0047ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0047f0:	d10b      	bne.n	1a00480a <__aeabi_ddiv+0x11e>
1a0047f2:	ea41 0100 	orr.w	r1, r1, r0
1a0047f6:	f04f 0000 	mov.w	r0, #0
1a0047fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0047fe:	e7b6      	b.n	1a00476e <__aeabi_ddiv+0x82>
1a004800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004804:	bf04      	itt	eq
1a004806:	4301      	orreq	r1, r0
1a004808:	2000      	moveq	r0, #0
1a00480a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00480e:	bf88      	it	hi
1a004810:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004814:	f63f aeaf 	bhi.w	1a004576 <__aeabi_dmul+0xde>
1a004818:	ebb5 0c03 	subs.w	ip, r5, r3
1a00481c:	bf04      	itt	eq
1a00481e:	ebb6 0c02 	subseq.w	ip, r6, r2
1a004822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a004826:	f150 0000 	adcs.w	r0, r0, #0
1a00482a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00482e:	bd70      	pop	{r4, r5, r6, pc}
1a004830:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004834:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004838:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a00483c:	bfc2      	ittt	gt
1a00483e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004846:	bd70      	popgt	{r4, r5, r6, pc}
1a004848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00484c:	f04f 0e00 	mov.w	lr, #0
1a004850:	3c01      	subs	r4, #1
1a004852:	e690      	b.n	1a004576 <__aeabi_dmul+0xde>
1a004854:	ea45 0e06 	orr.w	lr, r5, r6
1a004858:	e68d      	b.n	1a004576 <__aeabi_dmul+0xde>
1a00485a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00485e:	ea94 0f0c 	teq	r4, ip
1a004862:	bf08      	it	eq
1a004864:	ea95 0f0c 	teqeq	r5, ip
1a004868:	f43f af3b 	beq.w	1a0046e2 <__aeabi_dmul+0x24a>
1a00486c:	ea94 0f0c 	teq	r4, ip
1a004870:	d10a      	bne.n	1a004888 <__aeabi_ddiv+0x19c>
1a004872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004876:	f47f af34 	bne.w	1a0046e2 <__aeabi_dmul+0x24a>
1a00487a:	ea95 0f0c 	teq	r5, ip
1a00487e:	f47f af25 	bne.w	1a0046cc <__aeabi_dmul+0x234>
1a004882:	4610      	mov	r0, r2
1a004884:	4619      	mov	r1, r3
1a004886:	e72c      	b.n	1a0046e2 <__aeabi_dmul+0x24a>
1a004888:	ea95 0f0c 	teq	r5, ip
1a00488c:	d106      	bne.n	1a00489c <__aeabi_ddiv+0x1b0>
1a00488e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004892:	f43f aefd 	beq.w	1a004690 <__aeabi_dmul+0x1f8>
1a004896:	4610      	mov	r0, r2
1a004898:	4619      	mov	r1, r3
1a00489a:	e722      	b.n	1a0046e2 <__aeabi_dmul+0x24a>
1a00489c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0048a0:	bf18      	it	ne
1a0048a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0048a6:	f47f aec5 	bne.w	1a004634 <__aeabi_dmul+0x19c>
1a0048aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0048ae:	f47f af0d 	bne.w	1a0046cc <__aeabi_dmul+0x234>
1a0048b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0048b6:	f47f aeeb 	bne.w	1a004690 <__aeabi_dmul+0x1f8>
1a0048ba:	e712      	b.n	1a0046e2 <__aeabi_dmul+0x24a>

1a0048bc <__aeabi_d2f>:
1a0048bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0048c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0048c4:	bf24      	itt	cs
1a0048c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0048ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0048ce:	d90d      	bls.n	1a0048ec <__aeabi_d2f+0x30>
1a0048d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0048d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0048d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0048dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0048e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0048e4:	bf08      	it	eq
1a0048e6:	f020 0001 	biceq.w	r0, r0, #1
1a0048ea:	4770      	bx	lr
1a0048ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0048f0:	d121      	bne.n	1a004936 <__aeabi_d2f+0x7a>
1a0048f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0048f6:	bfbc      	itt	lt
1a0048f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0048fc:	4770      	bxlt	lr
1a0048fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004902:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a004906:	f1c2 0218 	rsb	r2, r2, #24
1a00490a:	f1c2 0c20 	rsb	ip, r2, #32
1a00490e:	fa10 f30c 	lsls.w	r3, r0, ip
1a004912:	fa20 f002 	lsr.w	r0, r0, r2
1a004916:	bf18      	it	ne
1a004918:	f040 0001 	orrne.w	r0, r0, #1
1a00491c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a004920:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a004924:	fa03 fc0c 	lsl.w	ip, r3, ip
1a004928:	ea40 000c 	orr.w	r0, r0, ip
1a00492c:	fa23 f302 	lsr.w	r3, r3, r2
1a004930:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a004934:	e7cc      	b.n	1a0048d0 <__aeabi_d2f+0x14>
1a004936:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00493a:	d107      	bne.n	1a00494c <__aeabi_d2f+0x90>
1a00493c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a004940:	bf1e      	ittt	ne
1a004942:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a004946:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00494a:	4770      	bxne	lr
1a00494c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a004950:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a004954:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a004958:	4770      	bx	lr
1a00495a:	bf00      	nop

1a00495c <__aeabi_uldivmod>:
1a00495c:	b953      	cbnz	r3, 1a004974 <__aeabi_uldivmod+0x18>
1a00495e:	b94a      	cbnz	r2, 1a004974 <__aeabi_uldivmod+0x18>
1a004960:	2900      	cmp	r1, #0
1a004962:	bf08      	it	eq
1a004964:	2800      	cmpeq	r0, #0
1a004966:	bf1c      	itt	ne
1a004968:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00496c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004970:	f000 b972 	b.w	1a004c58 <__aeabi_idiv0>
1a004974:	f1ad 0c08 	sub.w	ip, sp, #8
1a004978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00497c:	f000 f806 	bl	1a00498c <__udivmoddi4>
1a004980:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004988:	b004      	add	sp, #16
1a00498a:	4770      	bx	lr

1a00498c <__udivmoddi4>:
1a00498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004990:	9e08      	ldr	r6, [sp, #32]
1a004992:	4604      	mov	r4, r0
1a004994:	4688      	mov	r8, r1
1a004996:	2b00      	cmp	r3, #0
1a004998:	d14b      	bne.n	1a004a32 <__udivmoddi4+0xa6>
1a00499a:	428a      	cmp	r2, r1
1a00499c:	4615      	mov	r5, r2
1a00499e:	d967      	bls.n	1a004a70 <__udivmoddi4+0xe4>
1a0049a0:	fab2 f282 	clz	r2, r2
1a0049a4:	b14a      	cbz	r2, 1a0049ba <__udivmoddi4+0x2e>
1a0049a6:	f1c2 0720 	rsb	r7, r2, #32
1a0049aa:	fa01 f302 	lsl.w	r3, r1, r2
1a0049ae:	fa20 f707 	lsr.w	r7, r0, r7
1a0049b2:	4095      	lsls	r5, r2
1a0049b4:	ea47 0803 	orr.w	r8, r7, r3
1a0049b8:	4094      	lsls	r4, r2
1a0049ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0049be:	0c23      	lsrs	r3, r4, #16
1a0049c0:	fbb8 f7fe 	udiv	r7, r8, lr
1a0049c4:	fa1f fc85 	uxth.w	ip, r5
1a0049c8:	fb0e 8817 	mls	r8, lr, r7, r8
1a0049cc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0049d0:	fb07 f10c 	mul.w	r1, r7, ip
1a0049d4:	4299      	cmp	r1, r3
1a0049d6:	d909      	bls.n	1a0049ec <__udivmoddi4+0x60>
1a0049d8:	18eb      	adds	r3, r5, r3
1a0049da:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0049de:	f080 811b 	bcs.w	1a004c18 <__udivmoddi4+0x28c>
1a0049e2:	4299      	cmp	r1, r3
1a0049e4:	f240 8118 	bls.w	1a004c18 <__udivmoddi4+0x28c>
1a0049e8:	3f02      	subs	r7, #2
1a0049ea:	442b      	add	r3, r5
1a0049ec:	1a5b      	subs	r3, r3, r1
1a0049ee:	b2a4      	uxth	r4, r4
1a0049f0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0049f4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0049f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0049fc:	fb00 fc0c 	mul.w	ip, r0, ip
1a004a00:	45a4      	cmp	ip, r4
1a004a02:	d909      	bls.n	1a004a18 <__udivmoddi4+0x8c>
1a004a04:	192c      	adds	r4, r5, r4
1a004a06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004a0a:	f080 8107 	bcs.w	1a004c1c <__udivmoddi4+0x290>
1a004a0e:	45a4      	cmp	ip, r4
1a004a10:	f240 8104 	bls.w	1a004c1c <__udivmoddi4+0x290>
1a004a14:	3802      	subs	r0, #2
1a004a16:	442c      	add	r4, r5
1a004a18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004a1c:	eba4 040c 	sub.w	r4, r4, ip
1a004a20:	2700      	movs	r7, #0
1a004a22:	b11e      	cbz	r6, 1a004a2c <__udivmoddi4+0xa0>
1a004a24:	40d4      	lsrs	r4, r2
1a004a26:	2300      	movs	r3, #0
1a004a28:	e9c6 4300 	strd	r4, r3, [r6]
1a004a2c:	4639      	mov	r1, r7
1a004a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004a32:	428b      	cmp	r3, r1
1a004a34:	d909      	bls.n	1a004a4a <__udivmoddi4+0xbe>
1a004a36:	2e00      	cmp	r6, #0
1a004a38:	f000 80eb 	beq.w	1a004c12 <__udivmoddi4+0x286>
1a004a3c:	2700      	movs	r7, #0
1a004a3e:	e9c6 0100 	strd	r0, r1, [r6]
1a004a42:	4638      	mov	r0, r7
1a004a44:	4639      	mov	r1, r7
1a004a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004a4a:	fab3 f783 	clz	r7, r3
1a004a4e:	2f00      	cmp	r7, #0
1a004a50:	d147      	bne.n	1a004ae2 <__udivmoddi4+0x156>
1a004a52:	428b      	cmp	r3, r1
1a004a54:	d302      	bcc.n	1a004a5c <__udivmoddi4+0xd0>
1a004a56:	4282      	cmp	r2, r0
1a004a58:	f200 80fa 	bhi.w	1a004c50 <__udivmoddi4+0x2c4>
1a004a5c:	1a84      	subs	r4, r0, r2
1a004a5e:	eb61 0303 	sbc.w	r3, r1, r3
1a004a62:	2001      	movs	r0, #1
1a004a64:	4698      	mov	r8, r3
1a004a66:	2e00      	cmp	r6, #0
1a004a68:	d0e0      	beq.n	1a004a2c <__udivmoddi4+0xa0>
1a004a6a:	e9c6 4800 	strd	r4, r8, [r6]
1a004a6e:	e7dd      	b.n	1a004a2c <__udivmoddi4+0xa0>
1a004a70:	b902      	cbnz	r2, 1a004a74 <__udivmoddi4+0xe8>
1a004a72:	deff      	udf	#255	; 0xff
1a004a74:	fab2 f282 	clz	r2, r2
1a004a78:	2a00      	cmp	r2, #0
1a004a7a:	f040 808f 	bne.w	1a004b9c <__udivmoddi4+0x210>
1a004a7e:	1b49      	subs	r1, r1, r5
1a004a80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004a84:	fa1f f885 	uxth.w	r8, r5
1a004a88:	2701      	movs	r7, #1
1a004a8a:	fbb1 fcfe 	udiv	ip, r1, lr
1a004a8e:	0c23      	lsrs	r3, r4, #16
1a004a90:	fb0e 111c 	mls	r1, lr, ip, r1
1a004a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004a98:	fb08 f10c 	mul.w	r1, r8, ip
1a004a9c:	4299      	cmp	r1, r3
1a004a9e:	d907      	bls.n	1a004ab0 <__udivmoddi4+0x124>
1a004aa0:	18eb      	adds	r3, r5, r3
1a004aa2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004aa6:	d202      	bcs.n	1a004aae <__udivmoddi4+0x122>
1a004aa8:	4299      	cmp	r1, r3
1a004aaa:	f200 80cd 	bhi.w	1a004c48 <__udivmoddi4+0x2bc>
1a004aae:	4684      	mov	ip, r0
1a004ab0:	1a59      	subs	r1, r3, r1
1a004ab2:	b2a3      	uxth	r3, r4
1a004ab4:	fbb1 f0fe 	udiv	r0, r1, lr
1a004ab8:	fb0e 1410 	mls	r4, lr, r0, r1
1a004abc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004ac0:	fb08 f800 	mul.w	r8, r8, r0
1a004ac4:	45a0      	cmp	r8, r4
1a004ac6:	d907      	bls.n	1a004ad8 <__udivmoddi4+0x14c>
1a004ac8:	192c      	adds	r4, r5, r4
1a004aca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004ace:	d202      	bcs.n	1a004ad6 <__udivmoddi4+0x14a>
1a004ad0:	45a0      	cmp	r8, r4
1a004ad2:	f200 80b6 	bhi.w	1a004c42 <__udivmoddi4+0x2b6>
1a004ad6:	4618      	mov	r0, r3
1a004ad8:	eba4 0408 	sub.w	r4, r4, r8
1a004adc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004ae0:	e79f      	b.n	1a004a22 <__udivmoddi4+0x96>
1a004ae2:	f1c7 0c20 	rsb	ip, r7, #32
1a004ae6:	40bb      	lsls	r3, r7
1a004ae8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004aec:	ea4e 0e03 	orr.w	lr, lr, r3
1a004af0:	fa01 f407 	lsl.w	r4, r1, r7
1a004af4:	fa20 f50c 	lsr.w	r5, r0, ip
1a004af8:	fa21 f30c 	lsr.w	r3, r1, ip
1a004afc:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004b00:	4325      	orrs	r5, r4
1a004b02:	fbb3 f9f8 	udiv	r9, r3, r8
1a004b06:	0c2c      	lsrs	r4, r5, #16
1a004b08:	fb08 3319 	mls	r3, r8, r9, r3
1a004b0c:	fa1f fa8e 	uxth.w	sl, lr
1a004b10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004b14:	fb09 f40a 	mul.w	r4, r9, sl
1a004b18:	429c      	cmp	r4, r3
1a004b1a:	fa02 f207 	lsl.w	r2, r2, r7
1a004b1e:	fa00 f107 	lsl.w	r1, r0, r7
1a004b22:	d90b      	bls.n	1a004b3c <__udivmoddi4+0x1b0>
1a004b24:	eb1e 0303 	adds.w	r3, lr, r3
1a004b28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004b2c:	f080 8087 	bcs.w	1a004c3e <__udivmoddi4+0x2b2>
1a004b30:	429c      	cmp	r4, r3
1a004b32:	f240 8084 	bls.w	1a004c3e <__udivmoddi4+0x2b2>
1a004b36:	f1a9 0902 	sub.w	r9, r9, #2
1a004b3a:	4473      	add	r3, lr
1a004b3c:	1b1b      	subs	r3, r3, r4
1a004b3e:	b2ad      	uxth	r5, r5
1a004b40:	fbb3 f0f8 	udiv	r0, r3, r8
1a004b44:	fb08 3310 	mls	r3, r8, r0, r3
1a004b48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004b4c:	fb00 fa0a 	mul.w	sl, r0, sl
1a004b50:	45a2      	cmp	sl, r4
1a004b52:	d908      	bls.n	1a004b66 <__udivmoddi4+0x1da>
1a004b54:	eb1e 0404 	adds.w	r4, lr, r4
1a004b58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004b5c:	d26b      	bcs.n	1a004c36 <__udivmoddi4+0x2aa>
1a004b5e:	45a2      	cmp	sl, r4
1a004b60:	d969      	bls.n	1a004c36 <__udivmoddi4+0x2aa>
1a004b62:	3802      	subs	r0, #2
1a004b64:	4474      	add	r4, lr
1a004b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004b6a:	fba0 8902 	umull	r8, r9, r0, r2
1a004b6e:	eba4 040a 	sub.w	r4, r4, sl
1a004b72:	454c      	cmp	r4, r9
1a004b74:	46c2      	mov	sl, r8
1a004b76:	464b      	mov	r3, r9
1a004b78:	d354      	bcc.n	1a004c24 <__udivmoddi4+0x298>
1a004b7a:	d051      	beq.n	1a004c20 <__udivmoddi4+0x294>
1a004b7c:	2e00      	cmp	r6, #0
1a004b7e:	d069      	beq.n	1a004c54 <__udivmoddi4+0x2c8>
1a004b80:	ebb1 050a 	subs.w	r5, r1, sl
1a004b84:	eb64 0403 	sbc.w	r4, r4, r3
1a004b88:	fa04 fc0c 	lsl.w	ip, r4, ip
1a004b8c:	40fd      	lsrs	r5, r7
1a004b8e:	40fc      	lsrs	r4, r7
1a004b90:	ea4c 0505 	orr.w	r5, ip, r5
1a004b94:	e9c6 5400 	strd	r5, r4, [r6]
1a004b98:	2700      	movs	r7, #0
1a004b9a:	e747      	b.n	1a004a2c <__udivmoddi4+0xa0>
1a004b9c:	f1c2 0320 	rsb	r3, r2, #32
1a004ba0:	fa20 f703 	lsr.w	r7, r0, r3
1a004ba4:	4095      	lsls	r5, r2
1a004ba6:	fa01 f002 	lsl.w	r0, r1, r2
1a004baa:	fa21 f303 	lsr.w	r3, r1, r3
1a004bae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004bb2:	4338      	orrs	r0, r7
1a004bb4:	0c01      	lsrs	r1, r0, #16
1a004bb6:	fbb3 f7fe 	udiv	r7, r3, lr
1a004bba:	fa1f f885 	uxth.w	r8, r5
1a004bbe:	fb0e 3317 	mls	r3, lr, r7, r3
1a004bc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004bc6:	fb07 f308 	mul.w	r3, r7, r8
1a004bca:	428b      	cmp	r3, r1
1a004bcc:	fa04 f402 	lsl.w	r4, r4, r2
1a004bd0:	d907      	bls.n	1a004be2 <__udivmoddi4+0x256>
1a004bd2:	1869      	adds	r1, r5, r1
1a004bd4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004bd8:	d22f      	bcs.n	1a004c3a <__udivmoddi4+0x2ae>
1a004bda:	428b      	cmp	r3, r1
1a004bdc:	d92d      	bls.n	1a004c3a <__udivmoddi4+0x2ae>
1a004bde:	3f02      	subs	r7, #2
1a004be0:	4429      	add	r1, r5
1a004be2:	1acb      	subs	r3, r1, r3
1a004be4:	b281      	uxth	r1, r0
1a004be6:	fbb3 f0fe 	udiv	r0, r3, lr
1a004bea:	fb0e 3310 	mls	r3, lr, r0, r3
1a004bee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004bf2:	fb00 f308 	mul.w	r3, r0, r8
1a004bf6:	428b      	cmp	r3, r1
1a004bf8:	d907      	bls.n	1a004c0a <__udivmoddi4+0x27e>
1a004bfa:	1869      	adds	r1, r5, r1
1a004bfc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004c00:	d217      	bcs.n	1a004c32 <__udivmoddi4+0x2a6>
1a004c02:	428b      	cmp	r3, r1
1a004c04:	d915      	bls.n	1a004c32 <__udivmoddi4+0x2a6>
1a004c06:	3802      	subs	r0, #2
1a004c08:	4429      	add	r1, r5
1a004c0a:	1ac9      	subs	r1, r1, r3
1a004c0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004c10:	e73b      	b.n	1a004a8a <__udivmoddi4+0xfe>
1a004c12:	4637      	mov	r7, r6
1a004c14:	4630      	mov	r0, r6
1a004c16:	e709      	b.n	1a004a2c <__udivmoddi4+0xa0>
1a004c18:	4607      	mov	r7, r0
1a004c1a:	e6e7      	b.n	1a0049ec <__udivmoddi4+0x60>
1a004c1c:	4618      	mov	r0, r3
1a004c1e:	e6fb      	b.n	1a004a18 <__udivmoddi4+0x8c>
1a004c20:	4541      	cmp	r1, r8
1a004c22:	d2ab      	bcs.n	1a004b7c <__udivmoddi4+0x1f0>
1a004c24:	ebb8 0a02 	subs.w	sl, r8, r2
1a004c28:	eb69 020e 	sbc.w	r2, r9, lr
1a004c2c:	3801      	subs	r0, #1
1a004c2e:	4613      	mov	r3, r2
1a004c30:	e7a4      	b.n	1a004b7c <__udivmoddi4+0x1f0>
1a004c32:	4660      	mov	r0, ip
1a004c34:	e7e9      	b.n	1a004c0a <__udivmoddi4+0x27e>
1a004c36:	4618      	mov	r0, r3
1a004c38:	e795      	b.n	1a004b66 <__udivmoddi4+0x1da>
1a004c3a:	4667      	mov	r7, ip
1a004c3c:	e7d1      	b.n	1a004be2 <__udivmoddi4+0x256>
1a004c3e:	4681      	mov	r9, r0
1a004c40:	e77c      	b.n	1a004b3c <__udivmoddi4+0x1b0>
1a004c42:	3802      	subs	r0, #2
1a004c44:	442c      	add	r4, r5
1a004c46:	e747      	b.n	1a004ad8 <__udivmoddi4+0x14c>
1a004c48:	f1ac 0c02 	sub.w	ip, ip, #2
1a004c4c:	442b      	add	r3, r5
1a004c4e:	e72f      	b.n	1a004ab0 <__udivmoddi4+0x124>
1a004c50:	4638      	mov	r0, r7
1a004c52:	e708      	b.n	1a004a66 <__udivmoddi4+0xda>
1a004c54:	4637      	mov	r7, r6
1a004c56:	e6e9      	b.n	1a004a2c <__udivmoddi4+0xa0>

1a004c58 <__aeabi_idiv0>:
1a004c58:	4770      	bx	lr
1a004c5a:	bf00      	nop

1a004c5c <__libc_init_array>:
1a004c5c:	b570      	push	{r4, r5, r6, lr}
1a004c5e:	4e0d      	ldr	r6, [pc, #52]	; (1a004c94 <__libc_init_array+0x38>)
1a004c60:	4c0d      	ldr	r4, [pc, #52]	; (1a004c98 <__libc_init_array+0x3c>)
1a004c62:	1ba4      	subs	r4, r4, r6
1a004c64:	10a4      	asrs	r4, r4, #2
1a004c66:	2500      	movs	r5, #0
1a004c68:	42a5      	cmp	r5, r4
1a004c6a:	d109      	bne.n	1a004c80 <__libc_init_array+0x24>
1a004c6c:	4e0b      	ldr	r6, [pc, #44]	; (1a004c9c <__libc_init_array+0x40>)
1a004c6e:	4c0c      	ldr	r4, [pc, #48]	; (1a004ca0 <__libc_init_array+0x44>)
1a004c70:	f7fc f821 	bl	1a000cb6 <_init>
1a004c74:	1ba4      	subs	r4, r4, r6
1a004c76:	10a4      	asrs	r4, r4, #2
1a004c78:	2500      	movs	r5, #0
1a004c7a:	42a5      	cmp	r5, r4
1a004c7c:	d105      	bne.n	1a004c8a <__libc_init_array+0x2e>
1a004c7e:	bd70      	pop	{r4, r5, r6, pc}
1a004c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004c84:	4798      	blx	r3
1a004c86:	3501      	adds	r5, #1
1a004c88:	e7ee      	b.n	1a004c68 <__libc_init_array+0xc>
1a004c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004c8e:	4798      	blx	r3
1a004c90:	3501      	adds	r5, #1
1a004c92:	e7f2      	b.n	1a004c7a <__libc_init_array+0x1e>
1a004c94:	1a005ac8 	.word	0x1a005ac8
1a004c98:	1a005ac8 	.word	0x1a005ac8
1a004c9c:	1a005ac8 	.word	0x1a005ac8
1a004ca0:	1a005acc 	.word	0x1a005acc

1a004ca4 <memcpy>:
1a004ca4:	b510      	push	{r4, lr}
1a004ca6:	1e43      	subs	r3, r0, #1
1a004ca8:	440a      	add	r2, r1
1a004caa:	4291      	cmp	r1, r2
1a004cac:	d100      	bne.n	1a004cb0 <memcpy+0xc>
1a004cae:	bd10      	pop	{r4, pc}
1a004cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004cb8:	e7f7      	b.n	1a004caa <memcpy+0x6>

1a004cba <memset>:
1a004cba:	4402      	add	r2, r0
1a004cbc:	4603      	mov	r3, r0
1a004cbe:	4293      	cmp	r3, r2
1a004cc0:	d100      	bne.n	1a004cc4 <memset+0xa>
1a004cc2:	4770      	bx	lr
1a004cc4:	f803 1b01 	strb.w	r1, [r3], #1
1a004cc8:	e7f9      	b.n	1a004cbe <memset+0x4>
1a004cca:	Address 0x000000001a004cca is out of bounds.


1a004ccc <siprintf>:
1a004ccc:	b40e      	push	{r1, r2, r3}
1a004cce:	b500      	push	{lr}
1a004cd0:	b09c      	sub	sp, #112	; 0x70
1a004cd2:	ab1d      	add	r3, sp, #116	; 0x74
1a004cd4:	9002      	str	r0, [sp, #8]
1a004cd6:	9006      	str	r0, [sp, #24]
1a004cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a004cdc:	4809      	ldr	r0, [pc, #36]	; (1a004d04 <siprintf+0x38>)
1a004cde:	9107      	str	r1, [sp, #28]
1a004ce0:	9104      	str	r1, [sp, #16]
1a004ce2:	4909      	ldr	r1, [pc, #36]	; (1a004d08 <siprintf+0x3c>)
1a004ce4:	f853 2b04 	ldr.w	r2, [r3], #4
1a004ce8:	9105      	str	r1, [sp, #20]
1a004cea:	6800      	ldr	r0, [r0, #0]
1a004cec:	9301      	str	r3, [sp, #4]
1a004cee:	a902      	add	r1, sp, #8
1a004cf0:	f000 f92c 	bl	1a004f4c <_svfiprintf_r>
1a004cf4:	9b02      	ldr	r3, [sp, #8]
1a004cf6:	2200      	movs	r2, #0
1a004cf8:	701a      	strb	r2, [r3, #0]
1a004cfa:	b01c      	add	sp, #112	; 0x70
1a004cfc:	f85d eb04 	ldr.w	lr, [sp], #4
1a004d00:	b003      	add	sp, #12
1a004d02:	4770      	bx	lr
1a004d04:	100000dc 	.word	0x100000dc
1a004d08:	ffff0208 	.word	0xffff0208

1a004d0c <strchr>:
1a004d0c:	b2c9      	uxtb	r1, r1
1a004d0e:	4603      	mov	r3, r0
1a004d10:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004d14:	b11a      	cbz	r2, 1a004d1e <strchr+0x12>
1a004d16:	428a      	cmp	r2, r1
1a004d18:	d1f9      	bne.n	1a004d0e <strchr+0x2>
1a004d1a:	4618      	mov	r0, r3
1a004d1c:	4770      	bx	lr
1a004d1e:	2900      	cmp	r1, #0
1a004d20:	bf18      	it	ne
1a004d22:	2300      	movne	r3, #0
1a004d24:	e7f9      	b.n	1a004d1a <strchr+0xe>

1a004d26 <strcpy>:
1a004d26:	4603      	mov	r3, r0
1a004d28:	f811 2b01 	ldrb.w	r2, [r1], #1
1a004d2c:	f803 2b01 	strb.w	r2, [r3], #1
1a004d30:	2a00      	cmp	r2, #0
1a004d32:	d1f9      	bne.n	1a004d28 <strcpy+0x2>
1a004d34:	4770      	bx	lr

1a004d36 <strlen>:
1a004d36:	4603      	mov	r3, r0
1a004d38:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004d3c:	2a00      	cmp	r2, #0
1a004d3e:	d1fb      	bne.n	1a004d38 <strlen+0x2>
1a004d40:	1a18      	subs	r0, r3, r0
1a004d42:	3801      	subs	r0, #1
1a004d44:	4770      	bx	lr
1a004d46:	Address 0x000000001a004d46 is out of bounds.


1a004d48 <_free_r>:
1a004d48:	b538      	push	{r3, r4, r5, lr}
1a004d4a:	4605      	mov	r5, r0
1a004d4c:	2900      	cmp	r1, #0
1a004d4e:	d045      	beq.n	1a004ddc <_free_r+0x94>
1a004d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004d54:	1f0c      	subs	r4, r1, #4
1a004d56:	2b00      	cmp	r3, #0
1a004d58:	bfb8      	it	lt
1a004d5a:	18e4      	addlt	r4, r4, r3
1a004d5c:	f000 fbe1 	bl	1a005522 <__malloc_lock>
1a004d60:	4a1f      	ldr	r2, [pc, #124]	; (1a004de0 <_free_r+0x98>)
1a004d62:	6813      	ldr	r3, [r2, #0]
1a004d64:	4610      	mov	r0, r2
1a004d66:	b933      	cbnz	r3, 1a004d76 <_free_r+0x2e>
1a004d68:	6063      	str	r3, [r4, #4]
1a004d6a:	6014      	str	r4, [r2, #0]
1a004d6c:	4628      	mov	r0, r5
1a004d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004d72:	f000 bbd7 	b.w	1a005524 <__malloc_unlock>
1a004d76:	42a3      	cmp	r3, r4
1a004d78:	d90c      	bls.n	1a004d94 <_free_r+0x4c>
1a004d7a:	6821      	ldr	r1, [r4, #0]
1a004d7c:	1862      	adds	r2, r4, r1
1a004d7e:	4293      	cmp	r3, r2
1a004d80:	bf04      	itt	eq
1a004d82:	681a      	ldreq	r2, [r3, #0]
1a004d84:	685b      	ldreq	r3, [r3, #4]
1a004d86:	6063      	str	r3, [r4, #4]
1a004d88:	bf04      	itt	eq
1a004d8a:	1852      	addeq	r2, r2, r1
1a004d8c:	6022      	streq	r2, [r4, #0]
1a004d8e:	6004      	str	r4, [r0, #0]
1a004d90:	e7ec      	b.n	1a004d6c <_free_r+0x24>
1a004d92:	4613      	mov	r3, r2
1a004d94:	685a      	ldr	r2, [r3, #4]
1a004d96:	b10a      	cbz	r2, 1a004d9c <_free_r+0x54>
1a004d98:	42a2      	cmp	r2, r4
1a004d9a:	d9fa      	bls.n	1a004d92 <_free_r+0x4a>
1a004d9c:	6819      	ldr	r1, [r3, #0]
1a004d9e:	1858      	adds	r0, r3, r1
1a004da0:	42a0      	cmp	r0, r4
1a004da2:	d10b      	bne.n	1a004dbc <_free_r+0x74>
1a004da4:	6820      	ldr	r0, [r4, #0]
1a004da6:	4401      	add	r1, r0
1a004da8:	1858      	adds	r0, r3, r1
1a004daa:	4282      	cmp	r2, r0
1a004dac:	6019      	str	r1, [r3, #0]
1a004dae:	d1dd      	bne.n	1a004d6c <_free_r+0x24>
1a004db0:	6810      	ldr	r0, [r2, #0]
1a004db2:	6852      	ldr	r2, [r2, #4]
1a004db4:	605a      	str	r2, [r3, #4]
1a004db6:	4401      	add	r1, r0
1a004db8:	6019      	str	r1, [r3, #0]
1a004dba:	e7d7      	b.n	1a004d6c <_free_r+0x24>
1a004dbc:	d902      	bls.n	1a004dc4 <_free_r+0x7c>
1a004dbe:	230c      	movs	r3, #12
1a004dc0:	602b      	str	r3, [r5, #0]
1a004dc2:	e7d3      	b.n	1a004d6c <_free_r+0x24>
1a004dc4:	6820      	ldr	r0, [r4, #0]
1a004dc6:	1821      	adds	r1, r4, r0
1a004dc8:	428a      	cmp	r2, r1
1a004dca:	bf04      	itt	eq
1a004dcc:	6811      	ldreq	r1, [r2, #0]
1a004dce:	6852      	ldreq	r2, [r2, #4]
1a004dd0:	6062      	str	r2, [r4, #4]
1a004dd2:	bf04      	itt	eq
1a004dd4:	1809      	addeq	r1, r1, r0
1a004dd6:	6021      	streq	r1, [r4, #0]
1a004dd8:	605c      	str	r4, [r3, #4]
1a004dda:	e7c7      	b.n	1a004d6c <_free_r+0x24>
1a004ddc:	bd38      	pop	{r3, r4, r5, pc}
1a004dde:	bf00      	nop
1a004de0:	10003008 	.word	0x10003008

1a004de4 <_malloc_r>:
1a004de4:	b570      	push	{r4, r5, r6, lr}
1a004de6:	1ccd      	adds	r5, r1, #3
1a004de8:	f025 0503 	bic.w	r5, r5, #3
1a004dec:	3508      	adds	r5, #8
1a004dee:	2d0c      	cmp	r5, #12
1a004df0:	bf38      	it	cc
1a004df2:	250c      	movcc	r5, #12
1a004df4:	2d00      	cmp	r5, #0
1a004df6:	4606      	mov	r6, r0
1a004df8:	db01      	blt.n	1a004dfe <_malloc_r+0x1a>
1a004dfa:	42a9      	cmp	r1, r5
1a004dfc:	d903      	bls.n	1a004e06 <_malloc_r+0x22>
1a004dfe:	230c      	movs	r3, #12
1a004e00:	6033      	str	r3, [r6, #0]
1a004e02:	2000      	movs	r0, #0
1a004e04:	bd70      	pop	{r4, r5, r6, pc}
1a004e06:	f000 fb8c 	bl	1a005522 <__malloc_lock>
1a004e0a:	4a21      	ldr	r2, [pc, #132]	; (1a004e90 <_malloc_r+0xac>)
1a004e0c:	6814      	ldr	r4, [r2, #0]
1a004e0e:	4621      	mov	r1, r4
1a004e10:	b991      	cbnz	r1, 1a004e38 <_malloc_r+0x54>
1a004e12:	4c20      	ldr	r4, [pc, #128]	; (1a004e94 <_malloc_r+0xb0>)
1a004e14:	6823      	ldr	r3, [r4, #0]
1a004e16:	b91b      	cbnz	r3, 1a004e20 <_malloc_r+0x3c>
1a004e18:	4630      	mov	r0, r6
1a004e1a:	f7fb ff4d 	bl	1a000cb8 <_sbrk_r>
1a004e1e:	6020      	str	r0, [r4, #0]
1a004e20:	4629      	mov	r1, r5
1a004e22:	4630      	mov	r0, r6
1a004e24:	f7fb ff48 	bl	1a000cb8 <_sbrk_r>
1a004e28:	1c43      	adds	r3, r0, #1
1a004e2a:	d124      	bne.n	1a004e76 <_malloc_r+0x92>
1a004e2c:	230c      	movs	r3, #12
1a004e2e:	6033      	str	r3, [r6, #0]
1a004e30:	4630      	mov	r0, r6
1a004e32:	f000 fb77 	bl	1a005524 <__malloc_unlock>
1a004e36:	e7e4      	b.n	1a004e02 <_malloc_r+0x1e>
1a004e38:	680b      	ldr	r3, [r1, #0]
1a004e3a:	1b5b      	subs	r3, r3, r5
1a004e3c:	d418      	bmi.n	1a004e70 <_malloc_r+0x8c>
1a004e3e:	2b0b      	cmp	r3, #11
1a004e40:	d90f      	bls.n	1a004e62 <_malloc_r+0x7e>
1a004e42:	600b      	str	r3, [r1, #0]
1a004e44:	50cd      	str	r5, [r1, r3]
1a004e46:	18cc      	adds	r4, r1, r3
1a004e48:	4630      	mov	r0, r6
1a004e4a:	f000 fb6b 	bl	1a005524 <__malloc_unlock>
1a004e4e:	f104 000b 	add.w	r0, r4, #11
1a004e52:	1d23      	adds	r3, r4, #4
1a004e54:	f020 0007 	bic.w	r0, r0, #7
1a004e58:	1ac3      	subs	r3, r0, r3
1a004e5a:	d0d3      	beq.n	1a004e04 <_malloc_r+0x20>
1a004e5c:	425a      	negs	r2, r3
1a004e5e:	50e2      	str	r2, [r4, r3]
1a004e60:	e7d0      	b.n	1a004e04 <_malloc_r+0x20>
1a004e62:	428c      	cmp	r4, r1
1a004e64:	684b      	ldr	r3, [r1, #4]
1a004e66:	bf16      	itet	ne
1a004e68:	6063      	strne	r3, [r4, #4]
1a004e6a:	6013      	streq	r3, [r2, #0]
1a004e6c:	460c      	movne	r4, r1
1a004e6e:	e7eb      	b.n	1a004e48 <_malloc_r+0x64>
1a004e70:	460c      	mov	r4, r1
1a004e72:	6849      	ldr	r1, [r1, #4]
1a004e74:	e7cc      	b.n	1a004e10 <_malloc_r+0x2c>
1a004e76:	1cc4      	adds	r4, r0, #3
1a004e78:	f024 0403 	bic.w	r4, r4, #3
1a004e7c:	42a0      	cmp	r0, r4
1a004e7e:	d005      	beq.n	1a004e8c <_malloc_r+0xa8>
1a004e80:	1a21      	subs	r1, r4, r0
1a004e82:	4630      	mov	r0, r6
1a004e84:	f7fb ff18 	bl	1a000cb8 <_sbrk_r>
1a004e88:	3001      	adds	r0, #1
1a004e8a:	d0cf      	beq.n	1a004e2c <_malloc_r+0x48>
1a004e8c:	6025      	str	r5, [r4, #0]
1a004e8e:	e7db      	b.n	1a004e48 <_malloc_r+0x64>
1a004e90:	10003008 	.word	0x10003008
1a004e94:	1000300c 	.word	0x1000300c

1a004e98 <__ssputs_r>:
1a004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004e9c:	688e      	ldr	r6, [r1, #8]
1a004e9e:	429e      	cmp	r6, r3
1a004ea0:	4682      	mov	sl, r0
1a004ea2:	460c      	mov	r4, r1
1a004ea4:	4690      	mov	r8, r2
1a004ea6:	4699      	mov	r9, r3
1a004ea8:	d837      	bhi.n	1a004f1a <__ssputs_r+0x82>
1a004eaa:	898a      	ldrh	r2, [r1, #12]
1a004eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
1a004eb0:	d031      	beq.n	1a004f16 <__ssputs_r+0x7e>
1a004eb2:	6825      	ldr	r5, [r4, #0]
1a004eb4:	6909      	ldr	r1, [r1, #16]
1a004eb6:	1a6f      	subs	r7, r5, r1
1a004eb8:	6965      	ldr	r5, [r4, #20]
1a004eba:	2302      	movs	r3, #2
1a004ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a004ec0:	fb95 f5f3 	sdiv	r5, r5, r3
1a004ec4:	f109 0301 	add.w	r3, r9, #1
1a004ec8:	443b      	add	r3, r7
1a004eca:	429d      	cmp	r5, r3
1a004ecc:	bf38      	it	cc
1a004ece:	461d      	movcc	r5, r3
1a004ed0:	0553      	lsls	r3, r2, #21
1a004ed2:	d530      	bpl.n	1a004f36 <__ssputs_r+0x9e>
1a004ed4:	4629      	mov	r1, r5
1a004ed6:	f7ff ff85 	bl	1a004de4 <_malloc_r>
1a004eda:	4606      	mov	r6, r0
1a004edc:	b950      	cbnz	r0, 1a004ef4 <__ssputs_r+0x5c>
1a004ede:	230c      	movs	r3, #12
1a004ee0:	f8ca 3000 	str.w	r3, [sl]
1a004ee4:	89a3      	ldrh	r3, [r4, #12]
1a004ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004eea:	81a3      	strh	r3, [r4, #12]
1a004eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004ef4:	463a      	mov	r2, r7
1a004ef6:	6921      	ldr	r1, [r4, #16]
1a004ef8:	f7ff fed4 	bl	1a004ca4 <memcpy>
1a004efc:	89a3      	ldrh	r3, [r4, #12]
1a004efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a004f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004f06:	81a3      	strh	r3, [r4, #12]
1a004f08:	6126      	str	r6, [r4, #16]
1a004f0a:	6165      	str	r5, [r4, #20]
1a004f0c:	443e      	add	r6, r7
1a004f0e:	1bed      	subs	r5, r5, r7
1a004f10:	6026      	str	r6, [r4, #0]
1a004f12:	60a5      	str	r5, [r4, #8]
1a004f14:	464e      	mov	r6, r9
1a004f16:	454e      	cmp	r6, r9
1a004f18:	d900      	bls.n	1a004f1c <__ssputs_r+0x84>
1a004f1a:	464e      	mov	r6, r9
1a004f1c:	4632      	mov	r2, r6
1a004f1e:	4641      	mov	r1, r8
1a004f20:	6820      	ldr	r0, [r4, #0]
1a004f22:	f000 fae5 	bl	1a0054f0 <memmove>
1a004f26:	68a3      	ldr	r3, [r4, #8]
1a004f28:	1b9b      	subs	r3, r3, r6
1a004f2a:	60a3      	str	r3, [r4, #8]
1a004f2c:	6823      	ldr	r3, [r4, #0]
1a004f2e:	441e      	add	r6, r3
1a004f30:	6026      	str	r6, [r4, #0]
1a004f32:	2000      	movs	r0, #0
1a004f34:	e7dc      	b.n	1a004ef0 <__ssputs_r+0x58>
1a004f36:	462a      	mov	r2, r5
1a004f38:	f000 faf5 	bl	1a005526 <_realloc_r>
1a004f3c:	4606      	mov	r6, r0
1a004f3e:	2800      	cmp	r0, #0
1a004f40:	d1e2      	bne.n	1a004f08 <__ssputs_r+0x70>
1a004f42:	6921      	ldr	r1, [r4, #16]
1a004f44:	4650      	mov	r0, sl
1a004f46:	f7ff feff 	bl	1a004d48 <_free_r>
1a004f4a:	e7c8      	b.n	1a004ede <__ssputs_r+0x46>

1a004f4c <_svfiprintf_r>:
1a004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004f50:	461d      	mov	r5, r3
1a004f52:	898b      	ldrh	r3, [r1, #12]
1a004f54:	061f      	lsls	r7, r3, #24
1a004f56:	b09d      	sub	sp, #116	; 0x74
1a004f58:	4680      	mov	r8, r0
1a004f5a:	460c      	mov	r4, r1
1a004f5c:	4616      	mov	r6, r2
1a004f5e:	d50f      	bpl.n	1a004f80 <_svfiprintf_r+0x34>
1a004f60:	690b      	ldr	r3, [r1, #16]
1a004f62:	b96b      	cbnz	r3, 1a004f80 <_svfiprintf_r+0x34>
1a004f64:	2140      	movs	r1, #64	; 0x40
1a004f66:	f7ff ff3d 	bl	1a004de4 <_malloc_r>
1a004f6a:	6020      	str	r0, [r4, #0]
1a004f6c:	6120      	str	r0, [r4, #16]
1a004f6e:	b928      	cbnz	r0, 1a004f7c <_svfiprintf_r+0x30>
1a004f70:	230c      	movs	r3, #12
1a004f72:	f8c8 3000 	str.w	r3, [r8]
1a004f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004f7a:	e0c8      	b.n	1a00510e <_svfiprintf_r+0x1c2>
1a004f7c:	2340      	movs	r3, #64	; 0x40
1a004f7e:	6163      	str	r3, [r4, #20]
1a004f80:	2300      	movs	r3, #0
1a004f82:	9309      	str	r3, [sp, #36]	; 0x24
1a004f84:	2320      	movs	r3, #32
1a004f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004f8a:	2330      	movs	r3, #48	; 0x30
1a004f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004f90:	9503      	str	r5, [sp, #12]
1a004f92:	f04f 0b01 	mov.w	fp, #1
1a004f96:	4637      	mov	r7, r6
1a004f98:	463d      	mov	r5, r7
1a004f9a:	f815 3b01 	ldrb.w	r3, [r5], #1
1a004f9e:	b10b      	cbz	r3, 1a004fa4 <_svfiprintf_r+0x58>
1a004fa0:	2b25      	cmp	r3, #37	; 0x25
1a004fa2:	d13e      	bne.n	1a005022 <_svfiprintf_r+0xd6>
1a004fa4:	ebb7 0a06 	subs.w	sl, r7, r6
1a004fa8:	d00b      	beq.n	1a004fc2 <_svfiprintf_r+0x76>
1a004faa:	4653      	mov	r3, sl
1a004fac:	4632      	mov	r2, r6
1a004fae:	4621      	mov	r1, r4
1a004fb0:	4640      	mov	r0, r8
1a004fb2:	f7ff ff71 	bl	1a004e98 <__ssputs_r>
1a004fb6:	3001      	adds	r0, #1
1a004fb8:	f000 80a4 	beq.w	1a005104 <_svfiprintf_r+0x1b8>
1a004fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004fbe:	4453      	add	r3, sl
1a004fc0:	9309      	str	r3, [sp, #36]	; 0x24
1a004fc2:	783b      	ldrb	r3, [r7, #0]
1a004fc4:	2b00      	cmp	r3, #0
1a004fc6:	f000 809d 	beq.w	1a005104 <_svfiprintf_r+0x1b8>
1a004fca:	2300      	movs	r3, #0
1a004fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004fd4:	9304      	str	r3, [sp, #16]
1a004fd6:	9307      	str	r3, [sp, #28]
1a004fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004fdc:	931a      	str	r3, [sp, #104]	; 0x68
1a004fde:	462f      	mov	r7, r5
1a004fe0:	2205      	movs	r2, #5
1a004fe2:	f817 1b01 	ldrb.w	r1, [r7], #1
1a004fe6:	4850      	ldr	r0, [pc, #320]	; (1a005128 <_svfiprintf_r+0x1dc>)
1a004fe8:	f000 fa32 	bl	1a005450 <memchr>
1a004fec:	9b04      	ldr	r3, [sp, #16]
1a004fee:	b9d0      	cbnz	r0, 1a005026 <_svfiprintf_r+0xda>
1a004ff0:	06d9      	lsls	r1, r3, #27
1a004ff2:	bf44      	itt	mi
1a004ff4:	2220      	movmi	r2, #32
1a004ff6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004ffa:	071a      	lsls	r2, r3, #28
1a004ffc:	bf44      	itt	mi
1a004ffe:	222b      	movmi	r2, #43	; 0x2b
1a005000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a005004:	782a      	ldrb	r2, [r5, #0]
1a005006:	2a2a      	cmp	r2, #42	; 0x2a
1a005008:	d015      	beq.n	1a005036 <_svfiprintf_r+0xea>
1a00500a:	9a07      	ldr	r2, [sp, #28]
1a00500c:	462f      	mov	r7, r5
1a00500e:	2000      	movs	r0, #0
1a005010:	250a      	movs	r5, #10
1a005012:	4639      	mov	r1, r7
1a005014:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005018:	3b30      	subs	r3, #48	; 0x30
1a00501a:	2b09      	cmp	r3, #9
1a00501c:	d94d      	bls.n	1a0050ba <_svfiprintf_r+0x16e>
1a00501e:	b1b8      	cbz	r0, 1a005050 <_svfiprintf_r+0x104>
1a005020:	e00f      	b.n	1a005042 <_svfiprintf_r+0xf6>
1a005022:	462f      	mov	r7, r5
1a005024:	e7b8      	b.n	1a004f98 <_svfiprintf_r+0x4c>
1a005026:	4a40      	ldr	r2, [pc, #256]	; (1a005128 <_svfiprintf_r+0x1dc>)
1a005028:	1a80      	subs	r0, r0, r2
1a00502a:	fa0b f000 	lsl.w	r0, fp, r0
1a00502e:	4318      	orrs	r0, r3
1a005030:	9004      	str	r0, [sp, #16]
1a005032:	463d      	mov	r5, r7
1a005034:	e7d3      	b.n	1a004fde <_svfiprintf_r+0x92>
1a005036:	9a03      	ldr	r2, [sp, #12]
1a005038:	1d11      	adds	r1, r2, #4
1a00503a:	6812      	ldr	r2, [r2, #0]
1a00503c:	9103      	str	r1, [sp, #12]
1a00503e:	2a00      	cmp	r2, #0
1a005040:	db01      	blt.n	1a005046 <_svfiprintf_r+0xfa>
1a005042:	9207      	str	r2, [sp, #28]
1a005044:	e004      	b.n	1a005050 <_svfiprintf_r+0x104>
1a005046:	4252      	negs	r2, r2
1a005048:	f043 0302 	orr.w	r3, r3, #2
1a00504c:	9207      	str	r2, [sp, #28]
1a00504e:	9304      	str	r3, [sp, #16]
1a005050:	783b      	ldrb	r3, [r7, #0]
1a005052:	2b2e      	cmp	r3, #46	; 0x2e
1a005054:	d10c      	bne.n	1a005070 <_svfiprintf_r+0x124>
1a005056:	787b      	ldrb	r3, [r7, #1]
1a005058:	2b2a      	cmp	r3, #42	; 0x2a
1a00505a:	d133      	bne.n	1a0050c4 <_svfiprintf_r+0x178>
1a00505c:	9b03      	ldr	r3, [sp, #12]
1a00505e:	1d1a      	adds	r2, r3, #4
1a005060:	681b      	ldr	r3, [r3, #0]
1a005062:	9203      	str	r2, [sp, #12]
1a005064:	2b00      	cmp	r3, #0
1a005066:	bfb8      	it	lt
1a005068:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a00506c:	3702      	adds	r7, #2
1a00506e:	9305      	str	r3, [sp, #20]
1a005070:	4d2e      	ldr	r5, [pc, #184]	; (1a00512c <_svfiprintf_r+0x1e0>)
1a005072:	7839      	ldrb	r1, [r7, #0]
1a005074:	2203      	movs	r2, #3
1a005076:	4628      	mov	r0, r5
1a005078:	f000 f9ea 	bl	1a005450 <memchr>
1a00507c:	b138      	cbz	r0, 1a00508e <_svfiprintf_r+0x142>
1a00507e:	2340      	movs	r3, #64	; 0x40
1a005080:	1b40      	subs	r0, r0, r5
1a005082:	fa03 f000 	lsl.w	r0, r3, r0
1a005086:	9b04      	ldr	r3, [sp, #16]
1a005088:	4303      	orrs	r3, r0
1a00508a:	3701      	adds	r7, #1
1a00508c:	9304      	str	r3, [sp, #16]
1a00508e:	7839      	ldrb	r1, [r7, #0]
1a005090:	4827      	ldr	r0, [pc, #156]	; (1a005130 <_svfiprintf_r+0x1e4>)
1a005092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a005096:	2206      	movs	r2, #6
1a005098:	1c7e      	adds	r6, r7, #1
1a00509a:	f000 f9d9 	bl	1a005450 <memchr>
1a00509e:	2800      	cmp	r0, #0
1a0050a0:	d038      	beq.n	1a005114 <_svfiprintf_r+0x1c8>
1a0050a2:	4b24      	ldr	r3, [pc, #144]	; (1a005134 <_svfiprintf_r+0x1e8>)
1a0050a4:	bb13      	cbnz	r3, 1a0050ec <_svfiprintf_r+0x1a0>
1a0050a6:	9b03      	ldr	r3, [sp, #12]
1a0050a8:	3307      	adds	r3, #7
1a0050aa:	f023 0307 	bic.w	r3, r3, #7
1a0050ae:	3308      	adds	r3, #8
1a0050b0:	9303      	str	r3, [sp, #12]
1a0050b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0050b4:	444b      	add	r3, r9
1a0050b6:	9309      	str	r3, [sp, #36]	; 0x24
1a0050b8:	e76d      	b.n	1a004f96 <_svfiprintf_r+0x4a>
1a0050ba:	fb05 3202 	mla	r2, r5, r2, r3
1a0050be:	2001      	movs	r0, #1
1a0050c0:	460f      	mov	r7, r1
1a0050c2:	e7a6      	b.n	1a005012 <_svfiprintf_r+0xc6>
1a0050c4:	2300      	movs	r3, #0
1a0050c6:	3701      	adds	r7, #1
1a0050c8:	9305      	str	r3, [sp, #20]
1a0050ca:	4619      	mov	r1, r3
1a0050cc:	250a      	movs	r5, #10
1a0050ce:	4638      	mov	r0, r7
1a0050d0:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0050d4:	3a30      	subs	r2, #48	; 0x30
1a0050d6:	2a09      	cmp	r2, #9
1a0050d8:	d903      	bls.n	1a0050e2 <_svfiprintf_r+0x196>
1a0050da:	2b00      	cmp	r3, #0
1a0050dc:	d0c8      	beq.n	1a005070 <_svfiprintf_r+0x124>
1a0050de:	9105      	str	r1, [sp, #20]
1a0050e0:	e7c6      	b.n	1a005070 <_svfiprintf_r+0x124>
1a0050e2:	fb05 2101 	mla	r1, r5, r1, r2
1a0050e6:	2301      	movs	r3, #1
1a0050e8:	4607      	mov	r7, r0
1a0050ea:	e7f0      	b.n	1a0050ce <_svfiprintf_r+0x182>
1a0050ec:	ab03      	add	r3, sp, #12
1a0050ee:	9300      	str	r3, [sp, #0]
1a0050f0:	4622      	mov	r2, r4
1a0050f2:	4b11      	ldr	r3, [pc, #68]	; (1a005138 <_svfiprintf_r+0x1ec>)
1a0050f4:	a904      	add	r1, sp, #16
1a0050f6:	4640      	mov	r0, r8
1a0050f8:	f3af 8000 	nop.w
1a0050fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005100:	4681      	mov	r9, r0
1a005102:	d1d6      	bne.n	1a0050b2 <_svfiprintf_r+0x166>
1a005104:	89a3      	ldrh	r3, [r4, #12]
1a005106:	065b      	lsls	r3, r3, #25
1a005108:	f53f af35 	bmi.w	1a004f76 <_svfiprintf_r+0x2a>
1a00510c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00510e:	b01d      	add	sp, #116	; 0x74
1a005110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005114:	ab03      	add	r3, sp, #12
1a005116:	9300      	str	r3, [sp, #0]
1a005118:	4622      	mov	r2, r4
1a00511a:	4b07      	ldr	r3, [pc, #28]	; (1a005138 <_svfiprintf_r+0x1ec>)
1a00511c:	a904      	add	r1, sp, #16
1a00511e:	4640      	mov	r0, r8
1a005120:	f000 f882 	bl	1a005228 <_printf_i>
1a005124:	e7ea      	b.n	1a0050fc <_svfiprintf_r+0x1b0>
1a005126:	bf00      	nop
1a005128:	1a005a94 	.word	0x1a005a94
1a00512c:	1a005a9a 	.word	0x1a005a9a
1a005130:	1a005a9e 	.word	0x1a005a9e
1a005134:	00000000 	.word	0x00000000
1a005138:	1a004e99 	.word	0x1a004e99

1a00513c <_printf_common>:
1a00513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005140:	4691      	mov	r9, r2
1a005142:	461f      	mov	r7, r3
1a005144:	688a      	ldr	r2, [r1, #8]
1a005146:	690b      	ldr	r3, [r1, #16]
1a005148:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00514c:	4293      	cmp	r3, r2
1a00514e:	bfb8      	it	lt
1a005150:	4613      	movlt	r3, r2
1a005152:	f8c9 3000 	str.w	r3, [r9]
1a005156:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00515a:	4606      	mov	r6, r0
1a00515c:	460c      	mov	r4, r1
1a00515e:	b112      	cbz	r2, 1a005166 <_printf_common+0x2a>
1a005160:	3301      	adds	r3, #1
1a005162:	f8c9 3000 	str.w	r3, [r9]
1a005166:	6823      	ldr	r3, [r4, #0]
1a005168:	0699      	lsls	r1, r3, #26
1a00516a:	bf42      	ittt	mi
1a00516c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a005170:	3302      	addmi	r3, #2
1a005172:	f8c9 3000 	strmi.w	r3, [r9]
1a005176:	6825      	ldr	r5, [r4, #0]
1a005178:	f015 0506 	ands.w	r5, r5, #6
1a00517c:	d107      	bne.n	1a00518e <_printf_common+0x52>
1a00517e:	f104 0a19 	add.w	sl, r4, #25
1a005182:	68e3      	ldr	r3, [r4, #12]
1a005184:	f8d9 2000 	ldr.w	r2, [r9]
1a005188:	1a9b      	subs	r3, r3, r2
1a00518a:	42ab      	cmp	r3, r5
1a00518c:	dc28      	bgt.n	1a0051e0 <_printf_common+0xa4>
1a00518e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a005192:	6822      	ldr	r2, [r4, #0]
1a005194:	3300      	adds	r3, #0
1a005196:	bf18      	it	ne
1a005198:	2301      	movne	r3, #1
1a00519a:	0692      	lsls	r2, r2, #26
1a00519c:	d42d      	bmi.n	1a0051fa <_printf_common+0xbe>
1a00519e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0051a2:	4639      	mov	r1, r7
1a0051a4:	4630      	mov	r0, r6
1a0051a6:	47c0      	blx	r8
1a0051a8:	3001      	adds	r0, #1
1a0051aa:	d020      	beq.n	1a0051ee <_printf_common+0xb2>
1a0051ac:	6823      	ldr	r3, [r4, #0]
1a0051ae:	68e5      	ldr	r5, [r4, #12]
1a0051b0:	f8d9 2000 	ldr.w	r2, [r9]
1a0051b4:	f003 0306 	and.w	r3, r3, #6
1a0051b8:	2b04      	cmp	r3, #4
1a0051ba:	bf08      	it	eq
1a0051bc:	1aad      	subeq	r5, r5, r2
1a0051be:	68a3      	ldr	r3, [r4, #8]
1a0051c0:	6922      	ldr	r2, [r4, #16]
1a0051c2:	bf0c      	ite	eq
1a0051c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0051c8:	2500      	movne	r5, #0
1a0051ca:	4293      	cmp	r3, r2
1a0051cc:	bfc4      	itt	gt
1a0051ce:	1a9b      	subgt	r3, r3, r2
1a0051d0:	18ed      	addgt	r5, r5, r3
1a0051d2:	f04f 0900 	mov.w	r9, #0
1a0051d6:	341a      	adds	r4, #26
1a0051d8:	454d      	cmp	r5, r9
1a0051da:	d11a      	bne.n	1a005212 <_printf_common+0xd6>
1a0051dc:	2000      	movs	r0, #0
1a0051de:	e008      	b.n	1a0051f2 <_printf_common+0xb6>
1a0051e0:	2301      	movs	r3, #1
1a0051e2:	4652      	mov	r2, sl
1a0051e4:	4639      	mov	r1, r7
1a0051e6:	4630      	mov	r0, r6
1a0051e8:	47c0      	blx	r8
1a0051ea:	3001      	adds	r0, #1
1a0051ec:	d103      	bne.n	1a0051f6 <_printf_common+0xba>
1a0051ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0051f6:	3501      	adds	r5, #1
1a0051f8:	e7c3      	b.n	1a005182 <_printf_common+0x46>
1a0051fa:	18e1      	adds	r1, r4, r3
1a0051fc:	1c5a      	adds	r2, r3, #1
1a0051fe:	2030      	movs	r0, #48	; 0x30
1a005200:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005204:	4422      	add	r2, r4
1a005206:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00520a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00520e:	3302      	adds	r3, #2
1a005210:	e7c5      	b.n	1a00519e <_printf_common+0x62>
1a005212:	2301      	movs	r3, #1
1a005214:	4622      	mov	r2, r4
1a005216:	4639      	mov	r1, r7
1a005218:	4630      	mov	r0, r6
1a00521a:	47c0      	blx	r8
1a00521c:	3001      	adds	r0, #1
1a00521e:	d0e6      	beq.n	1a0051ee <_printf_common+0xb2>
1a005220:	f109 0901 	add.w	r9, r9, #1
1a005224:	e7d8      	b.n	1a0051d8 <_printf_common+0x9c>
1a005226:	Address 0x000000001a005226 is out of bounds.


1a005228 <_printf_i>:
1a005228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00522c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a005230:	460c      	mov	r4, r1
1a005232:	7e09      	ldrb	r1, [r1, #24]
1a005234:	b085      	sub	sp, #20
1a005236:	296e      	cmp	r1, #110	; 0x6e
1a005238:	4617      	mov	r7, r2
1a00523a:	4606      	mov	r6, r0
1a00523c:	4698      	mov	r8, r3
1a00523e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005240:	f000 80b3 	beq.w	1a0053aa <_printf_i+0x182>
1a005244:	d822      	bhi.n	1a00528c <_printf_i+0x64>
1a005246:	2963      	cmp	r1, #99	; 0x63
1a005248:	d036      	beq.n	1a0052b8 <_printf_i+0x90>
1a00524a:	d80a      	bhi.n	1a005262 <_printf_i+0x3a>
1a00524c:	2900      	cmp	r1, #0
1a00524e:	f000 80b9 	beq.w	1a0053c4 <_printf_i+0x19c>
1a005252:	2958      	cmp	r1, #88	; 0x58
1a005254:	f000 8083 	beq.w	1a00535e <_printf_i+0x136>
1a005258:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00525c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005260:	e032      	b.n	1a0052c8 <_printf_i+0xa0>
1a005262:	2964      	cmp	r1, #100	; 0x64
1a005264:	d001      	beq.n	1a00526a <_printf_i+0x42>
1a005266:	2969      	cmp	r1, #105	; 0x69
1a005268:	d1f6      	bne.n	1a005258 <_printf_i+0x30>
1a00526a:	6820      	ldr	r0, [r4, #0]
1a00526c:	6813      	ldr	r3, [r2, #0]
1a00526e:	0605      	lsls	r5, r0, #24
1a005270:	f103 0104 	add.w	r1, r3, #4
1a005274:	d52a      	bpl.n	1a0052cc <_printf_i+0xa4>
1a005276:	681b      	ldr	r3, [r3, #0]
1a005278:	6011      	str	r1, [r2, #0]
1a00527a:	2b00      	cmp	r3, #0
1a00527c:	da03      	bge.n	1a005286 <_printf_i+0x5e>
1a00527e:	222d      	movs	r2, #45	; 0x2d
1a005280:	425b      	negs	r3, r3
1a005282:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a005286:	486f      	ldr	r0, [pc, #444]	; (1a005444 <_printf_i+0x21c>)
1a005288:	220a      	movs	r2, #10
1a00528a:	e039      	b.n	1a005300 <_printf_i+0xd8>
1a00528c:	2973      	cmp	r1, #115	; 0x73
1a00528e:	f000 809d 	beq.w	1a0053cc <_printf_i+0x1a4>
1a005292:	d808      	bhi.n	1a0052a6 <_printf_i+0x7e>
1a005294:	296f      	cmp	r1, #111	; 0x6f
1a005296:	d020      	beq.n	1a0052da <_printf_i+0xb2>
1a005298:	2970      	cmp	r1, #112	; 0x70
1a00529a:	d1dd      	bne.n	1a005258 <_printf_i+0x30>
1a00529c:	6823      	ldr	r3, [r4, #0]
1a00529e:	f043 0320 	orr.w	r3, r3, #32
1a0052a2:	6023      	str	r3, [r4, #0]
1a0052a4:	e003      	b.n	1a0052ae <_printf_i+0x86>
1a0052a6:	2975      	cmp	r1, #117	; 0x75
1a0052a8:	d017      	beq.n	1a0052da <_printf_i+0xb2>
1a0052aa:	2978      	cmp	r1, #120	; 0x78
1a0052ac:	d1d4      	bne.n	1a005258 <_printf_i+0x30>
1a0052ae:	2378      	movs	r3, #120	; 0x78
1a0052b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0052b4:	4864      	ldr	r0, [pc, #400]	; (1a005448 <_printf_i+0x220>)
1a0052b6:	e055      	b.n	1a005364 <_printf_i+0x13c>
1a0052b8:	6813      	ldr	r3, [r2, #0]
1a0052ba:	1d19      	adds	r1, r3, #4
1a0052bc:	681b      	ldr	r3, [r3, #0]
1a0052be:	6011      	str	r1, [r2, #0]
1a0052c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0052c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0052c8:	2301      	movs	r3, #1
1a0052ca:	e08c      	b.n	1a0053e6 <_printf_i+0x1be>
1a0052cc:	681b      	ldr	r3, [r3, #0]
1a0052ce:	6011      	str	r1, [r2, #0]
1a0052d0:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0052d4:	bf18      	it	ne
1a0052d6:	b21b      	sxthne	r3, r3
1a0052d8:	e7cf      	b.n	1a00527a <_printf_i+0x52>
1a0052da:	6813      	ldr	r3, [r2, #0]
1a0052dc:	6825      	ldr	r5, [r4, #0]
1a0052de:	1d18      	adds	r0, r3, #4
1a0052e0:	6010      	str	r0, [r2, #0]
1a0052e2:	0628      	lsls	r0, r5, #24
1a0052e4:	d501      	bpl.n	1a0052ea <_printf_i+0xc2>
1a0052e6:	681b      	ldr	r3, [r3, #0]
1a0052e8:	e002      	b.n	1a0052f0 <_printf_i+0xc8>
1a0052ea:	0668      	lsls	r0, r5, #25
1a0052ec:	d5fb      	bpl.n	1a0052e6 <_printf_i+0xbe>
1a0052ee:	881b      	ldrh	r3, [r3, #0]
1a0052f0:	4854      	ldr	r0, [pc, #336]	; (1a005444 <_printf_i+0x21c>)
1a0052f2:	296f      	cmp	r1, #111	; 0x6f
1a0052f4:	bf14      	ite	ne
1a0052f6:	220a      	movne	r2, #10
1a0052f8:	2208      	moveq	r2, #8
1a0052fa:	2100      	movs	r1, #0
1a0052fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005300:	6865      	ldr	r5, [r4, #4]
1a005302:	60a5      	str	r5, [r4, #8]
1a005304:	2d00      	cmp	r5, #0
1a005306:	f2c0 8095 	blt.w	1a005434 <_printf_i+0x20c>
1a00530a:	6821      	ldr	r1, [r4, #0]
1a00530c:	f021 0104 	bic.w	r1, r1, #4
1a005310:	6021      	str	r1, [r4, #0]
1a005312:	2b00      	cmp	r3, #0
1a005314:	d13d      	bne.n	1a005392 <_printf_i+0x16a>
1a005316:	2d00      	cmp	r5, #0
1a005318:	f040 808e 	bne.w	1a005438 <_printf_i+0x210>
1a00531c:	4665      	mov	r5, ip
1a00531e:	2a08      	cmp	r2, #8
1a005320:	d10b      	bne.n	1a00533a <_printf_i+0x112>
1a005322:	6823      	ldr	r3, [r4, #0]
1a005324:	07db      	lsls	r3, r3, #31
1a005326:	d508      	bpl.n	1a00533a <_printf_i+0x112>
1a005328:	6923      	ldr	r3, [r4, #16]
1a00532a:	6862      	ldr	r2, [r4, #4]
1a00532c:	429a      	cmp	r2, r3
1a00532e:	bfde      	ittt	le
1a005330:	2330      	movle	r3, #48	; 0x30
1a005332:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005336:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00533a:	ebac 0305 	sub.w	r3, ip, r5
1a00533e:	6123      	str	r3, [r4, #16]
1a005340:	f8cd 8000 	str.w	r8, [sp]
1a005344:	463b      	mov	r3, r7
1a005346:	aa03      	add	r2, sp, #12
1a005348:	4621      	mov	r1, r4
1a00534a:	4630      	mov	r0, r6
1a00534c:	f7ff fef6 	bl	1a00513c <_printf_common>
1a005350:	3001      	adds	r0, #1
1a005352:	d14d      	bne.n	1a0053f0 <_printf_i+0x1c8>
1a005354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005358:	b005      	add	sp, #20
1a00535a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00535e:	4839      	ldr	r0, [pc, #228]	; (1a005444 <_printf_i+0x21c>)
1a005360:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a005364:	6813      	ldr	r3, [r2, #0]
1a005366:	6821      	ldr	r1, [r4, #0]
1a005368:	1d1d      	adds	r5, r3, #4
1a00536a:	681b      	ldr	r3, [r3, #0]
1a00536c:	6015      	str	r5, [r2, #0]
1a00536e:	060a      	lsls	r2, r1, #24
1a005370:	d50b      	bpl.n	1a00538a <_printf_i+0x162>
1a005372:	07ca      	lsls	r2, r1, #31
1a005374:	bf44      	itt	mi
1a005376:	f041 0120 	orrmi.w	r1, r1, #32
1a00537a:	6021      	strmi	r1, [r4, #0]
1a00537c:	b91b      	cbnz	r3, 1a005386 <_printf_i+0x15e>
1a00537e:	6822      	ldr	r2, [r4, #0]
1a005380:	f022 0220 	bic.w	r2, r2, #32
1a005384:	6022      	str	r2, [r4, #0]
1a005386:	2210      	movs	r2, #16
1a005388:	e7b7      	b.n	1a0052fa <_printf_i+0xd2>
1a00538a:	064d      	lsls	r5, r1, #25
1a00538c:	bf48      	it	mi
1a00538e:	b29b      	uxthmi	r3, r3
1a005390:	e7ef      	b.n	1a005372 <_printf_i+0x14a>
1a005392:	4665      	mov	r5, ip
1a005394:	fbb3 f1f2 	udiv	r1, r3, r2
1a005398:	fb02 3311 	mls	r3, r2, r1, r3
1a00539c:	5cc3      	ldrb	r3, [r0, r3]
1a00539e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0053a2:	460b      	mov	r3, r1
1a0053a4:	2900      	cmp	r1, #0
1a0053a6:	d1f5      	bne.n	1a005394 <_printf_i+0x16c>
1a0053a8:	e7b9      	b.n	1a00531e <_printf_i+0xf6>
1a0053aa:	6813      	ldr	r3, [r2, #0]
1a0053ac:	6825      	ldr	r5, [r4, #0]
1a0053ae:	6961      	ldr	r1, [r4, #20]
1a0053b0:	1d18      	adds	r0, r3, #4
1a0053b2:	6010      	str	r0, [r2, #0]
1a0053b4:	0628      	lsls	r0, r5, #24
1a0053b6:	681b      	ldr	r3, [r3, #0]
1a0053b8:	d501      	bpl.n	1a0053be <_printf_i+0x196>
1a0053ba:	6019      	str	r1, [r3, #0]
1a0053bc:	e002      	b.n	1a0053c4 <_printf_i+0x19c>
1a0053be:	066a      	lsls	r2, r5, #25
1a0053c0:	d5fb      	bpl.n	1a0053ba <_printf_i+0x192>
1a0053c2:	8019      	strh	r1, [r3, #0]
1a0053c4:	2300      	movs	r3, #0
1a0053c6:	6123      	str	r3, [r4, #16]
1a0053c8:	4665      	mov	r5, ip
1a0053ca:	e7b9      	b.n	1a005340 <_printf_i+0x118>
1a0053cc:	6813      	ldr	r3, [r2, #0]
1a0053ce:	1d19      	adds	r1, r3, #4
1a0053d0:	6011      	str	r1, [r2, #0]
1a0053d2:	681d      	ldr	r5, [r3, #0]
1a0053d4:	6862      	ldr	r2, [r4, #4]
1a0053d6:	2100      	movs	r1, #0
1a0053d8:	4628      	mov	r0, r5
1a0053da:	f000 f839 	bl	1a005450 <memchr>
1a0053de:	b108      	cbz	r0, 1a0053e4 <_printf_i+0x1bc>
1a0053e0:	1b40      	subs	r0, r0, r5
1a0053e2:	6060      	str	r0, [r4, #4]
1a0053e4:	6863      	ldr	r3, [r4, #4]
1a0053e6:	6123      	str	r3, [r4, #16]
1a0053e8:	2300      	movs	r3, #0
1a0053ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0053ee:	e7a7      	b.n	1a005340 <_printf_i+0x118>
1a0053f0:	6923      	ldr	r3, [r4, #16]
1a0053f2:	462a      	mov	r2, r5
1a0053f4:	4639      	mov	r1, r7
1a0053f6:	4630      	mov	r0, r6
1a0053f8:	47c0      	blx	r8
1a0053fa:	3001      	adds	r0, #1
1a0053fc:	d0aa      	beq.n	1a005354 <_printf_i+0x12c>
1a0053fe:	6823      	ldr	r3, [r4, #0]
1a005400:	079b      	lsls	r3, r3, #30
1a005402:	d413      	bmi.n	1a00542c <_printf_i+0x204>
1a005404:	68e0      	ldr	r0, [r4, #12]
1a005406:	9b03      	ldr	r3, [sp, #12]
1a005408:	4298      	cmp	r0, r3
1a00540a:	bfb8      	it	lt
1a00540c:	4618      	movlt	r0, r3
1a00540e:	e7a3      	b.n	1a005358 <_printf_i+0x130>
1a005410:	2301      	movs	r3, #1
1a005412:	464a      	mov	r2, r9
1a005414:	4639      	mov	r1, r7
1a005416:	4630      	mov	r0, r6
1a005418:	47c0      	blx	r8
1a00541a:	3001      	adds	r0, #1
1a00541c:	d09a      	beq.n	1a005354 <_printf_i+0x12c>
1a00541e:	3501      	adds	r5, #1
1a005420:	68e3      	ldr	r3, [r4, #12]
1a005422:	9a03      	ldr	r2, [sp, #12]
1a005424:	1a9b      	subs	r3, r3, r2
1a005426:	42ab      	cmp	r3, r5
1a005428:	dcf2      	bgt.n	1a005410 <_printf_i+0x1e8>
1a00542a:	e7eb      	b.n	1a005404 <_printf_i+0x1dc>
1a00542c:	2500      	movs	r5, #0
1a00542e:	f104 0919 	add.w	r9, r4, #25
1a005432:	e7f5      	b.n	1a005420 <_printf_i+0x1f8>
1a005434:	2b00      	cmp	r3, #0
1a005436:	d1ac      	bne.n	1a005392 <_printf_i+0x16a>
1a005438:	7803      	ldrb	r3, [r0, #0]
1a00543a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00543e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005442:	e76c      	b.n	1a00531e <_printf_i+0xf6>
1a005444:	1a005aa5 	.word	0x1a005aa5
1a005448:	1a005ab6 	.word	0x1a005ab6
1a00544c:	ffffffff 	.word	0xffffffff

1a005450 <memchr>:
1a005450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005454:	2a10      	cmp	r2, #16
1a005456:	db2b      	blt.n	1a0054b0 <memchr+0x60>
1a005458:	f010 0f07 	tst.w	r0, #7
1a00545c:	d008      	beq.n	1a005470 <memchr+0x20>
1a00545e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005462:	3a01      	subs	r2, #1
1a005464:	428b      	cmp	r3, r1
1a005466:	d02d      	beq.n	1a0054c4 <memchr+0x74>
1a005468:	f010 0f07 	tst.w	r0, #7
1a00546c:	b342      	cbz	r2, 1a0054c0 <memchr+0x70>
1a00546e:	d1f6      	bne.n	1a00545e <memchr+0xe>
1a005470:	b4f0      	push	{r4, r5, r6, r7}
1a005472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00547a:	f022 0407 	bic.w	r4, r2, #7
1a00547e:	f07f 0700 	mvns.w	r7, #0
1a005482:	2300      	movs	r3, #0
1a005484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005488:	3c08      	subs	r4, #8
1a00548a:	ea85 0501 	eor.w	r5, r5, r1
1a00548e:	ea86 0601 	eor.w	r6, r6, r1
1a005492:	fa85 f547 	uadd8	r5, r5, r7
1a005496:	faa3 f587 	sel	r5, r3, r7
1a00549a:	fa86 f647 	uadd8	r6, r6, r7
1a00549e:	faa5 f687 	sel	r6, r5, r7
1a0054a2:	b98e      	cbnz	r6, 1a0054c8 <memchr+0x78>
1a0054a4:	d1ee      	bne.n	1a005484 <memchr+0x34>
1a0054a6:	bcf0      	pop	{r4, r5, r6, r7}
1a0054a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0054ac:	f002 0207 	and.w	r2, r2, #7
1a0054b0:	b132      	cbz	r2, 1a0054c0 <memchr+0x70>
1a0054b2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0054b6:	3a01      	subs	r2, #1
1a0054b8:	ea83 0301 	eor.w	r3, r3, r1
1a0054bc:	b113      	cbz	r3, 1a0054c4 <memchr+0x74>
1a0054be:	d1f8      	bne.n	1a0054b2 <memchr+0x62>
1a0054c0:	2000      	movs	r0, #0
1a0054c2:	4770      	bx	lr
1a0054c4:	3801      	subs	r0, #1
1a0054c6:	4770      	bx	lr
1a0054c8:	2d00      	cmp	r5, #0
1a0054ca:	bf06      	itte	eq
1a0054cc:	4635      	moveq	r5, r6
1a0054ce:	3803      	subeq	r0, #3
1a0054d0:	3807      	subne	r0, #7
1a0054d2:	f015 0f01 	tst.w	r5, #1
1a0054d6:	d107      	bne.n	1a0054e8 <memchr+0x98>
1a0054d8:	3001      	adds	r0, #1
1a0054da:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0054de:	bf02      	ittt	eq
1a0054e0:	3001      	addeq	r0, #1
1a0054e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0054e6:	3001      	addeq	r0, #1
1a0054e8:	bcf0      	pop	{r4, r5, r6, r7}
1a0054ea:	3801      	subs	r0, #1
1a0054ec:	4770      	bx	lr
1a0054ee:	bf00      	nop

1a0054f0 <memmove>:
1a0054f0:	4288      	cmp	r0, r1
1a0054f2:	b510      	push	{r4, lr}
1a0054f4:	eb01 0302 	add.w	r3, r1, r2
1a0054f8:	d807      	bhi.n	1a00550a <memmove+0x1a>
1a0054fa:	1e42      	subs	r2, r0, #1
1a0054fc:	4299      	cmp	r1, r3
1a0054fe:	d00a      	beq.n	1a005516 <memmove+0x26>
1a005500:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005504:	f802 4f01 	strb.w	r4, [r2, #1]!
1a005508:	e7f8      	b.n	1a0054fc <memmove+0xc>
1a00550a:	4283      	cmp	r3, r0
1a00550c:	d9f5      	bls.n	1a0054fa <memmove+0xa>
1a00550e:	1881      	adds	r1, r0, r2
1a005510:	1ad2      	subs	r2, r2, r3
1a005512:	42d3      	cmn	r3, r2
1a005514:	d100      	bne.n	1a005518 <memmove+0x28>
1a005516:	bd10      	pop	{r4, pc}
1a005518:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a00551c:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a005520:	e7f7      	b.n	1a005512 <memmove+0x22>

1a005522 <__malloc_lock>:
1a005522:	4770      	bx	lr

1a005524 <__malloc_unlock>:
1a005524:	4770      	bx	lr

1a005526 <_realloc_r>:
1a005526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005528:	4607      	mov	r7, r0
1a00552a:	4614      	mov	r4, r2
1a00552c:	460e      	mov	r6, r1
1a00552e:	b921      	cbnz	r1, 1a00553a <_realloc_r+0x14>
1a005530:	4611      	mov	r1, r2
1a005532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a005536:	f7ff bc55 	b.w	1a004de4 <_malloc_r>
1a00553a:	b922      	cbnz	r2, 1a005546 <_realloc_r+0x20>
1a00553c:	f7ff fc04 	bl	1a004d48 <_free_r>
1a005540:	4625      	mov	r5, r4
1a005542:	4628      	mov	r0, r5
1a005544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005546:	f000 f814 	bl	1a005572 <_malloc_usable_size_r>
1a00554a:	42a0      	cmp	r0, r4
1a00554c:	d20f      	bcs.n	1a00556e <_realloc_r+0x48>
1a00554e:	4621      	mov	r1, r4
1a005550:	4638      	mov	r0, r7
1a005552:	f7ff fc47 	bl	1a004de4 <_malloc_r>
1a005556:	4605      	mov	r5, r0
1a005558:	2800      	cmp	r0, #0
1a00555a:	d0f2      	beq.n	1a005542 <_realloc_r+0x1c>
1a00555c:	4631      	mov	r1, r6
1a00555e:	4622      	mov	r2, r4
1a005560:	f7ff fba0 	bl	1a004ca4 <memcpy>
1a005564:	4631      	mov	r1, r6
1a005566:	4638      	mov	r0, r7
1a005568:	f7ff fbee 	bl	1a004d48 <_free_r>
1a00556c:	e7e9      	b.n	1a005542 <_realloc_r+0x1c>
1a00556e:	4635      	mov	r5, r6
1a005570:	e7e7      	b.n	1a005542 <_realloc_r+0x1c>

1a005572 <_malloc_usable_size_r>:
1a005572:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005576:	1f18      	subs	r0, r3, #4
1a005578:	2b00      	cmp	r3, #0
1a00557a:	bfbc      	itt	lt
1a00557c:	580b      	ldrlt	r3, [r1, r0]
1a00557e:	18c0      	addlt	r0, r0, r3
1a005580:	4770      	bx	lr
1a005582:	ffff 3025 	vaddl.u<illegal width 64>	<illegal reg q9.5>, d15, d21
1a005586:	6432      	.short	0x6432
1a005588:	7d257325 	.word	0x7d257325
1a00558c:	ffffff00 	.word	0xffffff00
1a005590:	6b736154 	.word	0x6b736154
1a005594:	61557854 	.word	0x61557854
1a005598:	00007472 	.word	0x00007472
1a00559c:	6b736154 	.word	0x6b736154
1a0055a0:	76726553 	.word	0x76726553
1a0055a4:	00656369 	.word	0x00656369
1a0055a8:	6b736154 	.word	0x6b736154
1a0055ac:	4d6f545f 	.word	0x4d6f545f
1a0055b0:	73757961 	.word	0x73757961
1a0055b4:	616c7563 	.word	0x616c7563
1a0055b8:	504f5f73 	.word	0x504f5f73
1a0055bc:	00000030 	.word	0x00000030
1a0055c0:	6b736154 	.word	0x6b736154
1a0055c4:	4d6f545f 	.word	0x4d6f545f
1a0055c8:	73756e69 	.word	0x73756e69
1a0055cc:	616c7563 	.word	0x616c7563
1a0055d0:	504f5f73 	.word	0x504f5f73
1a0055d4:	00000031 	.word	0x00000031
1a0055d8:	6b736154 	.word	0x6b736154
1a0055dc:	4d6f545f 	.word	0x4d6f545f
1a0055e0:	73757961 	.word	0x73757961
1a0055e4:	616c7563 	.word	0x616c7563
1a0055e8:	504f5f73 	.word	0x504f5f73
1a0055ec:	00000032 	.word	0x00000032
1a0055f0:	6b736154 	.word	0x6b736154
1a0055f4:	4d6f545f 	.word	0x4d6f545f
1a0055f8:	73756e69 	.word	0x73756e69
1a0055fc:	616c7563 	.word	0x616c7563
1a005600:	504f5f73 	.word	0x504f5f73
1a005604:	00000033 	.word	0x00000033
1a005608:	6b736154 	.word	0x6b736154
1a00560c:	34504f5f 	.word	0x34504f5f
1a005610:	ffffff00 	.word	0xffffff00
1a005614:	7778797a 	.word	0x7778797a
1a005618:	73747576 	.word	0x73747576
1a00561c:	6f707172 	.word	0x6f707172
1a005620:	6b6c6d6e 	.word	0x6b6c6d6e
1a005624:	6768696a 	.word	0x6768696a
1a005628:	63646566 	.word	0x63646566
1a00562c:	38396162 	.word	0x38396162
1a005630:	34353637 	.word	0x34353637
1a005634:	30313233 	.word	0x30313233
1a005638:	34333231 	.word	0x34333231
1a00563c:	38373635 	.word	0x38373635
1a005640:	63626139 	.word	0x63626139
1a005644:	67666564 	.word	0x67666564
1a005648:	6b6a6968 	.word	0x6b6a6968
1a00564c:	6f6e6d6c 	.word	0x6f6e6d6c
1a005650:	73727170 	.word	0x73727170
1a005654:	77767574 	.word	0x77767574
1a005658:	007a7978 	.word	0x007a7978
1a00565c:	65500a0d 	.word	0x65500a0d
1a005660:	726f6672 	.word	0x726f6672
1a005664:	636e616d 	.word	0x636e616d
1a005668:	0d3a7365 	.word	0x0d3a7365
1a00566c:	2535300a 	.word	0x2535300a
1a005670:	44492073 	.word	0x44492073
1a005674:	0d64253a 	.word	0x0d64253a
1a005678:	6569540a 	.word	0x6569540a
1a00567c:	736f706d 	.word	0x736f706d
1a005680:	206e6520 	.word	0x206e6520
1a005684:	0d3a7375 	.word	0x0d3a7375
1a005688:	6f73540a 	.word	0x6f73540a
1a00568c:	6c253a66 	.word	0x6c253a66
1a005690:	65542075 	.word	0x65542075
1a005694:	253a666f 	.word	0x253a666f
1a005698:	5420756c 	.word	0x5420756c
1a00569c:	6e6f6369 	.word	0x6e6f6369
1a0056a0:	6c253a76 	.word	0x6c253a76
1a0056a4:	65542075 	.word	0x65542075
1a0056a8:	766e6f63 	.word	0x766e6f63
1a0056ac:	756c253a 	.word	0x756c253a
1a0056b0:	74735420 	.word	0x74735420
1a0056b4:	6c253a78 	.word	0x6c253a78
1a0056b8:	00000075 	.word	0x00000075
1a0056bc:	74655420 	.word	0x74655420
1a0056c0:	6c253a78 	.word	0x6c253a78
1a0056c4:	000a0d75 	.word	0x000a0d75
1a0056c8:	6d69545b 	.word	0x6d69545b
1a0056cc:	6f725065 	.word	0x6f725065
1a0056d0:	63615063 	.word	0x63615063
1a0056d4:	3a205d6b 	.word	0x3a205d6b
1a0056d8:	756c2520 	.word	0x756c2520
1a0056dc:	545b0a0d 	.word	0x545b0a0d
1a0056e0:	50656d69 	.word	0x50656d69
1a0056e4:	4d636f72 	.word	0x4d636f72
1a0056e8:	73757961 	.word	0x73757961
1a0056ec:	203a205d 	.word	0x203a205d
1a0056f0:	0d756c25 	.word	0x0d756c25
1a0056f4:	78545b0a 	.word	0x78545b0a
1a0056f8:	656d6954 	.word	0x656d6954
1a0056fc:	636f7250 	.word	0x636f7250
1a005700:	203a205d 	.word	0x203a205d
1a005704:	0d756c25 	.word	0x0d756c25
1a005708:	ffff000a 	.word	0xffff000a
1a00570c:	454c4449 	.word	0x454c4449
1a005710:	ffffff00 	.word	0xffffff00
1a005714:	51726d54 	.word	0x51726d54
1a005718:	ffffff00 	.word	0xffffff00
1a00571c:	20726d54 	.word	0x20726d54
1a005720:	00637653 	.word	0x00637653

1a005724 <ExtRateIn>:
1a005724:	00000000                                ....

1a005728 <GpioButtons>:
1a005728:	08000400 09010900                       ........

1a005730 <GpioLeds>:
1a005730:	01050005 0e000205 0c010b01              ............

1a00573c <GpioPorts>:
1a00573c:	03030003 0f050403 05031005 07030603     ................
1a00574c:	ffff0802                                ....

1a005750 <OscRateIn>:
1a005750:	00b71b00                                ....

1a005754 <InitClkStates>:
1a005754:	01010f01                                ....

1a005758 <pinmuxing>:
1a005758:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005768:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005778:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005788:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005798:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0057a8:	00d50301 00d50401 00160107 00560207     ..............V.
1a0057b8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0057c8:	00570206                                ..W.

1a0057cc <UART_BClock>:
1a0057cc:	01a201c2 01620182                       ......b.

1a0057d4 <UART_PClock>:
1a0057d4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0057e4:	ffff00ff                                ....

1a0057e8 <periph_to_base>:
1a0057e8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0057f8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005808:	000100e0 01000100 01200003 00060120     .......... . ...
1a005818:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005828:	01820013 00120182 01a201a2 01c20011     ................
1a005838:	001001c2 01e201e2 0202000f 000e0202     ................
1a005848:	02220222 0223000d 001c0223              "."...#.#...

1a005854 <InitClkStates>:
1a005854:	00010100 00010909 0001090a 01010701     ................
1a005864:	00010902 00010906 0101090c 0001090d     ................
1a005874:	0001090e 0001090f 00010910 00010911     ................
1a005884:	00010912 00010913 00011114 00011119     ................
1a005894:	0001111a 0001111b                       ........

1a00589c <lpcUarts>:
1a00589c:	40081000 06020406 00180205 40081000     ...@...........@
1a0058ac:	09070509 00180706 40082000 00000000     ......... .@....
1a0058bc:	00190000 400c1000 07060107 001a0602     .......@........
1a0058cc:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0058dc:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0058ec:	0072656d                                mer.

1a0058f0 <gpioPinsInit>:
1a0058f0:	00000001 04020204 01040205 07010200     ................
1a005900:	0d030005 01000501 00020408 03040202     ................
1a005910:	04030200 00020000 03000407 0402030c     ................
1a005920:	01030905 02080504 03050403 05040402     ................
1a005930:	000c0604 0b060802 06070300 05030009     ................
1a005940:	05040706 0004060f 04040303 04040200     ................
1a005950:	05020005 02000604 04080406 0a040c05     ................
1a005960:	010e0504 0a000003 00001401 0012010f     ................
1a005970:	11010d00 010c0000 03000010 03000707     ................
1a005980:	0001000f 00000100 06000000 0603000a     ................
1a005990:	05040806 00050610 01060403 04000300     ................
1a0059a0:	0d050409 00000401 000f010b 00010200     ................
1a0059b0:	01040000 08000001 00000201 00060109     ................
1a0059c0:	00020901 02000504 01050401 05040202     ................
1a0059d0:	000a0202 0b020e00 020b0100 0c01000c     ................
1a0059e0:	02000004 00010400 02040102 04020200     ................
1a0059f0:	03020003 03000307 0004070b 05070c03     ................
1a005a00:	070d0300 0e030006 05040102 00060401     ................
1a005a10:	05040602 04050200 04020004 05040804     ................
1a005a20:	0409040c 0a040d05 010e0504 08010005     ................

1a005a30 <ultrasonicSensorsIrqMap>:
1a005a30:	ff020100                                ....

1a005a34 <__sf_fake_stderr>:
	...

1a005a54 <__sf_fake_stdin>:
	...

1a005a74 <__sf_fake_stdout>:
	...
1a005a94:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
1a005aa4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
1a005ab4:	31300046 35343332 39383736 64636261     F.0123456789abcd
1a005ac4:	ff006665                                ef..
