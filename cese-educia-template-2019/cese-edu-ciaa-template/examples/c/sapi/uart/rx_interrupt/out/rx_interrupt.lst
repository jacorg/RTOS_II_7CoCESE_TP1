
examples/c/sapi/uart/rx_interrupt/out/rx_interrupt.elf:     file format elf32-littlearm
examples/c/sapi/uart/rx_interrupt/out/rx_interrupt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000359

Program Header:
0x70000001 off    0x00012f70 vaddr 0x1a002f70 paddr 0x1a002f70 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000017c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002f78 memsz 0x00002f78 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002f78 align 2**16
         filesz 0x00000128 memsz 0x00000128 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f6c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  10000000  1a002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020128  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020128  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020128  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020128  2**2
                  CONTENTS
  6 .bss          00000054  10000128  10000128  00000128  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020128  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020128  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020128  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020128  2**2
                  CONTENTS
 11 .init_array   00000004  1a002f6c  1a002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002f70  1a002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020128  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020128  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020128  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020128  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020128  2**2
                  CONTENTS
 18 .noinit       00000000  1000017c  1000017c  00020128  2**2
                  CONTENTS
 19 .debug_info   0001dcbb  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000042f2  00000000  00000000  0003dde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000770c  00000000  00000000  000420d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a68  00000000  00000000  000497e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000a38  00000000  00000000  0004a249  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000cc09  00000000  00000000  0004ac81  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000d151  00000000  00000000  0005788a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00027a69  00000000  00000000  000649db  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  0008c444  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  0008c4c3  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001eec  00000000  00000000  0008c4fc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000128 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002f6c l    d  .init_array	00000000 .init_array
1a002f70 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000017c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001238 l     F .text	000000a4 uartProcessIRQ
10000134 l     O .bss	00000004 rxIsrCallbackUART0
10000138 l     O .bss	00000004 rxIsrCallbackUART2
1000013c l     O .bss	00000004 rxIsrCallbackUART3
10000140 l     O .bss	00000004 txIsrCallbackUART0
10000144 l     O .bss	00000004 txIsrCallbackUART2
10000148 l     O .bss	00000004 txIsrCallbackUART3
1a002d48 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 rx_interrupt.c
00000000 l    df *ABS*	00000000 system.c
10000128 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 board.c
1a0004ac l     F .text	00000044 Board_LED_Init
1a0004f0 l     F .text	00000040 Board_TEC_Init
1a000530 l     F .text	00000040 Board_GPIO_Init
1a000570 l     F .text	00000030 Board_ADC_Init
1a0005a0 l     F .text	00000038 Board_SPI_Init
1a0005d8 l     F .text	00000024 Board_I2C_Init
1a002bd4 l     O .text	00000008 GpioButtons
1a002bdc l     O .text	0000000c GpioLeds
1a002be8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002c00 l     O .text	00000004 InitClkStates
1a002c04 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000748 l     F .text	0000002c Chip_UART_GetIndex
1a002c78 l     O .text	00000008 UART_BClock
1a002c80 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0008f0 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000904 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0009b8 l     F .text	000000a4 pll_calc_divs
1a000a5c l     F .text	0000010c pll_get_frac
1a000b68 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000ddc l     F .text	00000022 Chip_Clock_GetDivRate
1000012c l     O .bss	00000008 audio_usb_pll_freq
1a002c94 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002d00 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0010b4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0010c8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
1000014c l     O .bss	00000004 callBackFuncParams
10000150 l     O .bss	00000008 tickCounter
10000158 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001570 l     F .text	00000002 errorOcurred
1a001572 l     F .text	00000002 doNothing
1000003c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00167c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000015c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001a4c l     F .text	00000010 clearInterrupt
1a001a5c l     F .text	0000005c serveInterrupt
1000007c l     O .data	00000048 ultrasonicSensors
1a002ed0 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002140 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0024ec l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
100000c8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a002f70 l       .init_array	00000000 __init_array_end
1a002f6c l       .bss_RAM5	00000000 __preinit_array_end
1a002f6c l       .init_array	00000000 __init_array_start
1a002f6c l       .bss_RAM5	00000000 __preinit_array_start
1a000c00 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0003f8 g     F .text	00000012 _isatty_r
1a0015f4 g     F .text	00000044 TIMER2_IRQHandler
1a0013f8 g     F .text	00000014 uartRxRead
1a00040a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001e30 g     F .text	00000030 printf
1a00068e g     F .text	00000008 __stdio_init
1a002ad6 g     F .text	00000024 __sseek
1a0021c0 g     F .text	00000060 __sinit
1a001e60 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002194 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0009aa g     F .text	0000000c Chip_ADC_SetResolution
1a002bb2 g     F .text	00000002 __malloc_unlock
1a00153c g     F .text	00000034 SysTick_Handler
1a0007c8 g     F .text	00000040 Chip_UART_SetBaud
1a000354  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000634 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002f78 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0003ee g     F .text	0000000a _fstat_r
53ff7536 g       *ABS*	00000000 __valid_user_code_checksum
1a002f78 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001638 g     F .text	00000044 TIMER3_IRQHandler
1a000e7e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002188 g     F .text	0000000c _cleanup_r
1a001ad8 g     F .text	00000000 .hidden __aeabi_uldivmod
1000017c g       .noinit	00000000 _noinit
10000168 g     O .bss	00000004 SystemCoreClock
1a000300 g     F .text	00000018 onRx
1a000774 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000efc g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0006d0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001b08 g     F .text	000002cc .hidden __udivmoddi4
1a00048c g     F .text	00000020 _sbrk_r
1a002bd0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000414 g     F .text	0000004e _read_r
1a001ac2 g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002f70 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a002f34 g     O .text	00000004 _global_impure_ptr
1a001dd8 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000650 g     F .text	0000002c Board_Init
1a0003e2  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000017c g       .bss	00000000 _ebss
1a001574 g     F .text	00000040 TIMER0_IRQHandler
1a000358 g     F .text	00000088 Reset_Handler
1a0014c0 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0011ac g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000bb4 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0015b4 g     F .text	00000040 TIMER1_IRQHandler
1a002ed4 g     O .text	00000020 __sf_fake_stderr
1a001188 g     F .text	00000024 Chip_I2C_Init
1a001488 g     F .text	0000000a UART2_IRQHandler
1a000d70 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a002d90 g     O .text	00000140 gpioPinsInit
1a0012dc g     F .text	00000090 uartInterrupt
1a0010e0 g     F .text	00000012 Chip_SSP_SetClockRate
1a0018ee g     F .text	00000016 gpioToggle
1a00251a g     F .text	00000024 __sfputs_r
1a001acc g     F .text	0000000a GPIO2_IRQHandler
1a002b10 g     F .text	00000000 memchr
1a00239c g     F .text	0000009c _free_r
1a000e58 g     F .text	00000026 Chip_Clock_GetBaseClock
10000128 g       .bss	00000000 _bss
1a000978 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0010f2 g     F .text	0000003e Chip_SSP_SetBitRate
1a0010b0 g     F .text	00000002 Chip_GPIO_Init
1a002bfc g     O .text	00000004 OscRateIn
1a00140c g     F .text	0000007c uartInit
1000017c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0003e4 g     F .text	0000000a _close_r
1a0016b0 g     F .text	00000194 gpioInit
1a001f04 g     F .text	000000dc __swsetup_r
1a001dd4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002220 g     F .text	00000078 __sfp
1a002a7c g     F .text	00000022 __sread
1a001904 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a002bb0 g     F .text	00000002 __malloc_lock
1a000620 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0020ec g     F .text	00000054 _fflush_r
1a002ef4 g     O .text	00000020 __sf_fake_stdin
1a000c1c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001e20 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000318 g     F .text	0000003c main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002afa g     F .text	00000008 __sclose
1a002438 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000e8c g     F .text	0000003c Chip_Clock_EnableOpts
1a000686 g     F .text	00000008 __stdio_getchar
1a000c38 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000cf0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0011e4 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001a14 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001844 g     F .text	00000056 gpioWrite
1a0003e0  w    F .text	00000002 _fini
1a001e30 g     F .text	00000030 iprintf
1a000938 g     F .text	00000040 Chip_ADC_Init
10000178 g     O .bss	00000004 g_pUsbApi
1a000698 g     F .text	00000038 Board_SetupMuxing
1a000808 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00149c g     F .text	0000000c tickRead
1a000462 g     F .text	00000028 _write_r
10000170 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a00276c g     F .text	000000ea _printf_common
100000c4 g     O .data	00000004 _impure_ptr
1a001fe0 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000017c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001130 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0022d4 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0005fc g     F .text	00000024 Board_Debug_Init
1a00067c g     F .text	0000000a __stdio_putchar
10000128 g       .data	00000000 _edata
1a001168 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000f5c g     F .text	00000154 Chip_SetupCoreClock
1a002a9e g     F .text	00000038 __swrite
1a001ab8 g     F .text	0000000a GPIO0_IRQHandler
1a002540 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a002298 g     F .text	0000003c _fwalk_reent
1a000f48 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002f14 g     O .text	00000020 __sf_fake_stdout
1a001dd4  w    F .text	00000002 .hidden __aeabi_idiv0
1a00136c g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a00231c g     F .text	00000080 __smakebuf_r
1a002858 g     F .text	00000224 _printf_i
1a000ec8 g     F .text	00000034 Chip_Clock_Enable
1a001492 g     F .text	0000000a UART3_IRQHandler
10000164 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00189a g     F .text	00000054 gpioRead
1a001920 g     F .text	000000f4 boardInit
10000160 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002540 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0014a8 g     F .text	00000018 tickPowerSet
1a000e00 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00121c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a00073c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 59 03 00 1a 79 01 00 1a 7b 01 00 1a     ....Y...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 36 75 ff 53     }...........6u.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	3d 15 00 1a                                         =...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	05 19 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	75 15 00 1a b5 15 00 1a f5 15 00 1a 39 16 00 1a     u...........9...
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 89 14 00 1a 93 14 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	b9 1a 00 1a c3 1a 00 1a cd 1a 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002f78 	.word	0x1a002f78
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000128 	.word	0x00000128
1a000120:	1a002f78 	.word	0x1a002f78
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002f78 	.word	0x1a002f78
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002f78 	.word	0x1a002f78
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002f78 	.word	0x1a002f78
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000128 	.word	0x10000128
1a000154:	00000054 	.word	0x00000054
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
    PendSV_Handler,                 // The PendSV handler
    SysTick_Handler,                // The SysTick handler
};

__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
        *pulDest++ = *pulSrc++;
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 f83a 	bl	1a001238 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <onRx>:
#include "sapi.h"

void onRx( void *noUsado )
{
1a000300:	b508      	push	{r3, lr}
   char c = uartRxRead( UART_USB );
1a000302:	2003      	movs	r0, #3
1a000304:	f001 f878 	bl	1a0013f8 <uartRxRead>
   printf( "Recibimos <<%c>> por UART\r\n", c );
1a000308:	4601      	mov	r1, r0
1a00030a:	4802      	ldr	r0, [pc, #8]	; (1a000314 <onRx+0x14>)
1a00030c:	f001 fd90 	bl	1a001e30 <iprintf>
}
1a000310:	bd08      	pop	{r3, pc}
1a000312:	bf00      	nop
1a000314:	1a002bb4 	.word	0x1a002bb4

1a000318 <main>:

int main(void)
{
1a000318:	b508      	push	{r3, lr}
   /* Inicializar la placa */
   boardConfig();
1a00031a:	f001 fb01 	bl	1a001920 <boardInit>

   /* Inicializar la UART_USB junto con las interrupciones de Tx y Rx */
   uartConfig(UART_USB, 115200);     
1a00031e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000322:	2003      	movs	r0, #3
1a000324:	f001 f872 	bl	1a00140c <uartInit>
   // Seteo un callback al evento de recepcion y habilito su interrupcion
   uartCallbackSet(UART_USB, UART_RECEIVE, onRx, NULL);
1a000328:	2300      	movs	r3, #0
1a00032a:	4a09      	ldr	r2, [pc, #36]	; (1a000350 <main+0x38>)
1a00032c:	4619      	mov	r1, r3
1a00032e:	2003      	movs	r0, #3
1a000330:	f001 f81c 	bl	1a00136c <uartCallbackSet>
   // Habilito todas las interrupciones de UART_USB
   uartInterrupt(UART_USB, true);
1a000334:	2101      	movs	r1, #1
1a000336:	2003      	movs	r0, #3
1a000338:	f000 ffd0 	bl	1a0012dc <uartInterrupt>
   
   while(TRUE) {
      // Una tarea muy bloqueante para demostrar que la interrupcion funcina
      gpioToggle(LEDB);
1a00033c:	202c      	movs	r0, #44	; 0x2c
1a00033e:	f001 fad6 	bl	1a0018ee <gpioToggle>
      delay(1000);
1a000342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000346:	2100      	movs	r1, #0
1a000348:	f001 fb64 	bl	1a001a14 <delay>
1a00034c:	e7f6      	b.n	1a00033c <main+0x24>
1a00034e:	bf00      	nop
1a000350:	1a000301 	.word	0x1a000301

1a000354 <initialise_monitor_handles>:

WEAK void initialise_monitor_handles(void);

void initialise_monitor_handles(void)
{
}
1a000354:	4770      	bx	lr
1a000356:	Address 0x000000001a000356 is out of bounds.


1a000358 <Reset_Handler>:
extern unsigned int __data_section_table;
extern unsigned int __data_section_table_end;
extern unsigned int __bss_section_table;
extern unsigned int __bss_section_table_end;

void Reset_Handler(void) {
1a000358:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00035a:	b672      	cpsid	i

    volatile unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00035c:	4b19      	ldr	r3, [pc, #100]	; (1a0003c4 <Reset_Handler+0x6c>)
1a00035e:	4a1a      	ldr	r2, [pc, #104]	; (1a0003c8 <Reset_Handler+0x70>)
1a000360:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000362:	3304      	adds	r3, #4
1a000364:	4a19      	ldr	r2, [pc, #100]	; (1a0003cc <Reset_Handler+0x74>)
1a000366:	601a      	str	r2, [r3, #0]

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000368:	2300      	movs	r3, #0
1a00036a:	e005      	b.n	1a000378 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00036c:	4a18      	ldr	r2, [pc, #96]	; (1a0003d0 <Reset_Handler+0x78>)
1a00036e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    *(RESET_CONTROL + 0) = 0x10DF1000;
    *(RESET_CONTROL + 1) = 0x01DFF7FF;

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000376:	3301      	adds	r3, #1
1a000378:	2b07      	cmp	r3, #7
1a00037a:	d9f7      	bls.n	1a00036c <Reset_Handler+0x14>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }
    __asm__ volatile("cpsie i");
1a00037c:	b662      	cpsie	i

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
1a00037e:	4b15      	ldr	r3, [pc, #84]	; (1a0003d4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000380:	e007      	b.n	1a000392 <Reset_Handler+0x3a>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000382:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000386:	689a      	ldr	r2, [r3, #8]
1a000388:	6859      	ldr	r1, [r3, #4]
1a00038a:	6818      	ldr	r0, [r3, #0]
1a00038c:	f7ff fefd 	bl	1a00018a <data_init>

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000390:	4623      	mov	r3, r4

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
1a000392:	4a11      	ldr	r2, [pc, #68]	; (1a0003d8 <Reset_Handler+0x80>)
1a000394:	4293      	cmp	r3, r2
1a000396:	d3f4      	bcc.n	1a000382 <Reset_Handler+0x2a>
1a000398:	e006      	b.n	1a0003a8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a00039a:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a00039c:	6859      	ldr	r1, [r3, #4]
1a00039e:	f854 0b08 	ldr.w	r0, [r4], #8
1a0003a2:	f7ff ff01 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0003a6:	4623      	mov	r3, r4
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
1a0003a8:	4a0c      	ldr	r2, [pc, #48]	; (1a0003dc <Reset_Handler+0x84>)
1a0003aa:	4293      	cmp	r3, r2
1a0003ac:	d3f5      	bcc.n	1a00039a <Reset_Handler+0x42>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
    }

    SystemInit();
1a0003ae:	f000 ff19 	bl	1a0011e4 <SystemInit>

    __libc_init_array();
1a0003b2:	f001 fd11 	bl	1a001dd8 <__libc_init_array>
    initialise_monitor_handles();
1a0003b6:	f7ff ffcd 	bl	1a000354 <initialise_monitor_handles>
    main();
1a0003ba:	f7ff ffad 	bl	1a000318 <main>
    while (1) {
        __asm__ volatile("wfi");
1a0003be:	bf30      	wfi
1a0003c0:	e7fd      	b.n	1a0003be <Reset_Handler+0x66>
1a0003c2:	bf00      	nop
1a0003c4:	40053100 	.word	0x40053100
1a0003c8:	10df1000 	.word	0x10df1000
1a0003cc:	01dff7ff 	.word	0x01dff7ff
1a0003d0:	e000e280 	.word	0xe000e280
1a0003d4:	1a000114 	.word	0x1a000114
1a0003d8:	1a000150 	.word	0x1a000150
1a0003dc:	1a000178 	.word	0x1a000178

1a0003e0 <_fini>:
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

WEAK void _fini(void);
void _fini(void) {}
1a0003e0:	4770      	bx	lr

1a0003e2 <_init>:

WEAK void _init(void);
void _init(void) {}
1a0003e2:	4770      	bx	lr

1a0003e4 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0003e4:	2309      	movs	r3, #9
1a0003e6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003ec:	4770      	bx	lr

1a0003ee <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0003ee:	2358      	movs	r3, #88	; 0x58
1a0003f0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003f6:	4770      	bx	lr

1a0003f8 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0003f8:	2902      	cmp	r1, #2
1a0003fa:	d801      	bhi.n	1a000400 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0003fc:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0003fe:	4770      	bx	lr
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000400:	2309      	movs	r3, #9
1a000402:	6003      	str	r3, [r0, #0]
       return -1;
1a000404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000408:	4770      	bx	lr

1a00040a <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00040a:	2358      	movs	r3, #88	; 0x58
1a00040c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00040e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000412:	4770      	bx	lr

1a000414 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000414:	2902      	cmp	r1, #2
1a000416:	d81f      	bhi.n	1a000458 <_read_r+0x44>
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00041c:	461d      	mov	r5, r3
1a00041e:	4617      	mov	r7, r2
1a000420:	4606      	mov	r6, r0
  size_t i = 0;
1a000422:	2400      	movs	r4, #0
  switch (fd) {
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000424:	42ac      	cmp	r4, r5
1a000426:	d211      	bcs.n	1a00044c <_read_r+0x38>
         int c = __stdio_getchar();
1a000428:	f000 f92d 	bl	1a000686 <__stdio_getchar>
         if( c != -1 ){
1a00042c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000430:	d0f8      	beq.n	1a000424 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000432:	f104 0801 	add.w	r8, r4, #1
1a000436:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000438:	280d      	cmp	r0, #13
1a00043a:	d003      	beq.n	1a000444 <_read_r+0x30>
1a00043c:	280a      	cmp	r0, #10
1a00043e:	d001      	beq.n	1a000444 <_read_r+0x30>
  case 1:
  case 2:
      while( i < n ){
         int c = __stdio_getchar();
         if( c != -1 ){
            ((char*) b)[i++] = (char) c;
1a000440:	4644      	mov	r4, r8
1a000442:	e7ef      	b.n	1a000424 <_read_r+0x10>
            if( c == '\r' || c == '\n' ){
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000444:	f000 f91f 	bl	1a000686 <__stdio_getchar>
               return i;
1a000448:	4640      	mov	r0, r8
1a00044a:	e003      	b.n	1a000454 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00044c:	2313      	movs	r3, #19
1a00044e:	6033      	str	r3, [r6, #0]
      return -1;
1a000450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         }
      }
      SET_ERR(ENODEV);
      return -1;
  default:
      SET_ERR(ENODEV);
1a000458:	2313      	movs	r3, #19
1a00045a:	6003      	str	r3, [r0, #0]
      return -1;
1a00045c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
1a000460:	4770      	bx	lr

1a000462 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000462:	2902      	cmp	r1, #2
1a000464:	d80c      	bhi.n	1a000480 <_write_r+0x1e>
   UNUSED(st);
   SET_ERR(ENOSYS);
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000466:	b570      	push	{r4, r5, r6, lr}
1a000468:	461d      	mov	r5, r3
1a00046a:	4616      	mov	r6, r2
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00046c:	2400      	movs	r4, #0
1a00046e:	e003      	b.n	1a000478 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000470:	5d30      	ldrb	r0, [r6, r4]
1a000472:	f000 f903 	bl	1a00067c <__stdio_putchar>
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000476:	3401      	adds	r4, #1
1a000478:	42ac      	cmp	r4, r5
1a00047a:	d3f9      	bcc.n	1a000470 <_write_r+0xe>
           __stdio_putchar(((char*) b)[i]);
       return n;
1a00047c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00047e:	bd70      	pop	{r4, r5, r6, pc}
   case 2:
       for (i = 0; i < n; i++)
           __stdio_putchar(((char*) b)[i]);
       return n;
   default:
       SET_ERR(ENODEV);
1a000480:	2313      	movs	r3, #19
1a000482:	6003      	str	r3, [r0, #0]
       return -1;
1a000484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   }
}
1a000488:	4770      	bx	lr
1a00048a:	Address 0x000000001a00048a is out of bounds.


1a00048c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00048c:	4b05      	ldr	r3, [pc, #20]	; (1a0004a4 <_sbrk_r+0x18>)
1a00048e:	681b      	ldr	r3, [r3, #0]
1a000490:	b123      	cbz	r3, 1a00049c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000492:	4b04      	ldr	r3, [pc, #16]	; (1a0004a4 <_sbrk_r+0x18>)
1a000494:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000496:	4401      	add	r1, r0
1a000498:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00049a:	4770      	bx	lr
void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
       heap_end = &_pvHeapStart;
1a00049c:	4b01      	ldr	r3, [pc, #4]	; (1a0004a4 <_sbrk_r+0x18>)
1a00049e:	4a02      	ldr	r2, [pc, #8]	; (1a0004a8 <_sbrk_r+0x1c>)
1a0004a0:	601a      	str	r2, [r3, #0]
1a0004a2:	e7f6      	b.n	1a000492 <_sbrk_r+0x6>
1a0004a4:	10000128 	.word	0x10000128
1a0004a8:	1000017c 	.word	0x1000017c

1a0004ac <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0004ac:	2200      	movs	r2, #0
1a0004ae:	2a05      	cmp	r2, #5
1a0004b0:	d819      	bhi.n	1a0004e6 <Board_LED_Init+0x3a>
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0004b2:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0004b4:	490c      	ldr	r1, [pc, #48]	; (1a0004e8 <Board_LED_Init+0x3c>)
1a0004b6:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0004ba:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0004be:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0004c0:	4b0a      	ldr	r3, [pc, #40]	; (1a0004ec <Board_LED_Init+0x40>)
1a0004c2:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0004c6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0004ca:	2001      	movs	r0, #1
1a0004cc:	40a0      	lsls	r0, r4
1a0004ce:	4301      	orrs	r1, r0
1a0004d0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0004d4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0004d8:	2100      	movs	r1, #0
1a0004da:	5519      	strb	r1, [r3, r4]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0004dc:	3201      	adds	r2, #1
1a0004de:	2a05      	cmp	r2, #5
1a0004e0:	d9e8      	bls.n	1a0004b4 <Board_LED_Init+0x8>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0004e2:	bc70      	pop	{r4, r5, r6}
1a0004e4:	4770      	bx	lr
1a0004e6:	4770      	bx	lr
1a0004e8:	1a002bdc 	.word	0x1a002bdc
1a0004ec:	400f4000 	.word	0x400f4000

1a0004f0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0004f0:	2300      	movs	r3, #0
1a0004f2:	2b03      	cmp	r3, #3
1a0004f4:	d816      	bhi.n	1a000524 <Board_TEC_Init+0x34>
    }
}


static void Board_TEC_Init()
{
1a0004f6:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0004f8:	490b      	ldr	r1, [pc, #44]	; (1a000528 <Board_TEC_Init+0x38>)
1a0004fa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0004fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000502:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000504:	4c09      	ldr	r4, [pc, #36]	; (1a00052c <Board_TEC_Init+0x3c>)
1a000506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00050a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00050e:	2001      	movs	r0, #1
1a000510:	40a8      	lsls	r0, r5
1a000512:	ea21 0100 	bic.w	r1, r1, r0
1a000516:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00051a:	3301      	adds	r3, #1
1a00051c:	2b03      	cmp	r3, #3
1a00051e:	d9eb      	bls.n	1a0004f8 <Board_TEC_Init+0x8>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000520:	bc30      	pop	{r4, r5}
1a000522:	4770      	bx	lr
1a000524:	4770      	bx	lr
1a000526:	bf00      	nop
1a000528:	1a002bd4 	.word	0x1a002bd4
1a00052c:	400f4000 	.word	0x400f4000

1a000530 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000530:	2300      	movs	r3, #0
1a000532:	2b08      	cmp	r3, #8
1a000534:	d816      	bhi.n	1a000564 <Board_GPIO_Init+0x34>
    }
}


static void Board_GPIO_Init()
{
1a000536:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000538:	490b      	ldr	r1, [pc, #44]	; (1a000568 <Board_GPIO_Init+0x38>)
1a00053a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00053e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000542:	784d      	ldrb	r5, [r1, #1]
1a000544:	4c09      	ldr	r4, [pc, #36]	; (1a00056c <Board_GPIO_Init+0x3c>)
1a000546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00054a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00054e:	2001      	movs	r0, #1
1a000550:	40a8      	lsls	r0, r5
1a000552:	ea21 0100 	bic.w	r1, r1, r0
1a000556:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00055a:	3301      	adds	r3, #1
1a00055c:	2b08      	cmp	r3, #8
1a00055e:	d9eb      	bls.n	1a000538 <Board_GPIO_Init+0x8>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000560:	bc30      	pop	{r4, r5}
1a000562:	4770      	bx	lr
1a000564:	4770      	bx	lr
1a000566:	bf00      	nop
1a000568:	1a002be8 	.word	0x1a002be8
1a00056c:	400f4000 	.word	0x400f4000

1a000570 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000570:	b510      	push	{r4, lr}
1a000572:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000574:	4c08      	ldr	r4, [pc, #32]	; (1a000598 <Board_ADC_Init+0x28>)
1a000576:	4669      	mov	r1, sp
1a000578:	4620      	mov	r0, r4
1a00057a:	f000 f9dd 	bl	1a000938 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00057e:	4a07      	ldr	r2, [pc, #28]	; (1a00059c <Board_ADC_Init+0x2c>)
1a000580:	4669      	mov	r1, sp
1a000582:	4620      	mov	r0, r4
1a000584:	f000 f9f8 	bl	1a000978 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000588:	2200      	movs	r2, #0
1a00058a:	4669      	mov	r1, sp
1a00058c:	4620      	mov	r0, r4
1a00058e:	f000 fa0c 	bl	1a0009aa <Chip_ADC_SetResolution>
}
1a000592:	b002      	add	sp, #8
1a000594:	bd10      	pop	{r4, pc}
1a000596:	bf00      	nop
1a000598:	400e3000 	.word	0x400e3000
1a00059c:	00061a80 	.word	0x00061a80

1a0005a0 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0005a0:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0005a2:	4c0b      	ldr	r4, [pc, #44]	; (1a0005d0 <Board_SPI_Init+0x30>)
1a0005a4:	4620      	mov	r0, r4
1a0005a6:	f000 fdc3 	bl	1a001130 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0005aa:	6863      	ldr	r3, [r4, #4]
1a0005ac:	f023 0304 	bic.w	r3, r3, #4
1a0005b0:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0005b2:	6823      	ldr	r3, [r4, #0]
1a0005b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0005b8:	f043 0307 	orr.w	r3, r3, #7
1a0005bc:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0005be:	4905      	ldr	r1, [pc, #20]	; (1a0005d4 <Board_SPI_Init+0x34>)
1a0005c0:	4620      	mov	r0, r4
1a0005c2:	f000 fd96 	bl	1a0010f2 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0005c6:	6863      	ldr	r3, [r4, #4]
1a0005c8:	f043 0302 	orr.w	r3, r3, #2
1a0005cc:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a0005ce:	bd10      	pop	{r4, pc}
1a0005d0:	400c5000 	.word	0x400c5000
1a0005d4:	000186a0 	.word	0x000186a0

1a0005d8 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a0005d8:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0005da:	2000      	movs	r0, #0
1a0005dc:	f000 fdd4 	bl	1a001188 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0005e0:	4b04      	ldr	r3, [pc, #16]	; (1a0005f4 <Board_I2C_Init+0x1c>)
1a0005e2:	f640 0208 	movw	r2, #2056	; 0x808
1a0005e6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0005ea:	4903      	ldr	r1, [pc, #12]	; (1a0005f8 <Board_I2C_Init+0x20>)
1a0005ec:	2000      	movs	r0, #0
1a0005ee:	f000 fddd 	bl	1a0011ac <Chip_I2C_SetClockRate>
}
1a0005f2:	bd08      	pop	{r3, pc}
1a0005f4:	40086000 	.word	0x40086000
1a0005f8:	000f4240 	.word	0x000f4240

1a0005fc <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a0005fc:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0005fe:	4c07      	ldr	r4, [pc, #28]	; (1a00061c <Board_Debug_Init+0x20>)
1a000600:	4620      	mov	r0, r4
1a000602:	f000 f8b7 	bl	1a000774 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000606:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00060a:	4620      	mov	r0, r4
1a00060c:	f000 f8fc 	bl	1a000808 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000610:	2303      	movs	r3, #3
1a000612:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000614:	2301      	movs	r3, #1
1a000616:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000618:	bd10      	pop	{r4, pc}
1a00061a:	bf00      	nop
1a00061c:	400c1000 	.word	0x400c1000

1a000620 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000620:	4b03      	ldr	r3, [pc, #12]	; (1a000630 <Board_UARTPutChar+0x10>)
1a000622:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000624:	f013 0f20 	tst.w	r3, #32
1a000628:	d0fa      	beq.n	1a000620 <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00062a:	4b01      	ldr	r3, [pc, #4]	; (1a000630 <Board_UARTPutChar+0x10>)
1a00062c:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a00062e:	4770      	bx	lr
1a000630:	400c1000 	.word	0x400c1000

1a000634 <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000634:	4b05      	ldr	r3, [pc, #20]	; (1a00064c <Board_UARTGetChar+0x18>)
1a000636:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000638:	f013 0f01 	tst.w	r3, #1
1a00063c:	d003      	beq.n	1a000646 <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00063e:	4b03      	ldr	r3, [pc, #12]	; (1a00064c <Board_UARTGetChar+0x18>)
1a000640:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000642:	b2c0      	uxtb	r0, r0
1a000644:	4770      	bx	lr
    }
    return EOF;
1a000646:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00064a:	4770      	bx	lr
1a00064c:	400c1000 	.word	0x400c1000

1a000650 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000650:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000652:	f7ff ffd3 	bl	1a0005fc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000656:	4808      	ldr	r0, [pc, #32]	; (1a000678 <Board_Init+0x28>)
1a000658:	f000 fd2a 	bl	1a0010b0 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a00065c:	f7ff ff68 	bl	1a000530 <Board_GPIO_Init>
   Board_ADC_Init();
1a000660:	f7ff ff86 	bl	1a000570 <Board_ADC_Init>
   Board_SPI_Init();
1a000664:	f7ff ff9c 	bl	1a0005a0 <Board_SPI_Init>
   Board_I2C_Init();
1a000668:	f7ff ffb6 	bl	1a0005d8 <Board_I2C_Init>

   Board_LED_Init();
1a00066c:	f7ff ff1e 	bl	1a0004ac <Board_LED_Init>
   Board_TEC_Init();
1a000670:	f7ff ff3e 	bl	1a0004f0 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a000674:	bd08      	pop	{r3, pc}
1a000676:	bf00      	nop
1a000678:	400f4000 	.word	0x400f4000

1a00067c <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a00067c:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00067e:	b2c0      	uxtb	r0, r0
1a000680:	f7ff ffce 	bl	1a000620 <Board_UARTPutChar>
}
1a000684:	bd08      	pop	{r3, pc}

1a000686 <__stdio_getchar>:

int __stdio_getchar() {
1a000686:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000688:	f7ff ffd4 	bl	1a000634 <Board_UARTGetChar>
}
1a00068c:	bd08      	pop	{r3, pc}

1a00068e <__stdio_init>:

void __stdio_init() {
1a00068e:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000690:	f7ff ffb4 	bl	1a0005fc <Board_Debug_Init>
1a000694:	bd08      	pop	{r3, pc}
1a000696:	Address 0x000000001a000696 is out of bounds.


1a000698 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000698:	2300      	movs	r3, #0
1a00069a:	2b1c      	cmp	r3, #28
1a00069c:	d812      	bhi.n	1a0006c4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00069e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0006a0:	4a09      	ldr	r2, [pc, #36]	; (1a0006c8 <Board_SetupMuxing+0x30>)
1a0006a2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0006a6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0006aa:	784a      	ldrb	r2, [r1, #1]
1a0006ac:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0006ae:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0006b2:	4906      	ldr	r1, [pc, #24]	; (1a0006cc <Board_SetupMuxing+0x34>)
1a0006b4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0006b8:	3301      	adds	r3, #1
1a0006ba:	2b1c      	cmp	r3, #28
1a0006bc:	d9f0      	bls.n	1a0006a0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0006be:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0006c2:	4770      	bx	lr
1a0006c4:	4770      	bx	lr
1a0006c6:	bf00      	nop
1a0006c8:	1a002c04 	.word	0x1a002c04
1a0006cc:	40086000 	.word	0x40086000

1a0006d0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0006d0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0006d2:	4a17      	ldr	r2, [pc, #92]	; (1a000730 <Board_SetupClocking+0x60>)
1a0006d4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0006d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006dc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006e0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0006e4:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0006e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006ec:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006f0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0006f4:	2201      	movs	r2, #1
1a0006f6:	490f      	ldr	r1, [pc, #60]	; (1a000734 <Board_SetupClocking+0x64>)
1a0006f8:	2006      	movs	r0, #6
1a0006fa:	f000 fc2f 	bl	1a000f5c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0006fe:	2400      	movs	r4, #0
1a000700:	b14c      	cbz	r4, 1a000716 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000702:	4b0b      	ldr	r3, [pc, #44]	; (1a000730 <Board_SetupClocking+0x60>)
1a000704:	685a      	ldr	r2, [r3, #4]
1a000706:	f022 020c 	bic.w	r2, r2, #12
1a00070a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00070c:	685a      	ldr	r2, [r3, #4]
1a00070e:	f042 0203 	orr.w	r2, r2, #3
1a000712:	605a      	str	r2, [r3, #4]
}
1a000714:	bd10      	pop	{r4, pc}
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000716:	4808      	ldr	r0, [pc, #32]	; (1a000738 <Board_SetupClocking+0x68>)
1a000718:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00071c:	2301      	movs	r3, #1
1a00071e:	788a      	ldrb	r2, [r1, #2]
1a000720:	7849      	ldrb	r1, [r1, #1]
1a000722:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000726:	f000 fb6b 	bl	1a000e00 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00072a:	3401      	adds	r4, #1
1a00072c:	e7e8      	b.n	1a000700 <Board_SetupClocking+0x30>
1a00072e:	bf00      	nop
1a000730:	40043000 	.word	0x40043000
1a000734:	0c28cb00 	.word	0x0c28cb00
1a000738:	1a002c00 	.word	0x1a002c00

1a00073c <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00073c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00073e:	f7ff ffab 	bl	1a000698 <Board_SetupMuxing>
    Board_SetupClocking();
1a000742:	f7ff ffc5 	bl	1a0006d0 <Board_SetupClocking>
}
1a000746:	bd08      	pop	{r3, pc}

1a000748 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000748:	4b09      	ldr	r3, [pc, #36]	; (1a000770 <Chip_UART_GetIndex+0x28>)
1a00074a:	4298      	cmp	r0, r3
1a00074c:	d009      	beq.n	1a000762 <Chip_UART_GetIndex+0x1a>
1a00074e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000752:	4298      	cmp	r0, r3
1a000754:	d007      	beq.n	1a000766 <Chip_UART_GetIndex+0x1e>
1a000756:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00075a:	4298      	cmp	r0, r3
1a00075c:	d005      	beq.n	1a00076a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00075e:	2000      	movs	r0, #0
1a000760:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000762:	2002      	movs	r0, #2
1a000764:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000766:	2003      	movs	r0, #3
1a000768:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a00076a:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a00076c:	4770      	bx	lr
1a00076e:	bf00      	nop
1a000770:	400c1000 	.word	0x400c1000

1a000774 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000774:	b530      	push	{r4, r5, lr}
1a000776:	b083      	sub	sp, #12
1a000778:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00077a:	f7ff ffe5 	bl	1a000748 <Chip_UART_GetIndex>
1a00077e:	2301      	movs	r3, #1
1a000780:	461a      	mov	r2, r3
1a000782:	4619      	mov	r1, r3
1a000784:	4d0e      	ldr	r5, [pc, #56]	; (1a0007c0 <Chip_UART_Init+0x4c>)
1a000786:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00078a:	f000 fb7f 	bl	1a000e8c <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a00078e:	2307      	movs	r3, #7
1a000790:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a000792:	2300      	movs	r3, #0
1a000794:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000796:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000798:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00079a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00079c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00079e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0007a0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0007a2:	4b08      	ldr	r3, [pc, #32]	; (1a0007c4 <Chip_UART_Init+0x50>)
1a0007a4:	429c      	cmp	r4, r3
1a0007a6:	d006      	beq.n	1a0007b6 <Chip_UART_Init+0x42>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0007a8:	2303      	movs	r3, #3
1a0007aa:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0007ac:	2310      	movs	r3, #16
1a0007ae:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0007b0:	9b01      	ldr	r3, [sp, #4]
}
1a0007b2:	b003      	add	sp, #12
1a0007b4:	bd30      	pop	{r4, r5, pc}
	pUART->RS485ADRMATCH = 0;

    /* Clear MCR */
    if (pUART == LPC_UART1) {
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a0007b6:	2300      	movs	r3, #0
1a0007b8:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a0007ba:	69a3      	ldr	r3, [r4, #24]
1a0007bc:	9301      	str	r3, [sp, #4]
1a0007be:	e7f3      	b.n	1a0007a8 <Chip_UART_Init+0x34>
1a0007c0:	1a002c80 	.word	0x1a002c80
1a0007c4:	40082000 	.word	0x40082000

1a0007c8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0007c8:	b538      	push	{r3, r4, r5, lr}
1a0007ca:	4605      	mov	r5, r0
1a0007cc:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0007ce:	f7ff ffbb 	bl	1a000748 <Chip_UART_GetIndex>
1a0007d2:	4b0c      	ldr	r3, [pc, #48]	; (1a000804 <Chip_UART_SetBaud+0x3c>)
1a0007d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0007d8:	f000 fb90 	bl	1a000efc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0007dc:	0123      	lsls	r3, r4, #4
1a0007de:	fbb0 f3f3 	udiv	r3, r0, r3
1a0007e2:	b2d9      	uxtb	r1, r3
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0007e4:	68ea      	ldr	r2, [r5, #12]
1a0007e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0007ea:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0007ec:	6029      	str	r1, [r5, #0]
1a0007ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0007f2:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0007f4:	68ea      	ldr	r2, [r5, #12]
1a0007f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0007fa:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0007fc:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000800:	0900      	lsrs	r0, r0, #4
1a000802:	bd38      	pop	{r3, r4, r5, pc}
1a000804:	1a002c78 	.word	0x1a002c78

1a000808 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00080c:	b083      	sub	sp, #12
1a00080e:	4683      	mov	fp, r0
1a000810:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000812:	f7ff ff99 	bl	1a000748 <Chip_UART_GetIndex>
1a000816:	4b35      	ldr	r3, [pc, #212]	; (1a0008ec <Chip_UART_SetBaudFDR+0xe4>)
1a000818:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00081c:	f000 fb6e 	bl	1a000efc <Chip_Clock_GetRate>
1a000820:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a000822:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000826:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000828:	2300      	movs	r3, #0
1a00082a:	9301      	str	r3, [sp, #4]
1a00082c:	46a2      	mov	sl, r4
1a00082e:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000830:	e02a      	b.n	1a000888 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000832:	4242      	negs	r2, r0
				div ++;
1a000834:	1c4b      	adds	r3, r1, #1
1a000836:	e017      	b.n	1a000868 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000838:	b30a      	cbz	r2, 1a00087e <Chip_UART_SetBaudFDR+0x76>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a00083a:	4617      	mov	r7, r2
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00083c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00083e:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000840:	4699      	mov	r9, r3
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a000842:	3501      	adds	r5, #1
1a000844:	42ac      	cmp	r4, r5
1a000846:	d91e      	bls.n	1a000886 <Chip_UART_SetBaudFDR+0x7e>
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000848:	0933      	lsrs	r3, r6, #4
1a00084a:	0730      	lsls	r0, r6, #28
1a00084c:	fba4 0100 	umull	r0, r1, r4, r0
1a000850:	fb04 1103 	mla	r1, r4, r3, r1
1a000854:	1962      	adds	r2, r4, r5
1a000856:	fb08 f202 	mul.w	r2, r8, r2
1a00085a:	2300      	movs	r3, #0
1a00085c:	f001 f93c 	bl	1a001ad8 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a000860:	4602      	mov	r2, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a000862:	460b      	mov	r3, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a000864:	2800      	cmp	r0, #0
1a000866:	dbe4      	blt.n	1a000832 <Chip_UART_SetBaudFDR+0x2a>
				diff = -diff;
				div ++;
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000868:	4297      	cmp	r7, r2
1a00086a:	d3ea      	bcc.n	1a000842 <Chip_UART_SetBaudFDR+0x3a>
1a00086c:	2b00      	cmp	r3, #0
1a00086e:	d0e8      	beq.n	1a000842 <Chip_UART_SetBaudFDR+0x3a>
1a000870:	0c19      	lsrs	r1, r3, #16
1a000872:	d1e6      	bne.n	1a000842 <Chip_UART_SetBaudFDR+0x3a>
1a000874:	2b02      	cmp	r3, #2
1a000876:	d8df      	bhi.n	1a000838 <Chip_UART_SetBaudFDR+0x30>
1a000878:	2d00      	cmp	r5, #0
1a00087a:	d0dd      	beq.n	1a000838 <Chip_UART_SetBaudFDR+0x30>
1a00087c:	e7e1      	b.n	1a000842 <Chip_UART_SetBaudFDR+0x3a>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a00087e:	4617      	mov	r7, r2
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000880:	9501      	str	r5, [sp, #4]
			sm = m;
1a000882:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000884:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000886:	3401      	adds	r4, #1
1a000888:	b11f      	cbz	r7, 1a000892 <Chip_UART_SetBaudFDR+0x8a>
1a00088a:	2c0f      	cmp	r4, #15
1a00088c:	d801      	bhi.n	1a000892 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a00088e:	2500      	movs	r5, #0
1a000890:	e7d8      	b.n	1a000844 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000892:	f1b9 0f00 	cmp.w	r9, #0
1a000896:	d024      	beq.n	1a0008e2 <Chip_UART_SetBaudFDR+0xda>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000898:	f8db 300c 	ldr.w	r3, [fp, #12]
1a00089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0008a0:	f8cb 300c 	str.w	r3, [fp, #12]
1a0008a4:	fa5f f389 	uxtb.w	r3, r9
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0008a8:	f8cb 3000 	str.w	r3, [fp]
1a0008ac:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0008b0:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0008b4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0008b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0008bc:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0008c0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0008c4:	b2db      	uxtb	r3, r3
1a0008c6:	9901      	ldr	r1, [sp, #4]
1a0008c8:	f001 020f 	and.w	r2, r1, #15
1a0008cc:	4313      	orrs	r3, r2
1a0008ce:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0008d2:	0933      	lsrs	r3, r6, #4
1a0008d4:	fb0a f303 	mul.w	r3, sl, r3
1a0008d8:	448a      	add	sl, r1
1a0008da:	fb09 f90a 	mul.w	r9, r9, sl
1a0008de:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0008e2:	4648      	mov	r0, r9
1a0008e4:	b003      	add	sp, #12
1a0008e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0008ea:	bf00      	nop
1a0008ec:	1a002c78 	.word	0x1a002c78

1a0008f0 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0008f0:	4b03      	ldr	r3, [pc, #12]	; (1a000900 <Chip_ADC_GetClockIndex+0x10>)
1a0008f2:	4298      	cmp	r0, r3
1a0008f4:	d001      	beq.n	1a0008fa <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0008f6:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0008f8:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
		clkADC = CLK_APB3_ADC1;
1a0008fa:	2004      	movs	r0, #4
1a0008fc:	4770      	bx	lr
1a0008fe:	bf00      	nop
1a000900:	400e4000 	.word	0x400e4000

1a000904 <getClkDiv>:
	return clkADC;
}

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000904:	b570      	push	{r4, r5, r6, lr}
1a000906:	460d      	mov	r5, r1
1a000908:	4614      	mov	r4, r2
1a00090a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00090c:	f7ff fff0 	bl	1a0008f0 <Chip_ADC_GetClockIndex>
1a000910:	f000 faf4 	bl	1a000efc <Chip_Clock_GetRate>
	if (burstMode) {
1a000914:	b965      	cbnz	r5, 1a000930 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000916:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00091a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00091e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000922:	0064      	lsls	r4, r4, #1
1a000924:	fbb0 f0f4 	udiv	r0, r0, r4
1a000928:	b2c0      	uxtb	r0, r0
1a00092a:	3801      	subs	r0, #1
	return div;
}
1a00092c:	b2c0      	uxtb	r0, r0
1a00092e:	bd70      	pop	{r4, r5, r6, pc}
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
	if (burstMode) {
		fullAdcRate = adcRate * clks;
1a000930:	fb04 f406 	mul.w	r4, r4, r6
1a000934:	e7f3      	b.n	1a00091e <getClkDiv+0x1a>
1a000936:	Address 0x000000001a000936 is out of bounds.


1a000938 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000938:	b538      	push	{r3, r4, r5, lr}
1a00093a:	4605      	mov	r5, r0
1a00093c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00093e:	f7ff ffd7 	bl	1a0008f0 <Chip_ADC_GetClockIndex>
1a000942:	2301      	movs	r3, #1
1a000944:	461a      	mov	r2, r3
1a000946:	4619      	mov	r1, r3
1a000948:	f000 faa0 	bl	1a000e8c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00094c:	2100      	movs	r1, #0
1a00094e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000950:	4a08      	ldr	r2, [pc, #32]	; (1a000974 <Chip_ADC_Init+0x3c>)
1a000952:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000954:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000956:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000958:	230b      	movs	r3, #11
1a00095a:	4628      	mov	r0, r5
1a00095c:	f7ff ffd2 	bl	1a000904 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000960:	0200      	lsls	r0, r0, #8
1a000962:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000966:	7920      	ldrb	r0, [r4, #4]
1a000968:	0440      	lsls	r0, r0, #17
1a00096a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00096e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000970:	6028      	str	r0, [r5, #0]
}
1a000972:	bd38      	pop	{r3, r4, r5, pc}
1a000974:	00061a80 	.word	0x00061a80

1a000978 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000978:	b570      	push	{r4, r5, r6, lr}
1a00097a:	4605      	mov	r5, r0
1a00097c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00097e:	6804      	ldr	r4, [r0, #0]
1a000980:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000984:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000988:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00098a:	790b      	ldrb	r3, [r1, #4]
1a00098c:	f1c3 030b 	rsb	r3, r3, #11
1a000990:	b2db      	uxtb	r3, r3
1a000992:	7949      	ldrb	r1, [r1, #5]
1a000994:	f7ff ffb6 	bl	1a000904 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000998:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00099c:	7930      	ldrb	r0, [r6, #4]
1a00099e:	0440      	lsls	r0, r0, #17
1a0009a0:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0009a4:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0009a6:	6028      	str	r0, [r5, #0]
}
1a0009a8:	bd70      	pop	{r4, r5, r6, pc}

1a0009aa <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0009aa:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0009ac:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0009ae:	680a      	ldr	r2, [r1, #0]
1a0009b0:	f7ff ffe2 	bl	1a000978 <Chip_ADC_SetSampleRate>
}
1a0009b4:	bd08      	pop	{r3, pc}
1a0009b6:	Address 0x000000001a0009b6 is out of bounds.


1a0009b8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0009b8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0009ba:	680b      	ldr	r3, [r1, #0]
1a0009bc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0009c0:	d002      	beq.n	1a0009c8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0009c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0009c6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0009c8:	4607      	mov	r7, r0
1a0009ca:	2501      	movs	r5, #1
1a0009cc:	e03b      	b.n	1a000a46 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0009ce:	694b      	ldr	r3, [r1, #20]
1a0009d0:	fb03 f302 	mul.w	r3, r3, r2
1a0009d4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0009d8:	e014      	b.n	1a000a04 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0009da:	461c      	mov	r4, r3
1a0009dc:	e020      	b.n	1a000a20 <pll_calc_divs+0x68>
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a0009de:	f1cc 0c00 	rsb	ip, ip, #0
1a0009e2:	e020      	b.n	1a000a26 <pll_calc_divs+0x6e>
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a0009e4:	3201      	adds	r2, #1
1a0009e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0009ea:	dc26      	bgt.n	1a000a3a <pll_calc_divs+0x82>
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0009ec:	680c      	ldr	r4, [r1, #0]
1a0009ee:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0009f2:	d0ec      	beq.n	1a0009ce <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0009f4:	1c73      	adds	r3, r6, #1
1a0009f6:	fa02 fc03 	lsl.w	ip, r2, r3
1a0009fa:	694b      	ldr	r3, [r1, #20]
1a0009fc:	fb03 f30c 	mul.w	r3, r3, ip
1a000a00:	fbb3 f3f5 	udiv	r3, r3, r5
				} else {
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000a04:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a000a54 <pll_calc_divs+0x9c>
1a000a08:	4563      	cmp	r3, ip
1a000a0a:	d9eb      	bls.n	1a0009e4 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000a0c:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a000a58 <pll_calc_divs+0xa0>
1a000a10:	4563      	cmp	r3, ip
1a000a12:	d812      	bhi.n	1a000a3a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000a14:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000a18:	d1df      	bne.n	1a0009da <pll_calc_divs+0x22>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a000a1a:	1c74      	adds	r4, r6, #1
1a000a1c:	fa23 f404 	lsr.w	r4, r3, r4
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a000a20:	ebb0 0c04 	subs.w	ip, r0, r4
1a000a24:	d4db      	bmi.n	1a0009de <pll_calc_divs+0x26>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000a26:	4567      	cmp	r7, ip
1a000a28:	d9dc      	bls.n	1a0009e4 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a000a2a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000a2c:	1c77      	adds	r7, r6, #1
1a000a2e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000a30:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000a32:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000a34:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000a36:	4667      	mov	r7, ip
1a000a38:	e7d4      	b.n	1a0009e4 <pll_calc_divs+0x2c>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000a3a:	3601      	adds	r6, #1
1a000a3c:	2e03      	cmp	r6, #3
1a000a3e:	dc01      	bgt.n	1a000a44 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a000a40:	2201      	movs	r2, #1
1a000a42:	e7d0      	b.n	1a0009e6 <pll_calc_divs+0x2e>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a000a44:	3501      	adds	r5, #1
1a000a46:	2d04      	cmp	r5, #4
1a000a48:	dc01      	bgt.n	1a000a4e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a000a4a:	2600      	movs	r6, #0
1a000a4c:	e7f6      	b.n	1a000a3c <pll_calc_divs+0x84>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a000a4e:	bcf0      	pop	{r4, r5, r6, r7}
1a000a50:	4770      	bx	lr
1a000a52:	bf00      	nop
1a000a54:	094c5eff 	.word	0x094c5eff
1a000a58:	1312d000 	.word	0x1312d000

1a000a5c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a5e:	b099      	sub	sp, #100	; 0x64
1a000a60:	4605      	mov	r5, r0
1a000a62:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000a64:	225c      	movs	r2, #92	; 0x5c
1a000a66:	2100      	movs	r1, #0
1a000a68:	a801      	add	r0, sp, #4
1a000a6a:	f001 f9d9 	bl	1a001e20 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000a6e:	2380      	movs	r3, #128	; 0x80
1a000a70:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000a72:	6963      	ldr	r3, [r4, #20]
1a000a74:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000a76:	7923      	ldrb	r3, [r4, #4]
1a000a78:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000a7c:	4669      	mov	r1, sp
1a000a7e:	4628      	mov	r0, r5
1a000a80:	f7ff ff9a 	bl	1a0009b8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000a84:	9b06      	ldr	r3, [sp, #24]
1a000a86:	42ab      	cmp	r3, r5
1a000a88:	d027      	beq.n	1a000ada <pll_get_frac+0x7e>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a000a8a:	1aeb      	subs	r3, r5, r3
1a000a8c:	d42e      	bmi.n	1a000aec <pll_get_frac+0x90>
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000a8e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a96:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000a98:	6963      	ldr	r3, [r4, #20]
1a000a9a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000a9c:	7923      	ldrb	r3, [r4, #4]
1a000a9e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000aa2:	a910      	add	r1, sp, #64	; 0x40
1a000aa4:	4628      	mov	r0, r5
1a000aa6:	f7ff ff87 	bl	1a0009b8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000aac:	42ab      	cmp	r3, r5
1a000aae:	d01f      	beq.n	1a000af0 <pll_get_frac+0x94>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a000ab0:	1aeb      	subs	r3, r5, r3
1a000ab2:	d425      	bmi.n	1a000b00 <pll_get_frac+0xa4>
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000ab4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000ab6:	4b2b      	ldr	r3, [pc, #172]	; (1a000b64 <pll_get_frac+0x108>)
1a000ab8:	429d      	cmp	r5, r3
1a000aba:	d923      	bls.n	1a000b04 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a000abe:	1aed      	subs	r5, r5, r3
1a000ac0:	d433      	bmi.n	1a000b2a <pll_get_frac+0xce>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000ac2:	42ae      	cmp	r6, r5
1a000ac4:	dc3b      	bgt.n	1a000b3e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000ac6:	42be      	cmp	r6, r7
1a000ac8:	dc31      	bgt.n	1a000b2e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000aca:	466d      	mov	r5, sp
1a000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ad8:	e006      	b.n	1a000ae8 <pll_get_frac+0x8c>
	pll[0].ctrl |= (1 << 7);
	pll[0].fin = ppll->fin;
	pll[0].srcin = ppll->srcin;
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
1a000ada:	466d      	mov	r5, sp
1a000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ae0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000ae8:	b019      	add	sp, #100	; 0x64
1a000aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a000aec:	425b      	negs	r3, r3
1a000aee:	e7ce      	b.n	1a000a8e <pll_get_frac+0x32>
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
	pll[2].fin = ppll->fin;
	pll[2].srcin = ppll->srcin;
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
1a000af0:	ad10      	add	r5, sp, #64	; 0x40
1a000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000af6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000afe:	e7f3      	b.n	1a000ae8 <pll_get_frac+0x8c>
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a000b00:	425b      	negs	r3, r3
1a000b02:	e7d7      	b.n	1a000ab4 <pll_get_frac+0x58>
	}
	diff[2] = ABS(freq - pll[2].fout);
	
	if (freq <= 110000000) {
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a000b04:	2340      	movs	r3, #64	; 0x40
1a000b06:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000b08:	6963      	ldr	r3, [r4, #20]
1a000b0a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000b0c:	a908      	add	r1, sp, #32
1a000b0e:	4628      	mov	r0, r5
1a000b10:	f7ff ff52 	bl	1a0009b8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000b16:	42ab      	cmp	r3, r5
1a000b18:	d1d0      	bne.n	1a000abc <pll_get_frac+0x60>
			*ppll = pll[1];
1a000b1a:	ad08      	add	r5, sp, #32
1a000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000b28:	e7de      	b.n	1a000ae8 <pll_get_frac+0x8c>
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
		return -val;
1a000b2a:	426d      	negs	r5, r5
1a000b2c:	e7c9      	b.n	1a000ac2 <pll_get_frac+0x66>
	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
		if (diff[0] <= diff[2]) {
			*ppll = pll[0];
		} else {
			*ppll = pll[2];
1a000b2e:	ad10      	add	r5, sp, #64	; 0x40
1a000b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b3c:	e7d4      	b.n	1a000ae8 <pll_get_frac+0x8c>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a000b3e:	42af      	cmp	r7, r5
1a000b40:	db07      	blt.n	1a000b52 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000b42:	ad08      	add	r5, sp, #32
1a000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b50:	e7ca      	b.n	1a000ae8 <pll_get_frac+0x8c>
		} else {
			*ppll = pll[2];
1a000b52:	ad10      	add	r5, sp, #64	; 0x40
1a000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b60:	e7c2      	b.n	1a000ae8 <pll_get_frac+0x8c>
1a000b62:	bf00      	nop
1a000b64:	068e7780 	.word	0x068e7780

1a000b68 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000b68:	b430      	push	{r4, r5}
1a000b6a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000b6c:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000b6e:	201c      	movs	r0, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b70:	e000      	b.n	1a000b74 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000b72:	3301      	adds	r3, #1
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000b74:	281c      	cmp	r0, #28
1a000b76:	d118      	bne.n	1a000baa <Chip_Clock_FindBaseClock+0x42>
1a000b78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b7c:	0051      	lsls	r1, r2, #1
1a000b7e:	4a0c      	ldr	r2, [pc, #48]	; (1a000bb0 <Chip_Clock_FindBaseClock+0x48>)
1a000b80:	440a      	add	r2, r1
1a000b82:	7914      	ldrb	r4, [r2, #4]
1a000b84:	4284      	cmp	r4, r0
1a000b86:	d010      	beq.n	1a000baa <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000b88:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000b8c:	004a      	lsls	r2, r1, #1
1a000b8e:	4908      	ldr	r1, [pc, #32]	; (1a000bb0 <Chip_Clock_FindBaseClock+0x48>)
1a000b90:	5a8a      	ldrh	r2, [r1, r2]
1a000b92:	42aa      	cmp	r2, r5
1a000b94:	d8ed      	bhi.n	1a000b72 <Chip_Clock_FindBaseClock+0xa>
1a000b96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b9a:	0051      	lsls	r1, r2, #1
1a000b9c:	4a04      	ldr	r2, [pc, #16]	; (1a000bb0 <Chip_Clock_FindBaseClock+0x48>)
1a000b9e:	440a      	add	r2, r1
1a000ba0:	8852      	ldrh	r2, [r2, #2]
1a000ba2:	42aa      	cmp	r2, r5
1a000ba4:	d3e5      	bcc.n	1a000b72 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000ba6:	4620      	mov	r0, r4
1a000ba8:	e7e4      	b.n	1a000b74 <Chip_Clock_FindBaseClock+0xc>
			i++;
		}
	}

	return baseclk;
}
1a000baa:	bc30      	pop	{r4, r5}
1a000bac:	4770      	bx	lr
1a000bae:	bf00      	nop
1a000bb0:	1a002c94 	.word	0x1a002c94

1a000bb4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000bb4:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000bba:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000bbc:	4a0d      	ldr	r2, [pc, #52]	; (1a000bf4 <Chip_Clock_EnableCrystal+0x40>)
1a000bbe:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000bc0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000bc4:	6992      	ldr	r2, [r2, #24]
1a000bc6:	428a      	cmp	r2, r1
1a000bc8:	d001      	beq.n	1a000bce <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000bca:	4a0a      	ldr	r2, [pc, #40]	; (1a000bf4 <Chip_Clock_EnableCrystal+0x40>)
1a000bcc:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000bce:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000bd2:	4a09      	ldr	r2, [pc, #36]	; (1a000bf8 <Chip_Clock_EnableCrystal+0x44>)
1a000bd4:	6811      	ldr	r1, [r2, #0]
1a000bd6:	4a09      	ldr	r2, [pc, #36]	; (1a000bfc <Chip_Clock_EnableCrystal+0x48>)
1a000bd8:	4291      	cmp	r1, r2
1a000bda:	d901      	bls.n	1a000be0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000bdc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000be0:	4a04      	ldr	r2, [pc, #16]	; (1a000bf4 <Chip_Clock_EnableCrystal+0x40>)
1a000be2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000be4:	9b01      	ldr	r3, [sp, #4]
1a000be6:	1e5a      	subs	r2, r3, #1
1a000be8:	9201      	str	r2, [sp, #4]
1a000bea:	2b00      	cmp	r3, #0
1a000bec:	d1fa      	bne.n	1a000be4 <Chip_Clock_EnableCrystal+0x30>
}
1a000bee:	b002      	add	sp, #8
1a000bf0:	4770      	bx	lr
1a000bf2:	bf00      	nop
1a000bf4:	40050000 	.word	0x40050000
1a000bf8:	1a002bfc 	.word	0x1a002bfc
1a000bfc:	01312cff 	.word	0x01312cff

1a000c00 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000c00:	3012      	adds	r0, #18
1a000c02:	4b05      	ldr	r3, [pc, #20]	; (1a000c18 <Chip_Clock_GetDividerSource+0x18>)
1a000c04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000c08:	f010 0f01 	tst.w	r0, #1
1a000c0c:	d102      	bne.n	1a000c14 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000c0e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000c12:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a000c14:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000c16:	4770      	bx	lr
1a000c18:	40050000 	.word	0x40050000

1a000c1c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000c1c:	f100 0212 	add.w	r2, r0, #18
1a000c20:	4b03      	ldr	r3, [pc, #12]	; (1a000c30 <Chip_Clock_GetDividerDivisor+0x14>)
1a000c22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000c26:	4b03      	ldr	r3, [pc, #12]	; (1a000c34 <Chip_Clock_GetDividerDivisor+0x18>)
1a000c28:	5c18      	ldrb	r0, [r3, r0]
}
1a000c2a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000c2e:	4770      	bx	lr
1a000c30:	40050000 	.word	0x40050000
1a000c34:	1a002c8c 	.word	0x1a002c8c

1a000c38 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000c38:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000c3a:	2810      	cmp	r0, #16
1a000c3c:	d80a      	bhi.n	1a000c54 <Chip_Clock_GetClockInputHz+0x1c>
1a000c3e:	e8df f000 	tbb	[pc, r0]
1a000c42:	0b42      	.short	0x0b42
1a000c44:	091f160d 	.word	0x091f160d
1a000c48:	2b282522 	.word	0x2b282522
1a000c4c:	322e0909 	.word	0x322e0909
1a000c50:	3a36      	.short	0x3a36
1a000c52:	3e          	.byte	0x3e
1a000c53:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a000c54:	2000      	movs	r0, #0
1a000c56:	e038      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000c58:	481e      	ldr	r0, [pc, #120]	; (1a000cd4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000c5a:	e036      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c5c:	4b1e      	ldr	r3, [pc, #120]	; (1a000cd8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000c5e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c62:	f003 0307 	and.w	r3, r3, #7
1a000c66:	2b04      	cmp	r3, #4
1a000c68:	d130      	bne.n	1a000ccc <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a000c6a:	2000      	movs	r0, #0
1a000c6c:	e02d      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000c6e:	4b1a      	ldr	r3, [pc, #104]	; (1a000cd8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000c70:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c74:	f003 0307 	and.w	r3, r3, #7
1a000c78:	2b04      	cmp	r3, #4
1a000c7a:	d029      	beq.n	1a000cd0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000c7c:	4817      	ldr	r0, [pc, #92]	; (1a000cdc <Chip_Clock_GetClockInputHz+0xa4>)
1a000c7e:	e024      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000c80:	4b17      	ldr	r3, [pc, #92]	; (1a000ce0 <Chip_Clock_GetClockInputHz+0xa8>)
1a000c82:	6818      	ldr	r0, [r3, #0]
		break;
1a000c84:	e021      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000c86:	4b17      	ldr	r3, [pc, #92]	; (1a000ce4 <Chip_Clock_GetClockInputHz+0xac>)
1a000c88:	6818      	ldr	r0, [r3, #0]
		break;
1a000c8a:	e01e      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000c8c:	4b16      	ldr	r3, [pc, #88]	; (1a000ce8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000c8e:	6818      	ldr	r0, [r3, #0]
		break;
1a000c90:	e01b      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000c92:	4b15      	ldr	r3, [pc, #84]	; (1a000ce8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000c94:	6858      	ldr	r0, [r3, #4]
		break;
1a000c96:	e018      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000c98:	f000 f86a 	bl	1a000d70 <Chip_Clock_GetMainPLLHz>
		break;
1a000c9c:	e015      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000c9e:	2100      	movs	r1, #0
1a000ca0:	f000 f89c 	bl	1a000ddc <Chip_Clock_GetDivRate>
		break;
1a000ca4:	e011      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000ca6:	2101      	movs	r1, #1
1a000ca8:	f000 f898 	bl	1a000ddc <Chip_Clock_GetDivRate>
		break;
1a000cac:	e00d      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000cae:	2102      	movs	r1, #2
1a000cb0:	f000 f894 	bl	1a000ddc <Chip_Clock_GetDivRate>
		break;
1a000cb4:	e009      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000cb6:	2103      	movs	r1, #3
1a000cb8:	f000 f890 	bl	1a000ddc <Chip_Clock_GetDivRate>
		break;
1a000cbc:	e005      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000cbe:	2104      	movs	r1, #4
1a000cc0:	f000 f88c 	bl	1a000ddc <Chip_Clock_GetDivRate>
		break;
1a000cc4:	e001      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a000cc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000cca:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000ccc:	4803      	ldr	r0, [pc, #12]	; (1a000cdc <Chip_Clock_GetClockInputHz+0xa4>)
1a000cce:	e7fc      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a000cd0:	4806      	ldr	r0, [pc, #24]	; (1a000cec <Chip_Clock_GetClockInputHz+0xb4>)

	default:
		break;
	}

	return rate;
1a000cd2:	e7fa      	b.n	1a000cca <Chip_Clock_GetClockInputHz+0x92>
1a000cd4:	00b71b00 	.word	0x00b71b00
1a000cd8:	40043000 	.word	0x40043000
1a000cdc:	017d7840 	.word	0x017d7840
1a000ce0:	1a002bd0 	.word	0x1a002bd0
1a000ce4:	1a002bfc 	.word	0x1a002bfc
1a000ce8:	1000012c 	.word	0x1000012c
1a000cec:	02faf080 	.word	0x02faf080

1a000cf0 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000cf0:	b538      	push	{r3, r4, r5, lr}
1a000cf2:	4605      	mov	r5, r0
1a000cf4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000cf6:	7908      	ldrb	r0, [r1, #4]
1a000cf8:	f7ff ff9e 	bl	1a000c38 <Chip_Clock_GetClockInputHz>
1a000cfc:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000cfe:	4b19      	ldr	r3, [pc, #100]	; (1a000d64 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000d00:	442b      	add	r3, r5
1a000d02:	4a19      	ldr	r2, [pc, #100]	; (1a000d68 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000d04:	4293      	cmp	r3, r2
1a000d06:	d821      	bhi.n	1a000d4c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000d08:	b318      	cbz	r0, 1a000d52 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000d0a:	2380      	movs	r3, #128	; 0x80
1a000d0c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000d0e:	2300      	movs	r3, #0
1a000d10:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000d12:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000d14:	fbb5 f3f0 	udiv	r3, r5, r0
1a000d18:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000d1a:	4a14      	ldr	r2, [pc, #80]	; (1a000d6c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000d1c:	4295      	cmp	r5, r2
1a000d1e:	d903      	bls.n	1a000d28 <Chip_Clock_CalcMainPLLValue+0x38>
1a000d20:	fb03 f000 	mul.w	r0, r3, r0
1a000d24:	42a8      	cmp	r0, r5
1a000d26:	d007      	beq.n	1a000d38 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000d28:	4621      	mov	r1, r4
1a000d2a:	4628      	mov	r0, r5
1a000d2c:	f7ff fe96 	bl	1a000a5c <pll_get_frac>
		if (!ppll->nsel) {
1a000d30:	68a3      	ldr	r3, [r4, #8]
1a000d32:	b18b      	cbz	r3, 1a000d58 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a000d34:	3b01      	subs	r3, #1
1a000d36:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a000d38:	6923      	ldr	r3, [r4, #16]
1a000d3a:	b183      	cbz	r3, 1a000d5e <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a000d3c:	68e2      	ldr	r2, [r4, #12]
1a000d3e:	b10a      	cbz	r2, 1a000d44 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000d40:	3a01      	subs	r2, #1
1a000d42:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a000d44:	3b01      	subs	r3, #1
1a000d46:	6123      	str	r3, [r4, #16]

	return 0;
1a000d48:	2000      	movs	r0, #0
}
1a000d4a:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d50:	e7fb      	b.n	1a000d4a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d56:	e7f8      	b.n	1a000d4a <Chip_Clock_CalcMainPLLValue+0x5a>
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d5c:	e7f5      	b.n	1a000d4a <Chip_Clock_CalcMainPLLValue+0x5a>
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a000d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000d62:	e7f2      	b.n	1a000d4a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000d64:	ff6b3a10 	.word	0xff6b3a10
1a000d68:	0b940510 	.word	0x0b940510
1a000d6c:	094c5eff 	.word	0x094c5eff

1a000d70 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a000d70:	b530      	push	{r4, r5, lr}
1a000d72:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000d74:	4d17      	ldr	r5, [pc, #92]	; (1a000dd4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000d76:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000d78:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000d7c:	f7ff ff5c 	bl	1a000c38 <Chip_Clock_GetClockInputHz>
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000d80:	4b15      	ldr	r3, [pc, #84]	; (1a000dd8 <Chip_Clock_GetMainPLLHz+0x68>)
1a000d82:	681b      	ldr	r3, [r3, #0]
1a000d84:	9301      	str	r3, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000d86:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000d88:	f013 0f01 	tst.w	r3, #1
1a000d8c:	d01f      	beq.n	1a000dce <Chip_Clock_GetMainPLLHz+0x5e>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a000d8e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000d92:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000d96:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a000d9a:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a000d9e:	3301      	adds	r3, #1
	n = nsel + 1;
1a000da0:	3201      	adds	r2, #1
	p = ptab[psel];
1a000da2:	f10d 0c08 	add.w	ip, sp, #8
1a000da6:	4461      	add	r1, ip
1a000da8:	f811 1c04 	ldrb.w	r1, [r1, #-4]

	if (direct || fbsel) {
1a000dac:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000db0:	d108      	bne.n	1a000dc4 <Chip_Clock_GetMainPLLHz+0x54>
1a000db2:	b93d      	cbnz	r5, 1a000dc4 <Chip_Clock_GetMainPLLHz+0x54>
		return m * (freq / n);
	}

	return (m / (2 * p)) * (freq / n);
1a000db4:	0049      	lsls	r1, r1, #1
1a000db6:	fbb3 f3f1 	udiv	r3, r3, r1
1a000dba:	fbb0 f0f2 	udiv	r0, r0, r2
1a000dbe:	fb00 f003 	mul.w	r0, r0, r3
1a000dc2:	e005      	b.n	1a000dd0 <Chip_Clock_GetMainPLLHz+0x60>
	m = msel + 1;
	n = nsel + 1;
	p = ptab[psel];

	if (direct || fbsel) {
		return m * (freq / n);
1a000dc4:	fbb0 f0f2 	udiv	r0, r0, r2
1a000dc8:	fb03 f000 	mul.w	r0, r3, r0
1a000dcc:	e000      	b.n	1a000dd0 <Chip_Clock_GetMainPLLHz+0x60>
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
		return 0;
1a000dce:	2000      	movs	r0, #0
	if (direct || fbsel) {
		return m * (freq / n);
	}

	return (m / (2 * p)) * (freq / n);
}
1a000dd0:	b003      	add	sp, #12
1a000dd2:	bd30      	pop	{r4, r5, pc}
1a000dd4:	40050000 	.word	0x40050000
1a000dd8:	1a002c88 	.word	0x1a002c88

1a000ddc <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a000ddc:	b538      	push	{r3, r4, r5, lr}
1a000dde:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a000de0:	4608      	mov	r0, r1
1a000de2:	f7ff ff0d 	bl	1a000c00 <Chip_Clock_GetDividerSource>
1a000de6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000de8:	4620      	mov	r0, r4
1a000dea:	f7ff ff17 	bl	1a000c1c <Chip_Clock_GetDividerDivisor>
1a000dee:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000df0:	4628      	mov	r0, r5
1a000df2:	f7ff ff21 	bl	1a000c38 <Chip_Clock_GetClockInputHz>
1a000df6:	3401      	adds	r4, #1
}
1a000df8:	fbb0 f0f4 	udiv	r0, r0, r4
1a000dfc:	bd38      	pop	{r3, r4, r5, pc}
1a000dfe:	Address 0x000000001a000dfe is out of bounds.


1a000e00 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000e00:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e02:	f100 0416 	add.w	r4, r0, #22
1a000e06:	00a4      	lsls	r4, r4, #2
1a000e08:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000e0c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000e10:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000e12:	281b      	cmp	r0, #27
1a000e14:	d813      	bhi.n	1a000e3e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000e16:	2911      	cmp	r1, #17
1a000e18:	d01a      	beq.n	1a000e50 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000e1a:	4d0e      	ldr	r5, [pc, #56]	; (1a000e54 <Chip_Clock_SetBaseClock+0x54>)
1a000e1c:	4025      	ands	r5, r4

			if (autoblocken) {
1a000e1e:	b10a      	cbz	r2, 1a000e24 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000e20:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000e24:	b10b      	cbz	r3, 1a000e2a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000e26:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000e2a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000e2e:	3016      	adds	r0, #22
1a000e30:	0080      	lsls	r0, r0, #2
1a000e32:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e36:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e3a:	6045      	str	r5, [r0, #4]
1a000e3c:	e008      	b.n	1a000e50 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000e3e:	f044 0401 	orr.w	r4, r4, #1
1a000e42:	3016      	adds	r0, #22
1a000e44:	0080      	lsls	r0, r0, #2
1a000e46:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e4a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e4e:	6044      	str	r4, [r0, #4]
	}
}
1a000e50:	bc30      	pop	{r4, r5}
1a000e52:	4770      	bx	lr
1a000e54:	e0fff7fe 	.word	0xe0fff7fe

1a000e58 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000e58:	281b      	cmp	r0, #27
1a000e5a:	d80c      	bhi.n	1a000e76 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e5c:	3016      	adds	r0, #22
1a000e5e:	0080      	lsls	r0, r0, #2
1a000e60:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000e64:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000e68:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000e6a:	f010 0f01 	tst.w	r0, #1
1a000e6e:	d104      	bne.n	1a000e7a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000e70:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000e74:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a000e76:	2011      	movs	r0, #17
1a000e78:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a000e7a:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000e7c:	4770      	bx	lr

1a000e7e <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a000e7e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000e80:	f7ff ffea 	bl	1a000e58 <Chip_Clock_GetBaseClock>
1a000e84:	f7ff fed8 	bl	1a000c38 <Chip_Clock_GetClockInputHz>
}
1a000e88:	bd08      	pop	{r3, pc}
1a000e8a:	Address 0x000000001a000e8a is out of bounds.


1a000e8c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000e8c:	b969      	cbnz	r1, 1a000eaa <Chip_Clock_EnableOpts+0x1e>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a000e8e:	2101      	movs	r1, #1

	if (autoen) {
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000e90:	b10a      	cbz	r2, 1a000e96 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000e92:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000e96:	2b02      	cmp	r3, #2
1a000e98:	d009      	beq.n	1a000eae <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000e9a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e9e:	d209      	bcs.n	1a000eb4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000ea0:	3020      	adds	r0, #32
1a000ea2:	4b07      	ldr	r3, [pc, #28]	; (1a000ec0 <Chip_Clock_EnableOpts+0x34>)
1a000ea4:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000ea8:	4770      	bx	lr
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
		reg |= (1 << 1);
1a000eaa:	2103      	movs	r1, #3
1a000eac:	e7f0      	b.n	1a000e90 <Chip_Clock_EnableOpts+0x4>
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
		reg |= (1 << 5);
1a000eae:	f041 0120 	orr.w	r1, r1, #32
1a000eb2:	e7f2      	b.n	1a000e9a <Chip_Clock_EnableOpts+0xe>
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000eb4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000eb8:	4b02      	ldr	r3, [pc, #8]	; (1a000ec4 <Chip_Clock_EnableOpts+0x38>)
1a000eba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000ebe:	4770      	bx	lr
1a000ec0:	40051000 	.word	0x40051000
1a000ec4:	40052000 	.word	0x40052000

1a000ec8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000ec8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000ecc:	d208      	bcs.n	1a000ee0 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000ece:	4a09      	ldr	r2, [pc, #36]	; (1a000ef4 <Chip_Clock_Enable+0x2c>)
1a000ed0:	3020      	adds	r0, #32
1a000ed2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000ed6:	f043 0301 	orr.w	r3, r3, #1
1a000eda:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000ede:	4770      	bx	lr
/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000ee0:	4a05      	ldr	r2, [pc, #20]	; (1a000ef8 <Chip_Clock_Enable+0x30>)
1a000ee2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000ee6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000eea:	f043 0301 	orr.w	r3, r3, #1
1a000eee:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000ef2:	4770      	bx	lr
1a000ef4:	40051000 	.word	0x40051000
1a000ef8:	40052000 	.word	0x40052000

1a000efc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000efc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000efe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f02:	d309      	bcc.n	1a000f18 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000f04:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000f08:	4a0d      	ldr	r2, [pc, #52]	; (1a000f40 <Chip_Clock_GetRate+0x44>)
1a000f0a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000f0e:	f014 0f01 	tst.w	r4, #1
1a000f12:	d107      	bne.n	1a000f24 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000f14:	2000      	movs	r0, #0
	}

	return rate;
}
1a000f16:	bd10      	pop	{r4, pc}
	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000f18:	f100 0320 	add.w	r3, r0, #32
1a000f1c:	4a09      	ldr	r2, [pc, #36]	; (1a000f44 <Chip_Clock_GetRate+0x48>)
1a000f1e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000f22:	e7f4      	b.n	1a000f0e <Chip_Clock_GetRate+0x12>
	}

	/* Is the clock enabled? */
	if (reg & 1) {
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000f24:	f7ff fe20 	bl	1a000b68 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000f28:	f7ff ffa9 	bl	1a000e7e <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a000f2c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000f30:	d103      	bne.n	1a000f3a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000f32:	2301      	movs	r3, #1
		}
		else {
			div = 2;/* No other dividers supported */

		}
		rate = rate / div;
1a000f34:	fbb0 f0f3 	udiv	r0, r0, r3
1a000f38:	e7ed      	b.n	1a000f16 <Chip_Clock_GetRate+0x1a>
		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
			div = 1;
		}
		else {
			div = 2;/* No other dividers supported */
1a000f3a:	2302      	movs	r3, #2
1a000f3c:	e7fa      	b.n	1a000f34 <Chip_Clock_GetRate+0x38>
1a000f3e:	bf00      	nop
1a000f40:	40052000 	.word	0x40052000
1a000f44:	40051000 	.word	0x40051000

1a000f48 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000f48:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000f4a:	2069      	movs	r0, #105	; 0x69
1a000f4c:	f7ff ffd6 	bl	1a000efc <Chip_Clock_GetRate>
1a000f50:	4b01      	ldr	r3, [pc, #4]	; (1a000f58 <SystemCoreClockUpdate+0x10>)
1a000f52:	6018      	str	r0, [r3, #0]
}
1a000f54:	bd08      	pop	{r3, pc}
1a000f56:	bf00      	nop
1a000f58:	10000168 	.word	0x10000168

1a000f5c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000f5c:	b570      	push	{r4, r5, r6, lr}
1a000f5e:	b08a      	sub	sp, #40	; 0x28
1a000f60:	4605      	mov	r5, r0
1a000f62:	460e      	mov	r6, r1
1a000f64:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000f66:	f242 7310 	movw	r3, #10000	; 0x2710
1a000f6a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000f6c:	2806      	cmp	r0, #6
1a000f6e:	d018      	beq.n	1a000fa2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000f70:	2300      	movs	r3, #0
1a000f72:	2201      	movs	r2, #1
1a000f74:	4629      	mov	r1, r5
1a000f76:	2004      	movs	r0, #4
1a000f78:	f7ff ff42 	bl	1a000e00 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f7c:	4a49      	ldr	r2, [pc, #292]	; (1a0010a4 <Chip_SetupCoreClock+0x148>)
1a000f7e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f80:	f043 0301 	orr.w	r3, r3, #1
1a000f84:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f86:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f8a:	a901      	add	r1, sp, #4
1a000f8c:	4630      	mov	r0, r6
1a000f8e:	f7ff feaf 	bl	1a000cf0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f92:	4b45      	ldr	r3, [pc, #276]	; (1a0010a8 <Chip_SetupCoreClock+0x14c>)
1a000f94:	429e      	cmp	r6, r3
1a000f96:	d916      	bls.n	1a000fc6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f98:	9b01      	ldr	r3, [sp, #4]
1a000f9a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f9e:	d003      	beq.n	1a000fa8 <Chip_SetupCoreClock+0x4c>
1a000fa0:	e7fe      	b.n	1a000fa0 <Chip_SetupCoreClock+0x44>
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a000fa2:	f7ff fe07 	bl	1a000bb4 <Chip_Clock_EnableCrystal>
1a000fa6:	e7e3      	b.n	1a000f70 <Chip_SetupCoreClock+0x14>
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a000fa8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fac:	d005      	beq.n	1a000fba <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fb2:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a000fb4:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a000fb6:	2601      	movs	r6, #1
1a000fb8:	e007      	b.n	1a000fca <Chip_SetupCoreClock+0x6e>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a000fba:	9b04      	ldr	r3, [sp, #16]
1a000fbc:	3301      	adds	r3, #1
1a000fbe:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a000fc0:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a000fc2:	2600      	movs	r6, #0
1a000fc4:	e001      	b.n	1a000fca <Chip_SetupCoreClock+0x6e>
1a000fc6:	2500      	movs	r5, #0
1a000fc8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000fca:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fce:	9b01      	ldr	r3, [sp, #4]
1a000fd0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fd4:	9a05      	ldr	r2, [sp, #20]
1a000fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fda:	9a03      	ldr	r2, [sp, #12]
1a000fdc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fe0:	9a04      	ldr	r2, [sp, #16]
1a000fe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fe6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fea:	4a2e      	ldr	r2, [pc, #184]	; (1a0010a4 <Chip_SetupCoreClock+0x148>)
1a000fec:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000fee:	4b2d      	ldr	r3, [pc, #180]	; (1a0010a4 <Chip_SetupCoreClock+0x148>)
1a000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000ff2:	f013 0f01 	tst.w	r3, #1
1a000ff6:	d0fa      	beq.n	1a000fee <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000ff8:	2300      	movs	r3, #0
1a000ffa:	2201      	movs	r2, #1
1a000ffc:	2109      	movs	r1, #9
1a000ffe:	2004      	movs	r0, #4
1a001000:	f7ff fefe 	bl	1a000e00 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001004:	b1fe      	cbz	r6, 1a001046 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001006:	f242 7310 	movw	r3, #10000	; 0x2710
1a00100a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00100c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00100e:	1e5a      	subs	r2, r3, #1
1a001010:	9209      	str	r2, [sp, #36]	; 0x24
1a001012:	2b00      	cmp	r3, #0
1a001014:	d1fa      	bne.n	1a00100c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001016:	9b01      	ldr	r3, [sp, #4]
1a001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00101c:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00101e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001022:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001026:	9a05      	ldr	r2, [sp, #20]
1a001028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00102c:	9a03      	ldr	r2, [sp, #12]
1a00102e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001032:	9a04      	ldr	r2, [sp, #16]
1a001034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00103c:	4a19      	ldr	r2, [pc, #100]	; (1a0010a4 <Chip_SetupCoreClock+0x148>)
1a00103e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001040:	b36c      	cbz	r4, 1a00109e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001042:	2400      	movs	r4, #0
1a001044:	e029      	b.n	1a00109a <Chip_SetupCoreClock+0x13e>
	if (direct) {
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
		ppll.ctrl |= 1 << 7;
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a001046:	2d00      	cmp	r5, #0
1a001048:	d0fa      	beq.n	1a001040 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00104a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00104e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001050:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001052:	1e5a      	subs	r2, r3, #1
1a001054:	9209      	str	r2, [sp, #36]	; 0x24
1a001056:	2b00      	cmp	r3, #0
1a001058:	d1fa      	bne.n	1a001050 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00105a:	9b04      	ldr	r3, [sp, #16]
1a00105c:	1e5a      	subs	r2, r3, #1
1a00105e:	9204      	str	r2, [sp, #16]
1a001060:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001064:	9b01      	ldr	r3, [sp, #4]
1a001066:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00106a:	9905      	ldr	r1, [sp, #20]
1a00106c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001070:	9903      	ldr	r1, [sp, #12]
1a001072:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001076:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00107a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00107e:	4a09      	ldr	r2, [pc, #36]	; (1a0010a4 <Chip_SetupCoreClock+0x148>)
1a001080:	6453      	str	r3, [r2, #68]	; 0x44
1a001082:	e7dd      	b.n	1a001040 <Chip_SetupCoreClock+0xe4>
	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001084:	4809      	ldr	r0, [pc, #36]	; (1a0010ac <Chip_SetupCoreClock+0x150>)
1a001086:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00108a:	78cb      	ldrb	r3, [r1, #3]
1a00108c:	788a      	ldrb	r2, [r1, #2]
1a00108e:	7849      	ldrb	r1, [r1, #1]
1a001090:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001094:	f7ff feb4 	bl	1a000e00 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001098:	3401      	adds	r4, #1
1a00109a:	2c11      	cmp	r4, #17
1a00109c:	d9f2      	bls.n	1a001084 <Chip_SetupCoreClock+0x128>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00109e:	b00a      	add	sp, #40	; 0x28
1a0010a0:	bd70      	pop	{r4, r5, r6, pc}
1a0010a2:	bf00      	nop
1a0010a4:	40050000 	.word	0x40050000
1a0010a8:	068e7780 	.word	0x068e7780
1a0010ac:	1a002d00 	.word	0x1a002d00

1a0010b0 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0010b0:	4770      	bx	lr
1a0010b2:	Address 0x000000001a0010b2 is out of bounds.


1a0010b4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0010b4:	4b03      	ldr	r3, [pc, #12]	; (1a0010c4 <Chip_SSP_GetClockIndex+0x10>)
1a0010b6:	4298      	cmp	r0, r3
1a0010b8:	d001      	beq.n	1a0010be <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0010ba:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0010bc:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
		clkSSP = CLK_MX_SSP1;
1a0010be:	20a5      	movs	r0, #165	; 0xa5
1a0010c0:	4770      	bx	lr
1a0010c2:	bf00      	nop
1a0010c4:	400c5000 	.word	0x400c5000

1a0010c8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0010c8:	4b04      	ldr	r3, [pc, #16]	; (1a0010dc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0010ca:	4298      	cmp	r0, r3
1a0010cc:	d002      	beq.n	1a0010d4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0010ce:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0010d2:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
		clkSSP = CLK_APB2_SSP1;
1a0010d4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0010d8:	4770      	bx	lr
1a0010da:	bf00      	nop
1a0010dc:	400c5000 	.word	0x400c5000

1a0010e0 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0010e0:	6803      	ldr	r3, [r0, #0]
1a0010e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0010e6:	0209      	lsls	r1, r1, #8
1a0010e8:	b289      	uxth	r1, r1
1a0010ea:	4319      	orrs	r1, r3
1a0010ec:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0010ee:	6102      	str	r2, [r0, #16]
}
1a0010f0:	4770      	bx	lr

1a0010f2 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0010f2:	b570      	push	{r4, r5, r6, lr}
1a0010f4:	4606      	mov	r6, r0
1a0010f6:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0010f8:	f7ff ffe6 	bl	1a0010c8 <Chip_SSP_GetPeriphClockIndex>
1a0010fc:	f7ff fefe 	bl	1a000efc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001100:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a001102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a001106:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a001108:	e000      	b.n	1a00110c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00110a:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00110c:	42ab      	cmp	r3, r5
1a00110e:	d90b      	bls.n	1a001128 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001110:	1c4c      	adds	r4, r1, #1
1a001112:	fb02 f304 	mul.w	r3, r2, r4
1a001116:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00111a:	429d      	cmp	r5, r3
1a00111c:	d2f6      	bcs.n	1a00110c <Chip_SSP_SetBitRate+0x1a>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00111e:	2cff      	cmp	r4, #255	; 0xff
1a001120:	d9f3      	bls.n	1a00110a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001122:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a001124:	2100      	movs	r1, #0
1a001126:	e7f1      	b.n	1a00110c <Chip_SSP_SetBitRate+0x1a>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001128:	4630      	mov	r0, r6
1a00112a:	f7ff ffd9 	bl	1a0010e0 <Chip_SSP_SetClockRate>
}
1a00112e:	bd70      	pop	{r4, r5, r6, pc}

1a001130 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001130:	b510      	push	{r4, lr}
1a001132:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001134:	f7ff ffbe 	bl	1a0010b4 <Chip_SSP_GetClockIndex>
1a001138:	f7ff fec6 	bl	1a000ec8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00113c:	4620      	mov	r0, r4
1a00113e:	f7ff ffc3 	bl	1a0010c8 <Chip_SSP_GetPeriphClockIndex>
1a001142:	f7ff fec1 	bl	1a000ec8 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001146:	6863      	ldr	r3, [r4, #4]
1a001148:	f023 0304 	bic.w	r3, r3, #4
1a00114c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00114e:	6823      	ldr	r3, [r4, #0]
1a001150:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001154:	f043 0307 	orr.w	r3, r3, #7
1a001158:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00115a:	4902      	ldr	r1, [pc, #8]	; (1a001164 <Chip_SSP_Init+0x34>)
1a00115c:	4620      	mov	r0, r4
1a00115e:	f7ff ffc8 	bl	1a0010f2 <Chip_SSP_SetBitRate>
}
1a001162:	bd10      	pop	{r4, pc}
1a001164:	000186a0 	.word	0x000186a0

1a001168 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001168:	2901      	cmp	r1, #1
1a00116a:	d000      	beq.n	1a00116e <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a00116c:	4770      	bx	lr
	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
	}

	stat = &iic->mXfer->status;
1a00116e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001172:	0082      	lsls	r2, r0, #2
1a001174:	4b03      	ldr	r3, [pc, #12]	; (1a001184 <Chip_I2C_EventHandler+0x1c>)
1a001176:	4413      	add	r3, r2
1a001178:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00117a:	7d13      	ldrb	r3, [r2, #20]
1a00117c:	b2db      	uxtb	r3, r3
1a00117e:	2b04      	cmp	r3, #4
1a001180:	d0fb      	beq.n	1a00117a <Chip_I2C_EventHandler+0x12>
1a001182:	e7f3      	b.n	1a00116c <Chip_I2C_EventHandler+0x4>
1a001184:	10000000 	.word	0x10000000

1a001188 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001188:	b570      	push	{r4, r5, r6, lr}
1a00118a:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a00118c:	4e06      	ldr	r6, [pc, #24]	; (1a0011a8 <Chip_I2C_Init+0x20>)
1a00118e:	00c4      	lsls	r4, r0, #3
1a001190:	1a22      	subs	r2, r4, r0
1a001192:	0093      	lsls	r3, r2, #2
1a001194:	4433      	add	r3, r6
1a001196:	8898      	ldrh	r0, [r3, #4]
1a001198:	f7ff fe96 	bl	1a000ec8 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a00119c:	1b64      	subs	r4, r4, r5
1a00119e:	00a3      	lsls	r3, r4, #2
1a0011a0:	58f3      	ldr	r3, [r6, r3]
1a0011a2:	226c      	movs	r2, #108	; 0x6c
1a0011a4:	619a      	str	r2, [r3, #24]
}
1a0011a6:	bd70      	pop	{r4, r5, r6, pc}
1a0011a8:	10000000 	.word	0x10000000

1a0011ac <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0011b0:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a0011b2:	4e0b      	ldr	r6, [pc, #44]	; (1a0011e0 <Chip_I2C_SetClockRate+0x34>)
1a0011b4:	00c5      	lsls	r5, r0, #3
1a0011b6:	1a2b      	subs	r3, r5, r0
1a0011b8:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0011bc:	eb06 0308 	add.w	r3, r6, r8
1a0011c0:	8898      	ldrh	r0, [r3, #4]
1a0011c2:	f7ff fe9b 	bl	1a000efc <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0011c6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0011ca:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011ce:	0842      	lsrs	r2, r0, #1
1a0011d0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0011d2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0011d6:	691a      	ldr	r2, [r3, #16]
1a0011d8:	1a80      	subs	r0, r0, r2
1a0011da:	6158      	str	r0, [r3, #20]
}
1a0011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0011e0:	10000000 	.word	0x10000000

1a0011e4 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0011e4:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0011e6:	4a0b      	ldr	r2, [pc, #44]	; (1a001214 <SystemInit+0x30>)
1a0011e8:	4b0b      	ldr	r3, [pc, #44]	; (1a001218 <SystemInit+0x34>)
1a0011ea:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0011ec:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0011f0:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0011f2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0011f6:	2b20      	cmp	r3, #32
1a0011f8:	d004      	beq.n	1a001204 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0011fa:	f7ff fa9f 	bl	1a00073c <Board_SystemInit>
   Board_Init();
1a0011fe:	f7ff fa27 	bl	1a000650 <Board_Init>
}
1a001202:	bd08      	pop	{r3, pc}
{
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001204:	4a04      	ldr	r2, [pc, #16]	; (1a001218 <SystemInit+0x34>)
1a001206:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00120a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00120e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001212:	e7f2      	b.n	1a0011fa <SystemInit+0x16>
1a001214:	1a000000 	.word	0x1a000000
1a001218:	e000ed00 	.word	0xe000ed00

1a00121c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00121c:	4b04      	ldr	r3, [pc, #16]	; (1a001230 <cyclesCounterInit+0x14>)
1a00121e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001220:	4a04      	ldr	r2, [pc, #16]	; (1a001234 <cyclesCounterInit+0x18>)
1a001222:	6813      	ldr	r3, [r2, #0]
1a001224:	f043 0301 	orr.w	r3, r3, #1
1a001228:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00122a:	2001      	movs	r0, #1
1a00122c:	4770      	bx	lr
1a00122e:	bf00      	nop
1a001230:	10000038 	.word	0x10000038
1a001234:	e0001000 	.word	0xe0001000

1a001238 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a001238:	b570      	push	{r4, r5, r6, lr}
1a00123a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a00123c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001240:	0093      	lsls	r3, r2, #2
1a001242:	4a1f      	ldr	r2, [pc, #124]	; (1a0012c0 <uartProcessIRQ+0x88>)
1a001244:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001246:	6975      	ldr	r5, [r6, #20]

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a001248:	b2ed      	uxtb	r5, r5
1a00124a:	f015 0f01 	tst.w	r5, #1
1a00124e:	d009      	beq.n	1a001264 <uartProcessIRQ+0x2c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001250:	b920      	cbnz	r0, 1a00125c <uartProcessIRQ+0x24>
1a001252:	4b1c      	ldr	r3, [pc, #112]	; (1a0012c4 <uartProcessIRQ+0x8c>)
1a001254:	681b      	ldr	r3, [r3, #0]
1a001256:	b10b      	cbz	r3, 1a00125c <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a001258:	2000      	movs	r0, #0
1a00125a:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00125c:	2c03      	cmp	r4, #3
1a00125e:	d013      	beq.n	1a001288 <uartProcessIRQ+0x50>
         (*rxIsrCallbackUART2)(0);

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001260:	2c05      	cmp	r4, #5
1a001262:	d018      	beq.n	1a001296 <uartProcessIRQ+0x5e>
         (*rxIsrCallbackUART3)(0);
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001264:	f015 0f20 	tst.w	r5, #32
1a001268:	d00d      	beq.n	1a001286 <uartProcessIRQ+0x4e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a00126a:	6873      	ldr	r3, [r6, #4]
1a00126c:	f013 0f02 	tst.w	r3, #2
1a001270:	d009      	beq.n	1a001286 <uartProcessIRQ+0x4e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001272:	b924      	cbnz	r4, 1a00127e <uartProcessIRQ+0x46>
1a001274:	4b14      	ldr	r3, [pc, #80]	; (1a0012c8 <uartProcessIRQ+0x90>)
1a001276:	681b      	ldr	r3, [r3, #0]
1a001278:	b10b      	cbz	r3, 1a00127e <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a00127a:	2000      	movs	r0, #0
1a00127c:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00127e:	2c03      	cmp	r4, #3
1a001280:	d010      	beq.n	1a0012a4 <uartProcessIRQ+0x6c>
         (*txIsrCallbackUART2)(0);

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001282:	2c05      	cmp	r4, #5
1a001284:	d015      	beq.n	1a0012b2 <uartProcessIRQ+0x7a>
         (*txIsrCallbackUART3)(0);
   }
}
1a001286:	bd70      	pop	{r4, r5, r6, pc}
   if(status & UART_LSR_RDR) { // uartRxReady
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
         (*rxIsrCallbackUART0)(0);

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001288:	4b10      	ldr	r3, [pc, #64]	; (1a0012cc <uartProcessIRQ+0x94>)
1a00128a:	681b      	ldr	r3, [r3, #0]
1a00128c:	2b00      	cmp	r3, #0
1a00128e:	d0e7      	beq.n	1a001260 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a001290:	2000      	movs	r0, #0
1a001292:	4798      	blx	r3
1a001294:	e7e4      	b.n	1a001260 <uartProcessIRQ+0x28>

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001296:	4b0e      	ldr	r3, [pc, #56]	; (1a0012d0 <uartProcessIRQ+0x98>)
1a001298:	681b      	ldr	r3, [r3, #0]
1a00129a:	2b00      	cmp	r3, #0
1a00129c:	d0e2      	beq.n	1a001264 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a00129e:	2000      	movs	r0, #0
1a0012a0:	4798      	blx	r3
1a0012a2:	e7df      	b.n	1a001264 <uartProcessIRQ+0x2c>

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
         (*txIsrCallbackUART0)(0);

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0012a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0012d4 <uartProcessIRQ+0x9c>)
1a0012a6:	681b      	ldr	r3, [r3, #0]
1a0012a8:	2b00      	cmp	r3, #0
1a0012aa:	d0ea      	beq.n	1a001282 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a0012ac:	2000      	movs	r0, #0
1a0012ae:	4798      	blx	r3
1a0012b0:	e7e7      	b.n	1a001282 <uartProcessIRQ+0x4a>

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0012b2:	4b09      	ldr	r3, [pc, #36]	; (1a0012d8 <uartProcessIRQ+0xa0>)
1a0012b4:	681b      	ldr	r3, [r3, #0]
1a0012b6:	2b00      	cmp	r3, #0
1a0012b8:	d0e5      	beq.n	1a001286 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a0012ba:	2000      	movs	r0, #0
1a0012bc:	4798      	blx	r3
   }
}
1a0012be:	e7e2      	b.n	1a001286 <uartProcessIRQ+0x4e>
1a0012c0:	1a002d48 	.word	0x1a002d48
1a0012c4:	10000134 	.word	0x10000134
1a0012c8:	10000140 	.word	0x10000140
1a0012cc:	10000138 	.word	0x10000138
1a0012d0:	1000013c 	.word	0x1000013c
1a0012d4:	10000144 	.word	0x10000144
1a0012d8:	10000148 	.word	0x10000148

1a0012dc <uartInterrupt>:
#ifdef SAPI_USE_INTERRUPTS

// UART Global Interrupt Enable/Disable
void uartInterrupt( uartMap_t uart, bool_t enable )
{
   if( enable ) {
1a0012dc:	b341      	cbz	r1, 1a001330 <uartInterrupt+0x54>
      // Interrupt Priority for UART channel
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a0012de:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0012e2:	009a      	lsls	r2, r3, #2
1a0012e4:	4b1e      	ldr	r3, [pc, #120]	; (1a001360 <uartInterrupt+0x84>)
1a0012e6:	4413      	add	r3, r2
1a0012e8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
1a0012ec:	2b00      	cmp	r3, #0
1a0012ee:	db18      	blt.n	1a001322 <uartInterrupt+0x46>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0012f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a0012f4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a0012f8:	22a0      	movs	r2, #160	; 0xa0
1a0012fa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      // Enable Interrupt for UART channel
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a0012fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001302:	0082      	lsls	r2, r0, #2
1a001304:	4b16      	ldr	r3, [pc, #88]	; (1a001360 <uartInterrupt+0x84>)
1a001306:	4413      	add	r3, r2
1a001308:	f993 300a 	ldrsb.w	r3, [r3, #10]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1a00130c:	2b00      	cmp	r3, #0
1a00130e:	db25      	blt.n	1a00135c <uartInterrupt+0x80>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001310:	f003 011f 	and.w	r1, r3, #31
1a001314:	095b      	lsrs	r3, r3, #5
1a001316:	2201      	movs	r2, #1
1a001318:	408a      	lsls	r2, r1
1a00131a:	4912      	ldr	r1, [pc, #72]	; (1a001364 <uartInterrupt+0x88>)
1a00131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001320:	4770      	bx	lr
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001322:	f003 030f 	and.w	r3, r3, #15
1a001326:	4a10      	ldr	r2, [pc, #64]	; (1a001368 <uartInterrupt+0x8c>)
1a001328:	441a      	add	r2, r3
1a00132a:	23a0      	movs	r3, #160	; 0xa0
1a00132c:	7613      	strb	r3, [r2, #24]
1a00132e:	e7e6      	b.n	1a0012fe <uartInterrupt+0x22>
   } else {
      // Disable Interrupt for UART channel
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a001330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001334:	0082      	lsls	r2, r0, #2
1a001336:	4b0a      	ldr	r3, [pc, #40]	; (1a001360 <uartInterrupt+0x84>)
1a001338:	4413      	add	r3, r2
1a00133a:	f993 300a 	ldrsb.w	r3, [r3, #10]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1a00133e:	2b00      	cmp	r3, #0
1a001340:	db0c      	blt.n	1a00135c <uartInterrupt+0x80>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001342:	f003 011f 	and.w	r1, r3, #31
1a001346:	095b      	lsrs	r3, r3, #5
1a001348:	2201      	movs	r2, #1
1a00134a:	408a      	lsls	r2, r1
1a00134c:	3320      	adds	r3, #32
1a00134e:	4905      	ldr	r1, [pc, #20]	; (1a001364 <uartInterrupt+0x88>)
1a001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a001354:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
1a001358:	f3bf 8f6f 	isb	sy
   }
}
1a00135c:	4770      	bx	lr
1a00135e:	bf00      	nop
1a001360:	1a002d48 	.word	0x1a002d48
1a001364:	e000e100 	.word	0xe000e100
1a001368:	e000ecfc 	.word	0xe000ecfc

1a00136c <uartCallbackSet>:
void uartCallbackSet( uartMap_t uart, uartEvents_t event, 
                      callBackFuncPtr_t callbackFunc, void* callbackParam )
{   
   uint32_t intMask;

   switch(event){
1a00136c:	b111      	cbz	r1, 1a001374 <uartCallbackSet+0x8>
1a00136e:	2901      	cmp	r1, #1
1a001370:	d01d      	beq.n	1a0013ae <uartCallbackSet+0x42>
1a001372:	4770      	bx	lr
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
         
         if( callbackFunc != 0 ) {
1a001374:	b182      	cbz	r2, 1a001398 <uartCallbackSet+0x2c>
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001376:	2801      	cmp	r0, #1
1a001378:	d90f      	bls.n	1a00139a <uartCallbackSet+0x2e>
               rxIsrCallbackUART0 = callbackFunc;
               rxIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00137a:	1ec3      	subs	r3, r0, #3
1a00137c:	b2db      	uxtb	r3, r3
1a00137e:	2b01      	cmp	r3, #1
1a001380:	d90e      	bls.n	1a0013a0 <uartCallbackSet+0x34>
               rxIsrCallbackUART2 = callbackFunc;
               rxIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
1a001382:	2805      	cmp	r0, #5
1a001384:	d00f      	beq.n	1a0013a6 <uartCallbackSet+0x3a>
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001386:	2305      	movs	r3, #5
      default:
         return;
   }

   // Enable UART Interrupt
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a001388:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00138c:	0082      	lsls	r2, r0, #2
1a00138e:	4913      	ldr	r1, [pc, #76]	; (1a0013dc <uartCallbackSet+0x70>)
1a001390:	588a      	ldr	r2, [r1, r2]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a001392:	6851      	ldr	r1, [r2, #4]
1a001394:	430b      	orrs	r3, r1
1a001396:	6053      	str	r3, [r2, #4]
}
1a001398:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
         
         if( callbackFunc != 0 ) {
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
               rxIsrCallbackUART0 = callbackFunc;
1a00139a:	4b11      	ldr	r3, [pc, #68]	; (1a0013e0 <uartCallbackSet+0x74>)
1a00139c:	601a      	str	r2, [r3, #0]
1a00139e:	e7ec      	b.n	1a00137a <uartCallbackSet+0xe>
               rxIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
               rxIsrCallbackUART2 = callbackFunc;
1a0013a0:	4b10      	ldr	r3, [pc, #64]	; (1a0013e4 <uartCallbackSet+0x78>)
1a0013a2:	601a      	str	r2, [r3, #0]
1a0013a4:	e7ed      	b.n	1a001382 <uartCallbackSet+0x16>
               rxIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
               rxIsrCallbackUART3 = callbackFunc;
1a0013a6:	4b10      	ldr	r3, [pc, #64]	; (1a0013e8 <uartCallbackSet+0x7c>)
1a0013a8:	601a      	str	r2, [r3, #0]
         // Enable UART Receiver Buffer Register Interrupt
         //intMask = UART_IER_RBRINT;
         
         // Enable UART Receiver Buffer Register Interrupt and Enable UART line
         //status interrupt. LPC43xx User manual page 1118
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0013aa:	2305      	movs	r3, #5
1a0013ac:	e7ec      	b.n	1a001388 <uartCallbackSet+0x1c>

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;

         if( callbackFunc != 0 ) {
1a0013ae:	2a00      	cmp	r2, #0
1a0013b0:	d0f2      	beq.n	1a001398 <uartCallbackSet+0x2c>
            
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0013b2:	2801      	cmp	r0, #1
1a0013b4:	d907      	bls.n	1a0013c6 <uartCallbackSet+0x5a>
               txIsrCallbackUART0 = callbackFunc;
               txIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0013b6:	1ec3      	subs	r3, r0, #3
1a0013b8:	b2db      	uxtb	r3, r3
1a0013ba:	2b01      	cmp	r3, #1
1a0013bc:	d906      	bls.n	1a0013cc <uartCallbackSet+0x60>
               txIsrCallbackUART2 = callbackFunc;
               txIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
1a0013be:	2805      	cmp	r0, #5
1a0013c0:	d007      	beq.n	1a0013d2 <uartCallbackSet+0x66>
         }
      break;

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a0013c2:	2302      	movs	r3, #2
1a0013c4:	e7e0      	b.n	1a001388 <uartCallbackSet+0x1c>

         if( callbackFunc != 0 ) {
            
            // Set callback
            if( (uart == UART_GPIO) || (uart == UART_485) ){
               txIsrCallbackUART0 = callbackFunc;
1a0013c6:	4b09      	ldr	r3, [pc, #36]	; (1a0013ec <uartCallbackSet+0x80>)
1a0013c8:	601a      	str	r2, [r3, #0]
1a0013ca:	e7f4      	b.n	1a0013b6 <uartCallbackSet+0x4a>
               txIsrCallbackUART0Params = callbackParam;
            }
            if( (uart == UART_USB) || (uart == UART_ENET) ){
               txIsrCallbackUART2 = callbackFunc;
1a0013cc:	4b08      	ldr	r3, [pc, #32]	; (1a0013f0 <uartCallbackSet+0x84>)
1a0013ce:	601a      	str	r2, [r3, #0]
1a0013d0:	e7f5      	b.n	1a0013be <uartCallbackSet+0x52>
               txIsrCallbackUART2Params = callbackParam;
            }            
            if( uart == UART_232 ){
               txIsrCallbackUART3 = callbackFunc;
1a0013d2:	4b08      	ldr	r3, [pc, #32]	; (1a0013f4 <uartCallbackSet+0x88>)
1a0013d4:	601a      	str	r2, [r3, #0]
         }
      break;

      case UART_TRANSMITER_FREE:
         // Enable THRE irq (TX)
         intMask = UART_IER_THREINT;
1a0013d6:	2302      	movs	r3, #2
1a0013d8:	e7d6      	b.n	1a001388 <uartCallbackSet+0x1c>
1a0013da:	bf00      	nop
1a0013dc:	1a002d48 	.word	0x1a002d48
1a0013e0:	10000134 	.word	0x10000134
1a0013e4:	10000138 	.word	0x10000138
1a0013e8:	1000013c 	.word	0x1000013c
1a0013ec:	10000140 	.word	0x10000140
1a0013f0:	10000144 	.word	0x10000144
1a0013f4:	10000148 	.word	0x10000148

1a0013f8 <uartRxRead>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
}
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0013f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0013fc:	0083      	lsls	r3, r0, #2
1a0013fe:	4a02      	ldr	r2, [pc, #8]	; (1a001408 <uartRxRead+0x10>)
1a001400:	58d3      	ldr	r3, [r2, r3]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001402:	6818      	ldr	r0, [r3, #0]
}
1a001404:	b2c0      	uxtb	r0, r0
1a001406:	4770      	bx	lr
1a001408:	1a002d48 	.word	0x1a002d48

1a00140c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00140c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001410:	4680      	mov	r8, r0
1a001412:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001414:	4c19      	ldr	r4, [pc, #100]	; (1a00147c <uartInit+0x70>)
1a001416:	0045      	lsls	r5, r0, #1
1a001418:	182a      	adds	r2, r5, r0
1a00141a:	0093      	lsls	r3, r2, #2
1a00141c:	18e6      	adds	r6, r4, r3
1a00141e:	58e7      	ldr	r7, [r4, r3]
1a001420:	4638      	mov	r0, r7
1a001422:	f7ff f9a7 	bl	1a000774 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001426:	4649      	mov	r1, r9
1a001428:	4638      	mov	r0, r7
1a00142a:	f7ff f9cd 	bl	1a0007c8 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a00142e:	2307      	movs	r3, #7
1a001430:	60bb      	str	r3, [r7, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001432:	683b      	ldr	r3, [r7, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a001434:	2301      	movs	r3, #1
1a001436:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001438:	7930      	ldrb	r0, [r6, #4]
1a00143a:	7973      	ldrb	r3, [r6, #5]
1a00143c:	79b2      	ldrb	r2, [r6, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00143e:	f042 0218 	orr.w	r2, r2, #24
1a001442:	490f      	ldr	r1, [pc, #60]	; (1a001480 <uartInit+0x74>)
1a001444:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00144c:	79f0      	ldrb	r0, [r6, #7]
1a00144e:	7a33      	ldrb	r3, [r6, #8]
1a001450:	7a72      	ldrb	r2, [r6, #9]
1a001452:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001456:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a00145e:	f1b8 0f01 	cmp.w	r8, #1
1a001462:	d001      	beq.n	1a001468 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001468:	4a06      	ldr	r2, [pc, #24]	; (1a001484 <uartInit+0x78>)
1a00146a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00146c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001470:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001472:	221a      	movs	r2, #26
1a001474:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001478:	e7f4      	b.n	1a001464 <uartInit+0x58>
1a00147a:	bf00      	nop
1a00147c:	1a002d48 	.word	0x1a002d48
1a001480:	40086000 	.word	0x40086000
1a001484:	40081000 	.word	0x40081000

1a001488 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001488:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00148a:	2003      	movs	r0, #3
1a00148c:	f7ff fed4 	bl	1a001238 <uartProcessIRQ>
}
1a001490:	bd08      	pop	{r3, pc}

1a001492 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001492:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001494:	2005      	movs	r0, #5
1a001496:	f7ff fecf 	bl	1a001238 <uartProcessIRQ>
}
1a00149a:	bd08      	pop	{r3, pc}

1a00149c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a00149c:	4b01      	ldr	r3, [pc, #4]	; (1a0014a4 <tickRead+0x8>)
1a00149e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0014a2:	4770      	bx	lr
1a0014a4:	10000150 	.word	0x10000150

1a0014a8 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0014a8:	b918      	cbnz	r0, 1a0014b2 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0014aa:	4b04      	ldr	r3, [pc, #16]	; (1a0014bc <tickPowerSet+0x14>)
1a0014ac:	2200      	movs	r2, #0
1a0014ae:	601a      	str	r2, [r3, #0]
   }
}
1a0014b0:	4770      	bx	lr
// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0014b2:	4b02      	ldr	r3, [pc, #8]	; (1a0014bc <tickPowerSet+0x14>)
1a0014b4:	2207      	movs	r2, #7
1a0014b6:	601a      	str	r2, [r3, #0]
1a0014b8:	4770      	bx	lr
1a0014ba:	bf00      	nop
1a0014bc:	e000e010 	.word	0xe000e010

1a0014c0 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0014c0:	b538      	push	{r3, r4, r5, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0014c2:	ea50 0301 	orrs.w	r3, r0, r1
1a0014c6:	d02a      	beq.n	1a00151e <tickInit+0x5e>
         tickPowerSet( OFF );
         ret_val = 0;
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0014c8:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0014cc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0014d0:	2b00      	cmp	r3, #0
1a0014d2:	bf08      	it	eq
1a0014d4:	2a32      	cmpeq	r2, #50	; 0x32
1a0014d6:	d227      	bcs.n	1a001528 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0014d8:	4b14      	ldr	r3, [pc, #80]	; (1a00152c <tickInit+0x6c>)
1a0014da:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0014de:	4b14      	ldr	r3, [pc, #80]	; (1a001530 <tickInit+0x70>)
1a0014e0:	681b      	ldr	r3, [r3, #0]
1a0014e2:	fba3 4500 	umull	r4, r5, r3, r0
1a0014e6:	fb03 5501 	mla	r5, r3, r1, r5
1a0014ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0014ee:	2300      	movs	r3, #0
1a0014f0:	4620      	mov	r0, r4
1a0014f2:	4629      	mov	r1, r5
1a0014f4:	f000 faf0 	bl	1a001ad8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0014f8:	3801      	subs	r0, #1
1a0014fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0014fe:	d209      	bcs.n	1a001514 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001500:	4b0c      	ldr	r3, [pc, #48]	; (1a001534 <tickInit+0x74>)
1a001502:	6058      	str	r0, [r3, #4]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001504:	4a0c      	ldr	r2, [pc, #48]	; (1a001538 <tickInit+0x78>)
1a001506:	21e0      	movs	r1, #224	; 0xe0
1a001508:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00150c:	2200      	movs	r2, #0
1a00150e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001510:	2207      	movs	r2, #7
1a001512:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a001514:	2001      	movs	r0, #1
1a001516:	f7ff ffc7 	bl	1a0014a8 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a00151a:	2001      	movs	r0, #1
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a00151c:	bd38      	pop	{r3, r4, r5, pc}
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
         tickPowerSet( OFF );
1a00151e:	2000      	movs	r0, #0
1a001520:	f7ff ffc2 	bl	1a0014a8 <tickPowerSet>
         ret_val = 0;
1a001524:	2000      	movs	r0, #0
1a001526:	e7f9      	b.n	1a00151c <tickInit+0x5c>
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a001528:	2000      	movs	r0, #0
1a00152a:	e7f7      	b.n	1a00151c <tickInit+0x5c>
1a00152c:	10000170 	.word	0x10000170
1a001530:	10000168 	.word	0x10000168
1a001534:	e000e010 	.word	0xe000e010
1a001538:	e000ed00 	.word	0xe000ed00

1a00153c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00153c:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001540:	4908      	ldr	r1, [pc, #32]	; (1a001564 <SysTick_Handler+0x28>)
1a001542:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001546:	f112 0b01 	adds.w	fp, r2, #1
1a00154a:	f143 0c00 	adc.w	ip, r3, #0
1a00154e:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001552:	4b05      	ldr	r3, [pc, #20]	; (1a001568 <SysTick_Handler+0x2c>)
1a001554:	681b      	ldr	r3, [r3, #0]
1a001556:	b113      	cbz	r3, 1a00155e <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001558:	4a04      	ldr	r2, [pc, #16]	; (1a00156c <SysTick_Handler+0x30>)
1a00155a:	6810      	ldr	r0, [r2, #0]
1a00155c:	4798      	blx	r3
   }
}
1a00155e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001562:	bf00      	nop
1a001564:	10000150 	.word	0x10000150
1a001568:	10000158 	.word	0x10000158
1a00156c:	1000014c 	.word	0x1000014c

1a001570 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a001570:	e7fe      	b.n	1a001570 <errorOcurred>

1a001572 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a001572:	4770      	bx	lr

1a001574 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001574:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001576:	2400      	movs	r4, #0
1a001578:	e001      	b.n	1a00157e <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00157a:	3401      	adds	r4, #1
1a00157c:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00157e:	2c03      	cmp	r4, #3
1a001580:	d812      	bhi.n	1a0015a8 <TIMER0_IRQHandler+0x34>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a001582:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001584:	4b09      	ldr	r3, [pc, #36]	; (1a0015ac <TIMER0_IRQHandler+0x38>)
1a001586:	681a      	ldr	r2, [r3, #0]
1a001588:	f004 010f 	and.w	r1, r4, #15
1a00158c:	2301      	movs	r3, #1
1a00158e:	408b      	lsls	r3, r1
1a001590:	421a      	tst	r2, r3
1a001592:	d0f2      	beq.n	1a00157a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001594:	4b06      	ldr	r3, [pc, #24]	; (1a0015b0 <TIMER0_IRQHandler+0x3c>)
1a001596:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00159a:	2000      	movs	r0, #0
1a00159c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00159e:	2301      	movs	r3, #1
1a0015a0:	40ab      	lsls	r3, r5
1a0015a2:	4a02      	ldr	r2, [pc, #8]	; (1a0015ac <TIMER0_IRQHandler+0x38>)
1a0015a4:	6013      	str	r3, [r2, #0]
1a0015a6:	e7e8      	b.n	1a00157a <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0015a8:	bd38      	pop	{r3, r4, r5, pc}
1a0015aa:	bf00      	nop
1a0015ac:	40084000 	.word	0x40084000
1a0015b0:	1000003c 	.word	0x1000003c

1a0015b4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0015b4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015b6:	2400      	movs	r4, #0
1a0015b8:	e001      	b.n	1a0015be <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0015ba:	3401      	adds	r4, #1
1a0015bc:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015be:	2c03      	cmp	r4, #3
1a0015c0:	d813      	bhi.n	1a0015ea <TIMER1_IRQHandler+0x36>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0015c2:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0015c4:	4b09      	ldr	r3, [pc, #36]	; (1a0015ec <TIMER1_IRQHandler+0x38>)
1a0015c6:	681a      	ldr	r2, [r3, #0]
1a0015c8:	f004 010f 	and.w	r1, r4, #15
1a0015cc:	2301      	movs	r3, #1
1a0015ce:	408b      	lsls	r3, r1
1a0015d0:	421a      	tst	r2, r3
1a0015d2:	d0f2      	beq.n	1a0015ba <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0015d4:	1d23      	adds	r3, r4, #4
1a0015d6:	4a06      	ldr	r2, [pc, #24]	; (1a0015f0 <TIMER1_IRQHandler+0x3c>)
1a0015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0015dc:	2000      	movs	r0, #0
1a0015de:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0015e0:	2301      	movs	r3, #1
1a0015e2:	40ab      	lsls	r3, r5
1a0015e4:	4a01      	ldr	r2, [pc, #4]	; (1a0015ec <TIMER1_IRQHandler+0x38>)
1a0015e6:	6013      	str	r3, [r2, #0]
1a0015e8:	e7e7      	b.n	1a0015ba <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0015ea:	bd38      	pop	{r3, r4, r5, pc}
1a0015ec:	40085000 	.word	0x40085000
1a0015f0:	1000003c 	.word	0x1000003c

1a0015f4 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0015f4:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015f6:	2400      	movs	r4, #0
1a0015f8:	e001      	b.n	1a0015fe <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0015fa:	3401      	adds	r4, #1
1a0015fc:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015fe:	2c03      	cmp	r4, #3
1a001600:	d814      	bhi.n	1a00162c <TIMER2_IRQHandler+0x38>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001602:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001604:	4b0a      	ldr	r3, [pc, #40]	; (1a001630 <TIMER2_IRQHandler+0x3c>)
1a001606:	681a      	ldr	r2, [r3, #0]
1a001608:	f004 010f 	and.w	r1, r4, #15
1a00160c:	2301      	movs	r3, #1
1a00160e:	408b      	lsls	r3, r1
1a001610:	421a      	tst	r2, r3
1a001612:	d0f2      	beq.n	1a0015fa <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001614:	f104 0308 	add.w	r3, r4, #8
1a001618:	4a06      	ldr	r2, [pc, #24]	; (1a001634 <TIMER2_IRQHandler+0x40>)
1a00161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00161e:	2000      	movs	r0, #0
1a001620:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001622:	2301      	movs	r3, #1
1a001624:	40ab      	lsls	r3, r5
1a001626:	4a02      	ldr	r2, [pc, #8]	; (1a001630 <TIMER2_IRQHandler+0x3c>)
1a001628:	6013      	str	r3, [r2, #0]
1a00162a:	e7e6      	b.n	1a0015fa <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00162c:	bd38      	pop	{r3, r4, r5, pc}
1a00162e:	bf00      	nop
1a001630:	400c3000 	.word	0x400c3000
1a001634:	1000003c 	.word	0x1000003c

1a001638 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001638:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00163a:	2400      	movs	r4, #0
1a00163c:	e001      	b.n	1a001642 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00163e:	3401      	adds	r4, #1
1a001640:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001642:	2c03      	cmp	r4, #3
1a001644:	d814      	bhi.n	1a001670 <TIMER3_IRQHandler+0x38>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a001646:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001648:	4b0a      	ldr	r3, [pc, #40]	; (1a001674 <TIMER3_IRQHandler+0x3c>)
1a00164a:	681a      	ldr	r2, [r3, #0]
1a00164c:	f004 010f 	and.w	r1, r4, #15
1a001650:	2301      	movs	r3, #1
1a001652:	408b      	lsls	r3, r1
1a001654:	421a      	tst	r2, r3
1a001656:	d0f2      	beq.n	1a00163e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001658:	f104 030c 	add.w	r3, r4, #12
1a00165c:	4a06      	ldr	r2, [pc, #24]	; (1a001678 <TIMER3_IRQHandler+0x40>)
1a00165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001662:	2000      	movs	r0, #0
1a001664:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001666:	2301      	movs	r3, #1
1a001668:	40ab      	lsls	r3, r5
1a00166a:	4a02      	ldr	r2, [pc, #8]	; (1a001674 <TIMER3_IRQHandler+0x3c>)
1a00166c:	6013      	str	r3, [r2, #0]
1a00166e:	e7e6      	b.n	1a00163e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001670:	bd38      	pop	{r3, r4, r5, pc}
1a001672:	bf00      	nop
1a001674:	400c4000 	.word	0x400c4000
1a001678:	1000003c 	.word	0x1000003c

1a00167c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00167c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00167e:	4d0b      	ldr	r5, [pc, #44]	; (1a0016ac <gpioObtainPinInit+0x30>)
1a001680:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001684:	182c      	adds	r4, r5, r0
1a001686:	5628      	ldrsb	r0, [r5, r0]
1a001688:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00168a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00168e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001690:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001694:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001696:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00169a:	9b02      	ldr	r3, [sp, #8]
1a00169c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00169e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0016a2:	9b03      	ldr	r3, [sp, #12]
1a0016a4:	701a      	strb	r2, [r3, #0]
}
1a0016a6:	bc30      	pop	{r4, r5}
1a0016a8:	4770      	bx	lr
1a0016aa:	bf00      	nop
1a0016ac:	1a002d90 	.word	0x1a002d90

1a0016b0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a0016b0:	b570      	push	{r4, r5, r6, lr}
1a0016b2:	b084      	sub	sp, #16
1a0016b4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0016b6:	2300      	movs	r3, #0
1a0016b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0016bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0016c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0016c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0016c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0016cc:	f10d 030b 	add.w	r3, sp, #11
1a0016d0:	9301      	str	r3, [sp, #4]
1a0016d2:	ab03      	add	r3, sp, #12
1a0016d4:	9300      	str	r3, [sp, #0]
1a0016d6:	f10d 030d 	add.w	r3, sp, #13
1a0016da:	f10d 020e 	add.w	r2, sp, #14
1a0016de:	f10d 010f 	add.w	r1, sp, #15
1a0016e2:	f7ff ffcb 	bl	1a00167c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0016e6:	2c05      	cmp	r4, #5
1a0016e8:	f200 80a5 	bhi.w	1a001836 <gpioInit+0x186>
1a0016ec:	e8df f004 	tbb	[pc, r4]
1a0016f0:	45278109 	.word	0x45278109
1a0016f4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0016f6:	4851      	ldr	r0, [pc, #324]	; (1a00183c <gpioInit+0x18c>)
1a0016f8:	f7ff fcda 	bl	1a0010b0 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a0016fc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0016fe:	b004      	add	sp, #16
1a001700:	bd70      	pop	{r4, r5, r6, pc}
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001702:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001706:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00170a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00170e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001712:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001716:	494a      	ldr	r1, [pc, #296]	; (1a001840 <gpioInit+0x190>)
1a001718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00171c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001720:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001724:	2001      	movs	r0, #1
1a001726:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00172a:	4c44      	ldr	r4, [pc, #272]	; (1a00183c <gpioInit+0x18c>)
1a00172c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001730:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001734:	ea22 0201 	bic.w	r2, r2, r1
1a001738:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00173c:	e7df      	b.n	1a0016fe <gpioInit+0x4e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a00173e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001742:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001746:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00174a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00174e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001752:	493b      	ldr	r1, [pc, #236]	; (1a001840 <gpioInit+0x190>)
1a001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001758:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00175c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001760:	2001      	movs	r0, #1
1a001762:	fa00 f102 	lsl.w	r1, r0, r2
1a001766:	4c35      	ldr	r4, [pc, #212]	; (1a00183c <gpioInit+0x18c>)
1a001768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00176c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001770:	ea22 0201 	bic.w	r2, r2, r1
1a001774:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001778:	e7c1      	b.n	1a0016fe <gpioInit+0x4e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a00177a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00177e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001782:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001786:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00178a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00178e:	492c      	ldr	r1, [pc, #176]	; (1a001840 <gpioInit+0x190>)
1a001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001794:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001798:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00179c:	2001      	movs	r0, #1
1a00179e:	fa00 f102 	lsl.w	r1, r0, r2
1a0017a2:	4c26      	ldr	r4, [pc, #152]	; (1a00183c <gpioInit+0x18c>)
1a0017a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017a8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017ac:	ea22 0201 	bic.w	r2, r2, r1
1a0017b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017b4:	e7a3      	b.n	1a0016fe <gpioInit+0x4e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a0017b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017be:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017c2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0017c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0017ca:	491d      	ldr	r1, [pc, #116]	; (1a001840 <gpioInit+0x190>)
1a0017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0017d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0017d4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0017d8:	2001      	movs	r0, #1
1a0017da:	fa00 f102 	lsl.w	r1, r0, r2
1a0017de:	4c17      	ldr	r4, [pc, #92]	; (1a00183c <gpioInit+0x18c>)
1a0017e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0017e4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0017e8:	ea22 0201 	bic.w	r2, r2, r1
1a0017ec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0017f0:	e785      	b.n	1a0016fe <gpioInit+0x4e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0017f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0017f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0017fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0017fe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001802:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001806:	490e      	ldr	r1, [pc, #56]	; (1a001840 <gpioInit+0x190>)
1a001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00180c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001810:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001814:	2001      	movs	r0, #1
1a001816:	fa00 f102 	lsl.w	r1, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00181a:	4b08      	ldr	r3, [pc, #32]	; (1a00183c <gpioInit+0x18c>)
1a00181c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001820:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001824:	4331      	orrs	r1, r6
1a001826:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00182a:	b2d2      	uxtb	r2, r2
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00182c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001830:	2100      	movs	r1, #0
1a001832:	5499      	strb	r1, [r3, r2]
1a001834:	e763      	b.n	1a0016fe <gpioInit+0x4e>
      break;

   default:
      ret_val = 0;
1a001836:	2000      	movs	r0, #0
1a001838:	e761      	b.n	1a0016fe <gpioInit+0x4e>
1a00183a:	bf00      	nop
1a00183c:	400f4000 	.word	0x400f4000
1a001840:	40086000 	.word	0x40086000

1a001844 <gpioWrite>:

}


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001844:	b510      	push	{r4, lr}
1a001846:	b084      	sub	sp, #16
1a001848:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00184a:	2300      	movs	r3, #0
1a00184c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001850:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001854:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001858:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00185c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001860:	f10d 030b 	add.w	r3, sp, #11
1a001864:	9301      	str	r3, [sp, #4]
1a001866:	ab03      	add	r3, sp, #12
1a001868:	9300      	str	r3, [sp, #0]
1a00186a:	f10d 030d 	add.w	r3, sp, #13
1a00186e:	f10d 020e 	add.w	r2, sp, #14
1a001872:	f10d 010f 	add.w	r1, sp, #15
1a001876:	f7ff ff01 	bl	1a00167c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00187a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00187e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001882:	3400      	adds	r4, #0
1a001884:	bf18      	it	ne
1a001886:	2401      	movne	r4, #1
1a001888:	015b      	lsls	r3, r3, #5
1a00188a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00188e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001892:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a001894:	2001      	movs	r0, #1
1a001896:	b004      	add	sp, #16
1a001898:	bd10      	pop	{r4, pc}

1a00189a <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00189a:	b500      	push	{lr}
1a00189c:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00189e:	2300      	movs	r3, #0
1a0018a0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0018a4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0018a8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0018ac:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0018b0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0018b4:	f10d 030b 	add.w	r3, sp, #11
1a0018b8:	9301      	str	r3, [sp, #4]
1a0018ba:	ab03      	add	r3, sp, #12
1a0018bc:	9300      	str	r3, [sp, #0]
1a0018be:	f10d 030d 	add.w	r3, sp, #13
1a0018c2:	f10d 020e 	add.w	r2, sp, #14
1a0018c6:	f10d 010f 	add.w	r1, sp, #15
1a0018ca:	f7ff fed7 	bl	1a00167c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0018ce:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0018d2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a0018d6:	015b      	lsls	r3, r3, #5
1a0018d8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0018dc:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0018e0:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0018e2:	3000      	adds	r0, #0
1a0018e4:	bf18      	it	ne
1a0018e6:	2001      	movne	r0, #1
1a0018e8:	b005      	add	sp, #20
1a0018ea:	f85d fb04 	ldr.w	pc, [sp], #4

1a0018ee <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a0018ee:	b510      	push	{r4, lr}
1a0018f0:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a0018f2:	f7ff ffd2 	bl	1a00189a <gpioRead>
1a0018f6:	fab0 f180 	clz	r1, r0
1a0018fa:	0949      	lsrs	r1, r1, #5
1a0018fc:	4620      	mov	r0, r4
1a0018fe:	f7ff ffa1 	bl	1a001844 <gpioWrite>
}
1a001902:	bd10      	pop	{r4, pc}

1a001904 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001904:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001906:	4b04      	ldr	r3, [pc, #16]	; (1a001918 <USB0_IRQHandler+0x14>)
1a001908:	681b      	ldr	r3, [r3, #0]
1a00190a:	681b      	ldr	r3, [r3, #0]
1a00190c:	68db      	ldr	r3, [r3, #12]
1a00190e:	4a03      	ldr	r2, [pc, #12]	; (1a00191c <USB0_IRQHandler+0x18>)
1a001910:	6810      	ldr	r0, [r2, #0]
1a001912:	4798      	blx	r3
}
1a001914:	bd08      	pop	{r3, pc}
1a001916:	bf00      	nop
1a001918:	10000178 	.word	0x10000178
1a00191c:	1000015c 	.word	0x1000015c

1a001920 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001920:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001922:	f7ff fb11 	bl	1a000f48 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001926:	4b3a      	ldr	r3, [pc, #232]	; (1a001a10 <boardInit+0xf0>)
1a001928:	6818      	ldr	r0, [r3, #0]
1a00192a:	f7ff fc77 	bl	1a00121c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00192e:	2001      	movs	r0, #1
1a001930:	2100      	movs	r1, #0
1a001932:	f7ff fdc5 	bl	1a0014c0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001936:	2105      	movs	r1, #5
1a001938:	2000      	movs	r0, #0
1a00193a:	f7ff feb9 	bl	1a0016b0 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00193e:	2100      	movs	r1, #0
1a001940:	2026      	movs	r0, #38	; 0x26
1a001942:	f7ff feb5 	bl	1a0016b0 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001946:	2100      	movs	r1, #0
1a001948:	2027      	movs	r0, #39	; 0x27
1a00194a:	f7ff feb1 	bl	1a0016b0 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00194e:	2100      	movs	r1, #0
1a001950:	2028      	movs	r0, #40	; 0x28
1a001952:	f7ff fead 	bl	1a0016b0 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001956:	2100      	movs	r1, #0
1a001958:	2029      	movs	r0, #41	; 0x29
1a00195a:	f7ff fea9 	bl	1a0016b0 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00195e:	2101      	movs	r1, #1
1a001960:	202a      	movs	r0, #42	; 0x2a
1a001962:	f7ff fea5 	bl	1a0016b0 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001966:	2101      	movs	r1, #1
1a001968:	202b      	movs	r0, #43	; 0x2b
1a00196a:	f7ff fea1 	bl	1a0016b0 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00196e:	2101      	movs	r1, #1
1a001970:	202c      	movs	r0, #44	; 0x2c
1a001972:	f7ff fe9d 	bl	1a0016b0 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001976:	2101      	movs	r1, #1
1a001978:	202d      	movs	r0, #45	; 0x2d
1a00197a:	f7ff fe99 	bl	1a0016b0 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00197e:	2101      	movs	r1, #1
1a001980:	202e      	movs	r0, #46	; 0x2e
1a001982:	f7ff fe95 	bl	1a0016b0 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001986:	2101      	movs	r1, #1
1a001988:	202f      	movs	r0, #47	; 0x2f
1a00198a:	f7ff fe91 	bl	1a0016b0 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00198e:	2100      	movs	r1, #0
1a001990:	2030      	movs	r0, #48	; 0x30
1a001992:	f7ff fe8d 	bl	1a0016b0 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a001996:	2100      	movs	r1, #0
1a001998:	2031      	movs	r0, #49	; 0x31
1a00199a:	f7ff fe89 	bl	1a0016b0 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00199e:	2100      	movs	r1, #0
1a0019a0:	2032      	movs	r0, #50	; 0x32
1a0019a2:	f7ff fe85 	bl	1a0016b0 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0019a6:	2100      	movs	r1, #0
1a0019a8:	2033      	movs	r0, #51	; 0x33
1a0019aa:	f7ff fe81 	bl	1a0016b0 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0019ae:	2100      	movs	r1, #0
1a0019b0:	2034      	movs	r0, #52	; 0x34
1a0019b2:	f7ff fe7d 	bl	1a0016b0 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0019b6:	2100      	movs	r1, #0
1a0019b8:	2035      	movs	r0, #53	; 0x35
1a0019ba:	f7ff fe79 	bl	1a0016b0 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0019be:	2100      	movs	r1, #0
1a0019c0:	2036      	movs	r0, #54	; 0x36
1a0019c2:	f7ff fe75 	bl	1a0016b0 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0019c6:	2100      	movs	r1, #0
1a0019c8:	2037      	movs	r0, #55	; 0x37
1a0019ca:	f7ff fe71 	bl	1a0016b0 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0019ce:	2101      	movs	r1, #1
1a0019d0:	2038      	movs	r0, #56	; 0x38
1a0019d2:	f7ff fe6d 	bl	1a0016b0 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0019d6:	2101      	movs	r1, #1
1a0019d8:	2039      	movs	r0, #57	; 0x39
1a0019da:	f7ff fe69 	bl	1a0016b0 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0019de:	2101      	movs	r1, #1
1a0019e0:	203a      	movs	r0, #58	; 0x3a
1a0019e2:	f7ff fe65 	bl	1a0016b0 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0019e6:	2101      	movs	r1, #1
1a0019e8:	203b      	movs	r0, #59	; 0x3b
1a0019ea:	f7ff fe61 	bl	1a0016b0 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0019ee:	2101      	movs	r1, #1
1a0019f0:	203c      	movs	r0, #60	; 0x3c
1a0019f2:	f7ff fe5d 	bl	1a0016b0 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0019f6:	2101      	movs	r1, #1
1a0019f8:	203d      	movs	r0, #61	; 0x3d
1a0019fa:	f7ff fe59 	bl	1a0016b0 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0019fe:	2101      	movs	r1, #1
1a001a00:	203e      	movs	r0, #62	; 0x3e
1a001a02:	f7ff fe55 	bl	1a0016b0 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001a06:	2101      	movs	r1, #1
1a001a08:	203f      	movs	r0, #63	; 0x3f
1a001a0a:	f7ff fe51 	bl	1a0016b0 <gpioInit>

}
1a001a0e:	bd08      	pop	{r3, pc}
1a001a10:	10000168 	.word	0x10000168

1a001a14 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a001a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001a18:	4680      	mov	r8, r0
1a001a1a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001a1c:	f7ff fd3e 	bl	1a00149c <tickRead>
1a001a20:	4606      	mov	r6, r0
1a001a22:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001a24:	f7ff fd3a 	bl	1a00149c <tickRead>
1a001a28:	1b84      	subs	r4, r0, r6
1a001a2a:	eb61 0507 	sbc.w	r5, r1, r7
1a001a2e:	4b06      	ldr	r3, [pc, #24]	; (1a001a48 <delay+0x34>)
1a001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001a34:	4640      	mov	r0, r8
1a001a36:	4649      	mov	r1, r9
1a001a38:	f000 f84e 	bl	1a001ad8 <__aeabi_uldivmod>
1a001a3c:	428d      	cmp	r5, r1
1a001a3e:	bf08      	it	eq
1a001a40:	4284      	cmpeq	r4, r0
1a001a42:	d3ef      	bcc.n	1a001a24 <delay+0x10>
}
1a001a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001a48:	10000170 	.word	0x10000170

1a001a4c <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001a4c:	2301      	movs	r3, #1
1a001a4e:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001a52:	4b01      	ldr	r3, [pc, #4]	; (1a001a58 <clearInterrupt+0xc>)
1a001a54:	6258      	str	r0, [r3, #36]	; 0x24
}
1a001a56:	4770      	bx	lr
1a001a58:	40087000 	.word	0x40087000

1a001a5c <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a001a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001a5e:	4b12      	ldr	r3, [pc, #72]	; (1a001aa8 <serveInterrupt+0x4c>)
1a001a60:	5c1a      	ldrb	r2, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a001a62:	4b12      	ldr	r3, [pc, #72]	; (1a001aac <serveInterrupt+0x50>)
1a001a64:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001a66:	2301      	movs	r3, #1
1a001a68:	4083      	lsls	r3, r0
1a001a6a:	420b      	tst	r3, r1
1a001a6c:	d111      	bne.n	1a001a92 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001a6e:	4910      	ldr	r1, [pc, #64]	; (1a001ab0 <serveInterrupt+0x54>)
1a001a70:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001a72:	4d10      	ldr	r5, [pc, #64]	; (1a001ab4 <serveInterrupt+0x58>)
1a001a74:	0051      	lsls	r1, r2, #1
1a001a76:	188f      	adds	r7, r1, r2
1a001a78:	00fc      	lsls	r4, r7, #3
1a001a7a:	4627      	mov	r7, r4
1a001a7c:	442c      	add	r4, r5
1a001a7e:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001a80:	6864      	ldr	r4, [r4, #4]
1a001a82:	1b36      	subs	r6, r6, r4
1a001a84:	443d      	add	r5, r7
1a001a86:	60ee      	str	r6, [r5, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a001a88:	4a08      	ldr	r2, [pc, #32]	; (1a001aac <serveInterrupt+0x50>)
1a001a8a:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001a8c:	f7ff ffde 	bl	1a001a4c <clearInterrupt>
}
1a001a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001a92:	4907      	ldr	r1, [pc, #28]	; (1a001ab0 <serveInterrupt+0x54>)
1a001a94:	688c      	ldr	r4, [r1, #8]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001a96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a001a9a:	00d1      	lsls	r1, r2, #3
1a001a9c:	4a05      	ldr	r2, [pc, #20]	; (1a001ab4 <serveInterrupt+0x58>)
1a001a9e:	440a      	add	r2, r1
1a001aa0:	6054      	str	r4, [r2, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a001aa2:	4a02      	ldr	r2, [pc, #8]	; (1a001aac <serveInterrupt+0x50>)
1a001aa4:	61d3      	str	r3, [r2, #28]
1a001aa6:	e7f1      	b.n	1a001a8c <serveInterrupt+0x30>
1a001aa8:	1a002ed0 	.word	0x1a002ed0
1a001aac:	40087000 	.word	0x40087000
1a001ab0:	40084000 	.word	0x40084000
1a001ab4:	1000007c 	.word	0x1000007c

1a001ab8 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a001ab8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001aba:	2000      	movs	r0, #0
1a001abc:	f7ff ffce 	bl	1a001a5c <serveInterrupt>
}
1a001ac0:	bd08      	pop	{r3, pc}

1a001ac2 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a001ac2:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a001ac4:	2001      	movs	r0, #1
1a001ac6:	f7ff ffc9 	bl	1a001a5c <serveInterrupt>
}
1a001aca:	bd08      	pop	{r3, pc}

1a001acc <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a001acc:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001ace:	2002      	movs	r0, #2
1a001ad0:	f7ff ffc4 	bl	1a001a5c <serveInterrupt>
}
1a001ad4:	bd08      	pop	{r3, pc}
1a001ad6:	Address 0x000000001a001ad6 is out of bounds.


1a001ad8 <__aeabi_uldivmod>:
1a001ad8:	b953      	cbnz	r3, 1a001af0 <__aeabi_uldivmod+0x18>
1a001ada:	b94a      	cbnz	r2, 1a001af0 <__aeabi_uldivmod+0x18>
1a001adc:	2900      	cmp	r1, #0
1a001ade:	bf08      	it	eq
1a001ae0:	2800      	cmpeq	r0, #0
1a001ae2:	bf1c      	itt	ne
1a001ae4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001ae8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001aec:	f000 b972 	b.w	1a001dd4 <__aeabi_idiv0>
1a001af0:	f1ad 0c08 	sub.w	ip, sp, #8
1a001af4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001af8:	f000 f806 	bl	1a001b08 <__udivmoddi4>
1a001afc:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001b04:	b004      	add	sp, #16
1a001b06:	4770      	bx	lr

1a001b08 <__udivmoddi4>:
1a001b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001b0c:	9e08      	ldr	r6, [sp, #32]
1a001b0e:	4604      	mov	r4, r0
1a001b10:	4688      	mov	r8, r1
1a001b12:	2b00      	cmp	r3, #0
1a001b14:	d14b      	bne.n	1a001bae <__udivmoddi4+0xa6>
1a001b16:	428a      	cmp	r2, r1
1a001b18:	4615      	mov	r5, r2
1a001b1a:	d967      	bls.n	1a001bec <__udivmoddi4+0xe4>
1a001b1c:	fab2 f282 	clz	r2, r2
1a001b20:	b14a      	cbz	r2, 1a001b36 <__udivmoddi4+0x2e>
1a001b22:	f1c2 0720 	rsb	r7, r2, #32
1a001b26:	fa01 f302 	lsl.w	r3, r1, r2
1a001b2a:	fa20 f707 	lsr.w	r7, r0, r7
1a001b2e:	4095      	lsls	r5, r2
1a001b30:	ea47 0803 	orr.w	r8, r7, r3
1a001b34:	4094      	lsls	r4, r2
1a001b36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001b3a:	0c23      	lsrs	r3, r4, #16
1a001b3c:	fbb8 f7fe 	udiv	r7, r8, lr
1a001b40:	fa1f fc85 	uxth.w	ip, r5
1a001b44:	fb0e 8817 	mls	r8, lr, r7, r8
1a001b48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001b4c:	fb07 f10c 	mul.w	r1, r7, ip
1a001b50:	4299      	cmp	r1, r3
1a001b52:	d909      	bls.n	1a001b68 <__udivmoddi4+0x60>
1a001b54:	18eb      	adds	r3, r5, r3
1a001b56:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a001b5a:	f080 811b 	bcs.w	1a001d94 <__udivmoddi4+0x28c>
1a001b5e:	4299      	cmp	r1, r3
1a001b60:	f240 8118 	bls.w	1a001d94 <__udivmoddi4+0x28c>
1a001b64:	3f02      	subs	r7, #2
1a001b66:	442b      	add	r3, r5
1a001b68:	1a5b      	subs	r3, r3, r1
1a001b6a:	b2a4      	uxth	r4, r4
1a001b6c:	fbb3 f0fe 	udiv	r0, r3, lr
1a001b70:	fb0e 3310 	mls	r3, lr, r0, r3
1a001b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001b78:	fb00 fc0c 	mul.w	ip, r0, ip
1a001b7c:	45a4      	cmp	ip, r4
1a001b7e:	d909      	bls.n	1a001b94 <__udivmoddi4+0x8c>
1a001b80:	192c      	adds	r4, r5, r4
1a001b82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001b86:	f080 8107 	bcs.w	1a001d98 <__udivmoddi4+0x290>
1a001b8a:	45a4      	cmp	ip, r4
1a001b8c:	f240 8104 	bls.w	1a001d98 <__udivmoddi4+0x290>
1a001b90:	3802      	subs	r0, #2
1a001b92:	442c      	add	r4, r5
1a001b94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001b98:	eba4 040c 	sub.w	r4, r4, ip
1a001b9c:	2700      	movs	r7, #0
1a001b9e:	b11e      	cbz	r6, 1a001ba8 <__udivmoddi4+0xa0>
1a001ba0:	40d4      	lsrs	r4, r2
1a001ba2:	2300      	movs	r3, #0
1a001ba4:	e9c6 4300 	strd	r4, r3, [r6]
1a001ba8:	4639      	mov	r1, r7
1a001baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001bae:	428b      	cmp	r3, r1
1a001bb0:	d909      	bls.n	1a001bc6 <__udivmoddi4+0xbe>
1a001bb2:	2e00      	cmp	r6, #0
1a001bb4:	f000 80eb 	beq.w	1a001d8e <__udivmoddi4+0x286>
1a001bb8:	2700      	movs	r7, #0
1a001bba:	e9c6 0100 	strd	r0, r1, [r6]
1a001bbe:	4638      	mov	r0, r7
1a001bc0:	4639      	mov	r1, r7
1a001bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001bc6:	fab3 f783 	clz	r7, r3
1a001bca:	2f00      	cmp	r7, #0
1a001bcc:	d147      	bne.n	1a001c5e <__udivmoddi4+0x156>
1a001bce:	428b      	cmp	r3, r1
1a001bd0:	d302      	bcc.n	1a001bd8 <__udivmoddi4+0xd0>
1a001bd2:	4282      	cmp	r2, r0
1a001bd4:	f200 80fa 	bhi.w	1a001dcc <__udivmoddi4+0x2c4>
1a001bd8:	1a84      	subs	r4, r0, r2
1a001bda:	eb61 0303 	sbc.w	r3, r1, r3
1a001bde:	2001      	movs	r0, #1
1a001be0:	4698      	mov	r8, r3
1a001be2:	2e00      	cmp	r6, #0
1a001be4:	d0e0      	beq.n	1a001ba8 <__udivmoddi4+0xa0>
1a001be6:	e9c6 4800 	strd	r4, r8, [r6]
1a001bea:	e7dd      	b.n	1a001ba8 <__udivmoddi4+0xa0>
1a001bec:	b902      	cbnz	r2, 1a001bf0 <__udivmoddi4+0xe8>
1a001bee:	deff      	udf	#255	; 0xff
1a001bf0:	fab2 f282 	clz	r2, r2
1a001bf4:	2a00      	cmp	r2, #0
1a001bf6:	f040 808f 	bne.w	1a001d18 <__udivmoddi4+0x210>
1a001bfa:	1b49      	subs	r1, r1, r5
1a001bfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001c00:	fa1f f885 	uxth.w	r8, r5
1a001c04:	2701      	movs	r7, #1
1a001c06:	fbb1 fcfe 	udiv	ip, r1, lr
1a001c0a:	0c23      	lsrs	r3, r4, #16
1a001c0c:	fb0e 111c 	mls	r1, lr, ip, r1
1a001c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001c14:	fb08 f10c 	mul.w	r1, r8, ip
1a001c18:	4299      	cmp	r1, r3
1a001c1a:	d907      	bls.n	1a001c2c <__udivmoddi4+0x124>
1a001c1c:	18eb      	adds	r3, r5, r3
1a001c1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001c22:	d202      	bcs.n	1a001c2a <__udivmoddi4+0x122>
1a001c24:	4299      	cmp	r1, r3
1a001c26:	f200 80cd 	bhi.w	1a001dc4 <__udivmoddi4+0x2bc>
1a001c2a:	4684      	mov	ip, r0
1a001c2c:	1a59      	subs	r1, r3, r1
1a001c2e:	b2a3      	uxth	r3, r4
1a001c30:	fbb1 f0fe 	udiv	r0, r1, lr
1a001c34:	fb0e 1410 	mls	r4, lr, r0, r1
1a001c38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001c3c:	fb08 f800 	mul.w	r8, r8, r0
1a001c40:	45a0      	cmp	r8, r4
1a001c42:	d907      	bls.n	1a001c54 <__udivmoddi4+0x14c>
1a001c44:	192c      	adds	r4, r5, r4
1a001c46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001c4a:	d202      	bcs.n	1a001c52 <__udivmoddi4+0x14a>
1a001c4c:	45a0      	cmp	r8, r4
1a001c4e:	f200 80b6 	bhi.w	1a001dbe <__udivmoddi4+0x2b6>
1a001c52:	4618      	mov	r0, r3
1a001c54:	eba4 0408 	sub.w	r4, r4, r8
1a001c58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001c5c:	e79f      	b.n	1a001b9e <__udivmoddi4+0x96>
1a001c5e:	f1c7 0c20 	rsb	ip, r7, #32
1a001c62:	40bb      	lsls	r3, r7
1a001c64:	fa22 fe0c 	lsr.w	lr, r2, ip
1a001c68:	ea4e 0e03 	orr.w	lr, lr, r3
1a001c6c:	fa01 f407 	lsl.w	r4, r1, r7
1a001c70:	fa20 f50c 	lsr.w	r5, r0, ip
1a001c74:	fa21 f30c 	lsr.w	r3, r1, ip
1a001c78:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a001c7c:	4325      	orrs	r5, r4
1a001c7e:	fbb3 f9f8 	udiv	r9, r3, r8
1a001c82:	0c2c      	lsrs	r4, r5, #16
1a001c84:	fb08 3319 	mls	r3, r8, r9, r3
1a001c88:	fa1f fa8e 	uxth.w	sl, lr
1a001c8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a001c90:	fb09 f40a 	mul.w	r4, r9, sl
1a001c94:	429c      	cmp	r4, r3
1a001c96:	fa02 f207 	lsl.w	r2, r2, r7
1a001c9a:	fa00 f107 	lsl.w	r1, r0, r7
1a001c9e:	d90b      	bls.n	1a001cb8 <__udivmoddi4+0x1b0>
1a001ca0:	eb1e 0303 	adds.w	r3, lr, r3
1a001ca4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001ca8:	f080 8087 	bcs.w	1a001dba <__udivmoddi4+0x2b2>
1a001cac:	429c      	cmp	r4, r3
1a001cae:	f240 8084 	bls.w	1a001dba <__udivmoddi4+0x2b2>
1a001cb2:	f1a9 0902 	sub.w	r9, r9, #2
1a001cb6:	4473      	add	r3, lr
1a001cb8:	1b1b      	subs	r3, r3, r4
1a001cba:	b2ad      	uxth	r5, r5
1a001cbc:	fbb3 f0f8 	udiv	r0, r3, r8
1a001cc0:	fb08 3310 	mls	r3, r8, r0, r3
1a001cc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a001cc8:	fb00 fa0a 	mul.w	sl, r0, sl
1a001ccc:	45a2      	cmp	sl, r4
1a001cce:	d908      	bls.n	1a001ce2 <__udivmoddi4+0x1da>
1a001cd0:	eb1e 0404 	adds.w	r4, lr, r4
1a001cd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001cd8:	d26b      	bcs.n	1a001db2 <__udivmoddi4+0x2aa>
1a001cda:	45a2      	cmp	sl, r4
1a001cdc:	d969      	bls.n	1a001db2 <__udivmoddi4+0x2aa>
1a001cde:	3802      	subs	r0, #2
1a001ce0:	4474      	add	r4, lr
1a001ce2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001ce6:	fba0 8902 	umull	r8, r9, r0, r2
1a001cea:	eba4 040a 	sub.w	r4, r4, sl
1a001cee:	454c      	cmp	r4, r9
1a001cf0:	46c2      	mov	sl, r8
1a001cf2:	464b      	mov	r3, r9
1a001cf4:	d354      	bcc.n	1a001da0 <__udivmoddi4+0x298>
1a001cf6:	d051      	beq.n	1a001d9c <__udivmoddi4+0x294>
1a001cf8:	2e00      	cmp	r6, #0
1a001cfa:	d069      	beq.n	1a001dd0 <__udivmoddi4+0x2c8>
1a001cfc:	ebb1 050a 	subs.w	r5, r1, sl
1a001d00:	eb64 0403 	sbc.w	r4, r4, r3
1a001d04:	fa04 fc0c 	lsl.w	ip, r4, ip
1a001d08:	40fd      	lsrs	r5, r7
1a001d0a:	40fc      	lsrs	r4, r7
1a001d0c:	ea4c 0505 	orr.w	r5, ip, r5
1a001d10:	e9c6 5400 	strd	r5, r4, [r6]
1a001d14:	2700      	movs	r7, #0
1a001d16:	e747      	b.n	1a001ba8 <__udivmoddi4+0xa0>
1a001d18:	f1c2 0320 	rsb	r3, r2, #32
1a001d1c:	fa20 f703 	lsr.w	r7, r0, r3
1a001d20:	4095      	lsls	r5, r2
1a001d22:	fa01 f002 	lsl.w	r0, r1, r2
1a001d26:	fa21 f303 	lsr.w	r3, r1, r3
1a001d2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001d2e:	4338      	orrs	r0, r7
1a001d30:	0c01      	lsrs	r1, r0, #16
1a001d32:	fbb3 f7fe 	udiv	r7, r3, lr
1a001d36:	fa1f f885 	uxth.w	r8, r5
1a001d3a:	fb0e 3317 	mls	r3, lr, r7, r3
1a001d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001d42:	fb07 f308 	mul.w	r3, r7, r8
1a001d46:	428b      	cmp	r3, r1
1a001d48:	fa04 f402 	lsl.w	r4, r4, r2
1a001d4c:	d907      	bls.n	1a001d5e <__udivmoddi4+0x256>
1a001d4e:	1869      	adds	r1, r5, r1
1a001d50:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a001d54:	d22f      	bcs.n	1a001db6 <__udivmoddi4+0x2ae>
1a001d56:	428b      	cmp	r3, r1
1a001d58:	d92d      	bls.n	1a001db6 <__udivmoddi4+0x2ae>
1a001d5a:	3f02      	subs	r7, #2
1a001d5c:	4429      	add	r1, r5
1a001d5e:	1acb      	subs	r3, r1, r3
1a001d60:	b281      	uxth	r1, r0
1a001d62:	fbb3 f0fe 	udiv	r0, r3, lr
1a001d66:	fb0e 3310 	mls	r3, lr, r0, r3
1a001d6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001d6e:	fb00 f308 	mul.w	r3, r0, r8
1a001d72:	428b      	cmp	r3, r1
1a001d74:	d907      	bls.n	1a001d86 <__udivmoddi4+0x27e>
1a001d76:	1869      	adds	r1, r5, r1
1a001d78:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a001d7c:	d217      	bcs.n	1a001dae <__udivmoddi4+0x2a6>
1a001d7e:	428b      	cmp	r3, r1
1a001d80:	d915      	bls.n	1a001dae <__udivmoddi4+0x2a6>
1a001d82:	3802      	subs	r0, #2
1a001d84:	4429      	add	r1, r5
1a001d86:	1ac9      	subs	r1, r1, r3
1a001d88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a001d8c:	e73b      	b.n	1a001c06 <__udivmoddi4+0xfe>
1a001d8e:	4637      	mov	r7, r6
1a001d90:	4630      	mov	r0, r6
1a001d92:	e709      	b.n	1a001ba8 <__udivmoddi4+0xa0>
1a001d94:	4607      	mov	r7, r0
1a001d96:	e6e7      	b.n	1a001b68 <__udivmoddi4+0x60>
1a001d98:	4618      	mov	r0, r3
1a001d9a:	e6fb      	b.n	1a001b94 <__udivmoddi4+0x8c>
1a001d9c:	4541      	cmp	r1, r8
1a001d9e:	d2ab      	bcs.n	1a001cf8 <__udivmoddi4+0x1f0>
1a001da0:	ebb8 0a02 	subs.w	sl, r8, r2
1a001da4:	eb69 020e 	sbc.w	r2, r9, lr
1a001da8:	3801      	subs	r0, #1
1a001daa:	4613      	mov	r3, r2
1a001dac:	e7a4      	b.n	1a001cf8 <__udivmoddi4+0x1f0>
1a001dae:	4660      	mov	r0, ip
1a001db0:	e7e9      	b.n	1a001d86 <__udivmoddi4+0x27e>
1a001db2:	4618      	mov	r0, r3
1a001db4:	e795      	b.n	1a001ce2 <__udivmoddi4+0x1da>
1a001db6:	4667      	mov	r7, ip
1a001db8:	e7d1      	b.n	1a001d5e <__udivmoddi4+0x256>
1a001dba:	4681      	mov	r9, r0
1a001dbc:	e77c      	b.n	1a001cb8 <__udivmoddi4+0x1b0>
1a001dbe:	3802      	subs	r0, #2
1a001dc0:	442c      	add	r4, r5
1a001dc2:	e747      	b.n	1a001c54 <__udivmoddi4+0x14c>
1a001dc4:	f1ac 0c02 	sub.w	ip, ip, #2
1a001dc8:	442b      	add	r3, r5
1a001dca:	e72f      	b.n	1a001c2c <__udivmoddi4+0x124>
1a001dcc:	4638      	mov	r0, r7
1a001dce:	e708      	b.n	1a001be2 <__udivmoddi4+0xda>
1a001dd0:	4637      	mov	r7, r6
1a001dd2:	e6e9      	b.n	1a001ba8 <__udivmoddi4+0xa0>

1a001dd4 <__aeabi_idiv0>:
1a001dd4:	4770      	bx	lr
1a001dd6:	bf00      	nop

1a001dd8 <__libc_init_array>:
1a001dd8:	b570      	push	{r4, r5, r6, lr}
1a001dda:	4e0d      	ldr	r6, [pc, #52]	; (1a001e10 <__libc_init_array+0x38>)
1a001ddc:	4c0d      	ldr	r4, [pc, #52]	; (1a001e14 <__libc_init_array+0x3c>)
1a001dde:	1ba4      	subs	r4, r4, r6
1a001de0:	10a4      	asrs	r4, r4, #2
1a001de2:	2500      	movs	r5, #0
1a001de4:	42a5      	cmp	r5, r4
1a001de6:	d109      	bne.n	1a001dfc <__libc_init_array+0x24>
1a001de8:	4e0b      	ldr	r6, [pc, #44]	; (1a001e18 <__libc_init_array+0x40>)
1a001dea:	4c0c      	ldr	r4, [pc, #48]	; (1a001e1c <__libc_init_array+0x44>)
1a001dec:	f7fe faf9 	bl	1a0003e2 <_init>
1a001df0:	1ba4      	subs	r4, r4, r6
1a001df2:	10a4      	asrs	r4, r4, #2
1a001df4:	2500      	movs	r5, #0
1a001df6:	42a5      	cmp	r5, r4
1a001df8:	d105      	bne.n	1a001e06 <__libc_init_array+0x2e>
1a001dfa:	bd70      	pop	{r4, r5, r6, pc}
1a001dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001e00:	4798      	blx	r3
1a001e02:	3501      	adds	r5, #1
1a001e04:	e7ee      	b.n	1a001de4 <__libc_init_array+0xc>
1a001e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001e0a:	4798      	blx	r3
1a001e0c:	3501      	adds	r5, #1
1a001e0e:	e7f2      	b.n	1a001df6 <__libc_init_array+0x1e>
1a001e10:	1a002f6c 	.word	0x1a002f6c
1a001e14:	1a002f6c 	.word	0x1a002f6c
1a001e18:	1a002f6c 	.word	0x1a002f6c
1a001e1c:	1a002f70 	.word	0x1a002f70

1a001e20 <memset>:
1a001e20:	4402      	add	r2, r0
1a001e22:	4603      	mov	r3, r0
1a001e24:	4293      	cmp	r3, r2
1a001e26:	d100      	bne.n	1a001e2a <memset+0xa>
1a001e28:	4770      	bx	lr
1a001e2a:	f803 1b01 	strb.w	r1, [r3], #1
1a001e2e:	e7f9      	b.n	1a001e24 <memset+0x4>

1a001e30 <iprintf>:
1a001e30:	b40f      	push	{r0, r1, r2, r3}
1a001e32:	4b0a      	ldr	r3, [pc, #40]	; (1a001e5c <iprintf+0x2c>)
1a001e34:	b513      	push	{r0, r1, r4, lr}
1a001e36:	681c      	ldr	r4, [r3, #0]
1a001e38:	b124      	cbz	r4, 1a001e44 <iprintf+0x14>
1a001e3a:	69a3      	ldr	r3, [r4, #24]
1a001e3c:	b913      	cbnz	r3, 1a001e44 <iprintf+0x14>
1a001e3e:	4620      	mov	r0, r4
1a001e40:	f000 f9be 	bl	1a0021c0 <__sinit>
1a001e44:	ab05      	add	r3, sp, #20
1a001e46:	9a04      	ldr	r2, [sp, #16]
1a001e48:	68a1      	ldr	r1, [r4, #8]
1a001e4a:	9301      	str	r3, [sp, #4]
1a001e4c:	4620      	mov	r0, r4
1a001e4e:	f000 fb77 	bl	1a002540 <_vfiprintf_r>
1a001e52:	b002      	add	sp, #8
1a001e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001e58:	b004      	add	sp, #16
1a001e5a:	4770      	bx	lr
1a001e5c:	100000c4 	.word	0x100000c4

1a001e60 <__swbuf_r>:
1a001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001e62:	460e      	mov	r6, r1
1a001e64:	4614      	mov	r4, r2
1a001e66:	4605      	mov	r5, r0
1a001e68:	b118      	cbz	r0, 1a001e72 <__swbuf_r+0x12>
1a001e6a:	6983      	ldr	r3, [r0, #24]
1a001e6c:	b90b      	cbnz	r3, 1a001e72 <__swbuf_r+0x12>
1a001e6e:	f000 f9a7 	bl	1a0021c0 <__sinit>
1a001e72:	4b21      	ldr	r3, [pc, #132]	; (1a001ef8 <__swbuf_r+0x98>)
1a001e74:	429c      	cmp	r4, r3
1a001e76:	d12a      	bne.n	1a001ece <__swbuf_r+0x6e>
1a001e78:	686c      	ldr	r4, [r5, #4]
1a001e7a:	69a3      	ldr	r3, [r4, #24]
1a001e7c:	60a3      	str	r3, [r4, #8]
1a001e7e:	89a3      	ldrh	r3, [r4, #12]
1a001e80:	071a      	lsls	r2, r3, #28
1a001e82:	d52e      	bpl.n	1a001ee2 <__swbuf_r+0x82>
1a001e84:	6923      	ldr	r3, [r4, #16]
1a001e86:	b363      	cbz	r3, 1a001ee2 <__swbuf_r+0x82>
1a001e88:	6923      	ldr	r3, [r4, #16]
1a001e8a:	6820      	ldr	r0, [r4, #0]
1a001e8c:	1ac0      	subs	r0, r0, r3
1a001e8e:	6963      	ldr	r3, [r4, #20]
1a001e90:	b2f6      	uxtb	r6, r6
1a001e92:	4283      	cmp	r3, r0
1a001e94:	4637      	mov	r7, r6
1a001e96:	dc04      	bgt.n	1a001ea2 <__swbuf_r+0x42>
1a001e98:	4621      	mov	r1, r4
1a001e9a:	4628      	mov	r0, r5
1a001e9c:	f000 f926 	bl	1a0020ec <_fflush_r>
1a001ea0:	bb28      	cbnz	r0, 1a001eee <__swbuf_r+0x8e>
1a001ea2:	68a3      	ldr	r3, [r4, #8]
1a001ea4:	3b01      	subs	r3, #1
1a001ea6:	60a3      	str	r3, [r4, #8]
1a001ea8:	6823      	ldr	r3, [r4, #0]
1a001eaa:	1c5a      	adds	r2, r3, #1
1a001eac:	6022      	str	r2, [r4, #0]
1a001eae:	701e      	strb	r6, [r3, #0]
1a001eb0:	6963      	ldr	r3, [r4, #20]
1a001eb2:	3001      	adds	r0, #1
1a001eb4:	4283      	cmp	r3, r0
1a001eb6:	d004      	beq.n	1a001ec2 <__swbuf_r+0x62>
1a001eb8:	89a3      	ldrh	r3, [r4, #12]
1a001eba:	07db      	lsls	r3, r3, #31
1a001ebc:	d519      	bpl.n	1a001ef2 <__swbuf_r+0x92>
1a001ebe:	2e0a      	cmp	r6, #10
1a001ec0:	d117      	bne.n	1a001ef2 <__swbuf_r+0x92>
1a001ec2:	4621      	mov	r1, r4
1a001ec4:	4628      	mov	r0, r5
1a001ec6:	f000 f911 	bl	1a0020ec <_fflush_r>
1a001eca:	b190      	cbz	r0, 1a001ef2 <__swbuf_r+0x92>
1a001ecc:	e00f      	b.n	1a001eee <__swbuf_r+0x8e>
1a001ece:	4b0b      	ldr	r3, [pc, #44]	; (1a001efc <__swbuf_r+0x9c>)
1a001ed0:	429c      	cmp	r4, r3
1a001ed2:	d101      	bne.n	1a001ed8 <__swbuf_r+0x78>
1a001ed4:	68ac      	ldr	r4, [r5, #8]
1a001ed6:	e7d0      	b.n	1a001e7a <__swbuf_r+0x1a>
1a001ed8:	4b09      	ldr	r3, [pc, #36]	; (1a001f00 <__swbuf_r+0xa0>)
1a001eda:	429c      	cmp	r4, r3
1a001edc:	bf08      	it	eq
1a001ede:	68ec      	ldreq	r4, [r5, #12]
1a001ee0:	e7cb      	b.n	1a001e7a <__swbuf_r+0x1a>
1a001ee2:	4621      	mov	r1, r4
1a001ee4:	4628      	mov	r0, r5
1a001ee6:	f000 f80d 	bl	1a001f04 <__swsetup_r>
1a001eea:	2800      	cmp	r0, #0
1a001eec:	d0cc      	beq.n	1a001e88 <__swbuf_r+0x28>
1a001eee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a001ef2:	4638      	mov	r0, r7
1a001ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001ef6:	bf00      	nop
1a001ef8:	1a002ef4 	.word	0x1a002ef4
1a001efc:	1a002f14 	.word	0x1a002f14
1a001f00:	1a002ed4 	.word	0x1a002ed4

1a001f04 <__swsetup_r>:
1a001f04:	4b32      	ldr	r3, [pc, #200]	; (1a001fd0 <__swsetup_r+0xcc>)
1a001f06:	b570      	push	{r4, r5, r6, lr}
1a001f08:	681d      	ldr	r5, [r3, #0]
1a001f0a:	4606      	mov	r6, r0
1a001f0c:	460c      	mov	r4, r1
1a001f0e:	b125      	cbz	r5, 1a001f1a <__swsetup_r+0x16>
1a001f10:	69ab      	ldr	r3, [r5, #24]
1a001f12:	b913      	cbnz	r3, 1a001f1a <__swsetup_r+0x16>
1a001f14:	4628      	mov	r0, r5
1a001f16:	f000 f953 	bl	1a0021c0 <__sinit>
1a001f1a:	4b2e      	ldr	r3, [pc, #184]	; (1a001fd4 <__swsetup_r+0xd0>)
1a001f1c:	429c      	cmp	r4, r3
1a001f1e:	d10f      	bne.n	1a001f40 <__swsetup_r+0x3c>
1a001f20:	686c      	ldr	r4, [r5, #4]
1a001f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001f26:	b29a      	uxth	r2, r3
1a001f28:	0715      	lsls	r5, r2, #28
1a001f2a:	d42c      	bmi.n	1a001f86 <__swsetup_r+0x82>
1a001f2c:	06d0      	lsls	r0, r2, #27
1a001f2e:	d411      	bmi.n	1a001f54 <__swsetup_r+0x50>
1a001f30:	2209      	movs	r2, #9
1a001f32:	6032      	str	r2, [r6, #0]
1a001f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001f38:	81a3      	strh	r3, [r4, #12]
1a001f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001f3e:	e03e      	b.n	1a001fbe <__swsetup_r+0xba>
1a001f40:	4b25      	ldr	r3, [pc, #148]	; (1a001fd8 <__swsetup_r+0xd4>)
1a001f42:	429c      	cmp	r4, r3
1a001f44:	d101      	bne.n	1a001f4a <__swsetup_r+0x46>
1a001f46:	68ac      	ldr	r4, [r5, #8]
1a001f48:	e7eb      	b.n	1a001f22 <__swsetup_r+0x1e>
1a001f4a:	4b24      	ldr	r3, [pc, #144]	; (1a001fdc <__swsetup_r+0xd8>)
1a001f4c:	429c      	cmp	r4, r3
1a001f4e:	bf08      	it	eq
1a001f50:	68ec      	ldreq	r4, [r5, #12]
1a001f52:	e7e6      	b.n	1a001f22 <__swsetup_r+0x1e>
1a001f54:	0751      	lsls	r1, r2, #29
1a001f56:	d512      	bpl.n	1a001f7e <__swsetup_r+0x7a>
1a001f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001f5a:	b141      	cbz	r1, 1a001f6e <__swsetup_r+0x6a>
1a001f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001f60:	4299      	cmp	r1, r3
1a001f62:	d002      	beq.n	1a001f6a <__swsetup_r+0x66>
1a001f64:	4630      	mov	r0, r6
1a001f66:	f000 fa19 	bl	1a00239c <_free_r>
1a001f6a:	2300      	movs	r3, #0
1a001f6c:	6363      	str	r3, [r4, #52]	; 0x34
1a001f6e:	89a3      	ldrh	r3, [r4, #12]
1a001f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a001f74:	81a3      	strh	r3, [r4, #12]
1a001f76:	2300      	movs	r3, #0
1a001f78:	6063      	str	r3, [r4, #4]
1a001f7a:	6923      	ldr	r3, [r4, #16]
1a001f7c:	6023      	str	r3, [r4, #0]
1a001f7e:	89a3      	ldrh	r3, [r4, #12]
1a001f80:	f043 0308 	orr.w	r3, r3, #8
1a001f84:	81a3      	strh	r3, [r4, #12]
1a001f86:	6923      	ldr	r3, [r4, #16]
1a001f88:	b94b      	cbnz	r3, 1a001f9e <__swsetup_r+0x9a>
1a001f8a:	89a3      	ldrh	r3, [r4, #12]
1a001f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a001f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001f94:	d003      	beq.n	1a001f9e <__swsetup_r+0x9a>
1a001f96:	4621      	mov	r1, r4
1a001f98:	4630      	mov	r0, r6
1a001f9a:	f000 f9bf 	bl	1a00231c <__smakebuf_r>
1a001f9e:	89a2      	ldrh	r2, [r4, #12]
1a001fa0:	f012 0301 	ands.w	r3, r2, #1
1a001fa4:	d00c      	beq.n	1a001fc0 <__swsetup_r+0xbc>
1a001fa6:	2300      	movs	r3, #0
1a001fa8:	60a3      	str	r3, [r4, #8]
1a001faa:	6963      	ldr	r3, [r4, #20]
1a001fac:	425b      	negs	r3, r3
1a001fae:	61a3      	str	r3, [r4, #24]
1a001fb0:	6923      	ldr	r3, [r4, #16]
1a001fb2:	b953      	cbnz	r3, 1a001fca <__swsetup_r+0xc6>
1a001fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001fb8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a001fbc:	d1ba      	bne.n	1a001f34 <__swsetup_r+0x30>
1a001fbe:	bd70      	pop	{r4, r5, r6, pc}
1a001fc0:	0792      	lsls	r2, r2, #30
1a001fc2:	bf58      	it	pl
1a001fc4:	6963      	ldrpl	r3, [r4, #20]
1a001fc6:	60a3      	str	r3, [r4, #8]
1a001fc8:	e7f2      	b.n	1a001fb0 <__swsetup_r+0xac>
1a001fca:	2000      	movs	r0, #0
1a001fcc:	e7f7      	b.n	1a001fbe <__swsetup_r+0xba>
1a001fce:	bf00      	nop
1a001fd0:	100000c4 	.word	0x100000c4
1a001fd4:	1a002ef4 	.word	0x1a002ef4
1a001fd8:	1a002f14 	.word	0x1a002f14
1a001fdc:	1a002ed4 	.word	0x1a002ed4

1a001fe0 <__sflush_r>:
1a001fe0:	898a      	ldrh	r2, [r1, #12]
1a001fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001fe6:	4605      	mov	r5, r0
1a001fe8:	0710      	lsls	r0, r2, #28
1a001fea:	460c      	mov	r4, r1
1a001fec:	d458      	bmi.n	1a0020a0 <__sflush_r+0xc0>
1a001fee:	684b      	ldr	r3, [r1, #4]
1a001ff0:	2b00      	cmp	r3, #0
1a001ff2:	dc05      	bgt.n	1a002000 <__sflush_r+0x20>
1a001ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a001ff6:	2b00      	cmp	r3, #0
1a001ff8:	dc02      	bgt.n	1a002000 <__sflush_r+0x20>
1a001ffa:	2000      	movs	r0, #0
1a001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002002:	2e00      	cmp	r6, #0
1a002004:	d0f9      	beq.n	1a001ffa <__sflush_r+0x1a>
1a002006:	2300      	movs	r3, #0
1a002008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a00200c:	682f      	ldr	r7, [r5, #0]
1a00200e:	6a21      	ldr	r1, [r4, #32]
1a002010:	602b      	str	r3, [r5, #0]
1a002012:	d032      	beq.n	1a00207a <__sflush_r+0x9a>
1a002014:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002016:	89a3      	ldrh	r3, [r4, #12]
1a002018:	075a      	lsls	r2, r3, #29
1a00201a:	d505      	bpl.n	1a002028 <__sflush_r+0x48>
1a00201c:	6863      	ldr	r3, [r4, #4]
1a00201e:	1ac0      	subs	r0, r0, r3
1a002020:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002022:	b10b      	cbz	r3, 1a002028 <__sflush_r+0x48>
1a002024:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002026:	1ac0      	subs	r0, r0, r3
1a002028:	2300      	movs	r3, #0
1a00202a:	4602      	mov	r2, r0
1a00202c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00202e:	6a21      	ldr	r1, [r4, #32]
1a002030:	4628      	mov	r0, r5
1a002032:	47b0      	blx	r6
1a002034:	1c43      	adds	r3, r0, #1
1a002036:	89a3      	ldrh	r3, [r4, #12]
1a002038:	d106      	bne.n	1a002048 <__sflush_r+0x68>
1a00203a:	6829      	ldr	r1, [r5, #0]
1a00203c:	291d      	cmp	r1, #29
1a00203e:	d848      	bhi.n	1a0020d2 <__sflush_r+0xf2>
1a002040:	4a29      	ldr	r2, [pc, #164]	; (1a0020e8 <__sflush_r+0x108>)
1a002042:	40ca      	lsrs	r2, r1
1a002044:	07d6      	lsls	r6, r2, #31
1a002046:	d544      	bpl.n	1a0020d2 <__sflush_r+0xf2>
1a002048:	2200      	movs	r2, #0
1a00204a:	6062      	str	r2, [r4, #4]
1a00204c:	04d9      	lsls	r1, r3, #19
1a00204e:	6922      	ldr	r2, [r4, #16]
1a002050:	6022      	str	r2, [r4, #0]
1a002052:	d504      	bpl.n	1a00205e <__sflush_r+0x7e>
1a002054:	1c42      	adds	r2, r0, #1
1a002056:	d101      	bne.n	1a00205c <__sflush_r+0x7c>
1a002058:	682b      	ldr	r3, [r5, #0]
1a00205a:	b903      	cbnz	r3, 1a00205e <__sflush_r+0x7e>
1a00205c:	6560      	str	r0, [r4, #84]	; 0x54
1a00205e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002060:	602f      	str	r7, [r5, #0]
1a002062:	2900      	cmp	r1, #0
1a002064:	d0c9      	beq.n	1a001ffa <__sflush_r+0x1a>
1a002066:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00206a:	4299      	cmp	r1, r3
1a00206c:	d002      	beq.n	1a002074 <__sflush_r+0x94>
1a00206e:	4628      	mov	r0, r5
1a002070:	f000 f994 	bl	1a00239c <_free_r>
1a002074:	2000      	movs	r0, #0
1a002076:	6360      	str	r0, [r4, #52]	; 0x34
1a002078:	e7c0      	b.n	1a001ffc <__sflush_r+0x1c>
1a00207a:	2301      	movs	r3, #1
1a00207c:	4628      	mov	r0, r5
1a00207e:	47b0      	blx	r6
1a002080:	1c41      	adds	r1, r0, #1
1a002082:	d1c8      	bne.n	1a002016 <__sflush_r+0x36>
1a002084:	682b      	ldr	r3, [r5, #0]
1a002086:	2b00      	cmp	r3, #0
1a002088:	d0c5      	beq.n	1a002016 <__sflush_r+0x36>
1a00208a:	2b1d      	cmp	r3, #29
1a00208c:	d001      	beq.n	1a002092 <__sflush_r+0xb2>
1a00208e:	2b16      	cmp	r3, #22
1a002090:	d101      	bne.n	1a002096 <__sflush_r+0xb6>
1a002092:	602f      	str	r7, [r5, #0]
1a002094:	e7b1      	b.n	1a001ffa <__sflush_r+0x1a>
1a002096:	89a3      	ldrh	r3, [r4, #12]
1a002098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00209c:	81a3      	strh	r3, [r4, #12]
1a00209e:	e7ad      	b.n	1a001ffc <__sflush_r+0x1c>
1a0020a0:	690f      	ldr	r7, [r1, #16]
1a0020a2:	2f00      	cmp	r7, #0
1a0020a4:	d0a9      	beq.n	1a001ffa <__sflush_r+0x1a>
1a0020a6:	0793      	lsls	r3, r2, #30
1a0020a8:	680e      	ldr	r6, [r1, #0]
1a0020aa:	bf08      	it	eq
1a0020ac:	694b      	ldreq	r3, [r1, #20]
1a0020ae:	600f      	str	r7, [r1, #0]
1a0020b0:	bf18      	it	ne
1a0020b2:	2300      	movne	r3, #0
1a0020b4:	eba6 0807 	sub.w	r8, r6, r7
1a0020b8:	608b      	str	r3, [r1, #8]
1a0020ba:	f1b8 0f00 	cmp.w	r8, #0
1a0020be:	dd9c      	ble.n	1a001ffa <__sflush_r+0x1a>
1a0020c0:	4643      	mov	r3, r8
1a0020c2:	463a      	mov	r2, r7
1a0020c4:	6a21      	ldr	r1, [r4, #32]
1a0020c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0020c8:	4628      	mov	r0, r5
1a0020ca:	47b0      	blx	r6
1a0020cc:	2800      	cmp	r0, #0
1a0020ce:	dc06      	bgt.n	1a0020de <__sflush_r+0xfe>
1a0020d0:	89a3      	ldrh	r3, [r4, #12]
1a0020d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0020d6:	81a3      	strh	r3, [r4, #12]
1a0020d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0020dc:	e78e      	b.n	1a001ffc <__sflush_r+0x1c>
1a0020de:	4407      	add	r7, r0
1a0020e0:	eba8 0800 	sub.w	r8, r8, r0
1a0020e4:	e7e9      	b.n	1a0020ba <__sflush_r+0xda>
1a0020e6:	bf00      	nop
1a0020e8:	20400001 	.word	0x20400001

1a0020ec <_fflush_r>:
1a0020ec:	b538      	push	{r3, r4, r5, lr}
1a0020ee:	690b      	ldr	r3, [r1, #16]
1a0020f0:	4605      	mov	r5, r0
1a0020f2:	460c      	mov	r4, r1
1a0020f4:	b1db      	cbz	r3, 1a00212e <_fflush_r+0x42>
1a0020f6:	b118      	cbz	r0, 1a002100 <_fflush_r+0x14>
1a0020f8:	6983      	ldr	r3, [r0, #24]
1a0020fa:	b90b      	cbnz	r3, 1a002100 <_fflush_r+0x14>
1a0020fc:	f000 f860 	bl	1a0021c0 <__sinit>
1a002100:	4b0c      	ldr	r3, [pc, #48]	; (1a002134 <_fflush_r+0x48>)
1a002102:	429c      	cmp	r4, r3
1a002104:	d109      	bne.n	1a00211a <_fflush_r+0x2e>
1a002106:	686c      	ldr	r4, [r5, #4]
1a002108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00210c:	b17b      	cbz	r3, 1a00212e <_fflush_r+0x42>
1a00210e:	4621      	mov	r1, r4
1a002110:	4628      	mov	r0, r5
1a002112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002116:	f7ff bf63 	b.w	1a001fe0 <__sflush_r>
1a00211a:	4b07      	ldr	r3, [pc, #28]	; (1a002138 <_fflush_r+0x4c>)
1a00211c:	429c      	cmp	r4, r3
1a00211e:	d101      	bne.n	1a002124 <_fflush_r+0x38>
1a002120:	68ac      	ldr	r4, [r5, #8]
1a002122:	e7f1      	b.n	1a002108 <_fflush_r+0x1c>
1a002124:	4b05      	ldr	r3, [pc, #20]	; (1a00213c <_fflush_r+0x50>)
1a002126:	429c      	cmp	r4, r3
1a002128:	bf08      	it	eq
1a00212a:	68ec      	ldreq	r4, [r5, #12]
1a00212c:	e7ec      	b.n	1a002108 <_fflush_r+0x1c>
1a00212e:	2000      	movs	r0, #0
1a002130:	bd38      	pop	{r3, r4, r5, pc}
1a002132:	bf00      	nop
1a002134:	1a002ef4 	.word	0x1a002ef4
1a002138:	1a002f14 	.word	0x1a002f14
1a00213c:	1a002ed4 	.word	0x1a002ed4

1a002140 <std>:
1a002140:	2300      	movs	r3, #0
1a002142:	b510      	push	{r4, lr}
1a002144:	4604      	mov	r4, r0
1a002146:	e9c0 3300 	strd	r3, r3, [r0]
1a00214a:	6083      	str	r3, [r0, #8]
1a00214c:	8181      	strh	r1, [r0, #12]
1a00214e:	6643      	str	r3, [r0, #100]	; 0x64
1a002150:	81c2      	strh	r2, [r0, #14]
1a002152:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a002156:	6183      	str	r3, [r0, #24]
1a002158:	4619      	mov	r1, r3
1a00215a:	2208      	movs	r2, #8
1a00215c:	305c      	adds	r0, #92	; 0x5c
1a00215e:	f7ff fe5f 	bl	1a001e20 <memset>
1a002162:	4b05      	ldr	r3, [pc, #20]	; (1a002178 <std+0x38>)
1a002164:	6263      	str	r3, [r4, #36]	; 0x24
1a002166:	4b05      	ldr	r3, [pc, #20]	; (1a00217c <std+0x3c>)
1a002168:	62a3      	str	r3, [r4, #40]	; 0x28
1a00216a:	4b05      	ldr	r3, [pc, #20]	; (1a002180 <std+0x40>)
1a00216c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00216e:	4b05      	ldr	r3, [pc, #20]	; (1a002184 <std+0x44>)
1a002170:	6224      	str	r4, [r4, #32]
1a002172:	6323      	str	r3, [r4, #48]	; 0x30
1a002174:	bd10      	pop	{r4, pc}
1a002176:	bf00      	nop
1a002178:	1a002a7d 	.word	0x1a002a7d
1a00217c:	1a002a9f 	.word	0x1a002a9f
1a002180:	1a002ad7 	.word	0x1a002ad7
1a002184:	1a002afb 	.word	0x1a002afb

1a002188 <_cleanup_r>:
1a002188:	4901      	ldr	r1, [pc, #4]	; (1a002190 <_cleanup_r+0x8>)
1a00218a:	f000 b885 	b.w	1a002298 <_fwalk_reent>
1a00218e:	bf00      	nop
1a002190:	1a0020ed 	.word	0x1a0020ed

1a002194 <__sfmoreglue>:
1a002194:	b570      	push	{r4, r5, r6, lr}
1a002196:	1e4a      	subs	r2, r1, #1
1a002198:	2568      	movs	r5, #104	; 0x68
1a00219a:	4355      	muls	r5, r2
1a00219c:	460e      	mov	r6, r1
1a00219e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a0021a2:	f000 f949 	bl	1a002438 <_malloc_r>
1a0021a6:	4604      	mov	r4, r0
1a0021a8:	b140      	cbz	r0, 1a0021bc <__sfmoreglue+0x28>
1a0021aa:	2100      	movs	r1, #0
1a0021ac:	e9c0 1600 	strd	r1, r6, [r0]
1a0021b0:	300c      	adds	r0, #12
1a0021b2:	60a0      	str	r0, [r4, #8]
1a0021b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a0021b8:	f7ff fe32 	bl	1a001e20 <memset>
1a0021bc:	4620      	mov	r0, r4
1a0021be:	bd70      	pop	{r4, r5, r6, pc}

1a0021c0 <__sinit>:
1a0021c0:	6983      	ldr	r3, [r0, #24]
1a0021c2:	b510      	push	{r4, lr}
1a0021c4:	4604      	mov	r4, r0
1a0021c6:	bb33      	cbnz	r3, 1a002216 <__sinit+0x56>
1a0021c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a0021cc:	6503      	str	r3, [r0, #80]	; 0x50
1a0021ce:	4b12      	ldr	r3, [pc, #72]	; (1a002218 <__sinit+0x58>)
1a0021d0:	4a12      	ldr	r2, [pc, #72]	; (1a00221c <__sinit+0x5c>)
1a0021d2:	681b      	ldr	r3, [r3, #0]
1a0021d4:	6282      	str	r2, [r0, #40]	; 0x28
1a0021d6:	4298      	cmp	r0, r3
1a0021d8:	bf04      	itt	eq
1a0021da:	2301      	moveq	r3, #1
1a0021dc:	6183      	streq	r3, [r0, #24]
1a0021de:	f000 f81f 	bl	1a002220 <__sfp>
1a0021e2:	6060      	str	r0, [r4, #4]
1a0021e4:	4620      	mov	r0, r4
1a0021e6:	f000 f81b 	bl	1a002220 <__sfp>
1a0021ea:	60a0      	str	r0, [r4, #8]
1a0021ec:	4620      	mov	r0, r4
1a0021ee:	f000 f817 	bl	1a002220 <__sfp>
1a0021f2:	2200      	movs	r2, #0
1a0021f4:	60e0      	str	r0, [r4, #12]
1a0021f6:	2104      	movs	r1, #4
1a0021f8:	6860      	ldr	r0, [r4, #4]
1a0021fa:	f7ff ffa1 	bl	1a002140 <std>
1a0021fe:	2201      	movs	r2, #1
1a002200:	2109      	movs	r1, #9
1a002202:	68a0      	ldr	r0, [r4, #8]
1a002204:	f7ff ff9c 	bl	1a002140 <std>
1a002208:	2202      	movs	r2, #2
1a00220a:	2112      	movs	r1, #18
1a00220c:	68e0      	ldr	r0, [r4, #12]
1a00220e:	f7ff ff97 	bl	1a002140 <std>
1a002212:	2301      	movs	r3, #1
1a002214:	61a3      	str	r3, [r4, #24]
1a002216:	bd10      	pop	{r4, pc}
1a002218:	1a002f34 	.word	0x1a002f34
1a00221c:	1a002189 	.word	0x1a002189

1a002220 <__sfp>:
1a002220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002222:	4b1b      	ldr	r3, [pc, #108]	; (1a002290 <__sfp+0x70>)
1a002224:	681e      	ldr	r6, [r3, #0]
1a002226:	69b3      	ldr	r3, [r6, #24]
1a002228:	4607      	mov	r7, r0
1a00222a:	b913      	cbnz	r3, 1a002232 <__sfp+0x12>
1a00222c:	4630      	mov	r0, r6
1a00222e:	f7ff ffc7 	bl	1a0021c0 <__sinit>
1a002232:	3648      	adds	r6, #72	; 0x48
1a002234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a002238:	3b01      	subs	r3, #1
1a00223a:	d503      	bpl.n	1a002244 <__sfp+0x24>
1a00223c:	6833      	ldr	r3, [r6, #0]
1a00223e:	b133      	cbz	r3, 1a00224e <__sfp+0x2e>
1a002240:	6836      	ldr	r6, [r6, #0]
1a002242:	e7f7      	b.n	1a002234 <__sfp+0x14>
1a002244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a002248:	b16d      	cbz	r5, 1a002266 <__sfp+0x46>
1a00224a:	3468      	adds	r4, #104	; 0x68
1a00224c:	e7f4      	b.n	1a002238 <__sfp+0x18>
1a00224e:	2104      	movs	r1, #4
1a002250:	4638      	mov	r0, r7
1a002252:	f7ff ff9f 	bl	1a002194 <__sfmoreglue>
1a002256:	6030      	str	r0, [r6, #0]
1a002258:	2800      	cmp	r0, #0
1a00225a:	d1f1      	bne.n	1a002240 <__sfp+0x20>
1a00225c:	230c      	movs	r3, #12
1a00225e:	603b      	str	r3, [r7, #0]
1a002260:	4604      	mov	r4, r0
1a002262:	4620      	mov	r0, r4
1a002264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002266:	4b0b      	ldr	r3, [pc, #44]	; (1a002294 <__sfp+0x74>)
1a002268:	6665      	str	r5, [r4, #100]	; 0x64
1a00226a:	e9c4 5500 	strd	r5, r5, [r4]
1a00226e:	60a5      	str	r5, [r4, #8]
1a002270:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a002274:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a002278:	2208      	movs	r2, #8
1a00227a:	4629      	mov	r1, r5
1a00227c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a002280:	f7ff fdce 	bl	1a001e20 <memset>
1a002284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a002288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a00228c:	e7e9      	b.n	1a002262 <__sfp+0x42>
1a00228e:	bf00      	nop
1a002290:	1a002f34 	.word	0x1a002f34
1a002294:	ffff0001 	.word	0xffff0001

1a002298 <_fwalk_reent>:
1a002298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00229c:	4680      	mov	r8, r0
1a00229e:	4689      	mov	r9, r1
1a0022a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a0022a4:	2600      	movs	r6, #0
1a0022a6:	b914      	cbnz	r4, 1a0022ae <_fwalk_reent+0x16>
1a0022a8:	4630      	mov	r0, r6
1a0022aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0022ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a0022b2:	3f01      	subs	r7, #1
1a0022b4:	d501      	bpl.n	1a0022ba <_fwalk_reent+0x22>
1a0022b6:	6824      	ldr	r4, [r4, #0]
1a0022b8:	e7f5      	b.n	1a0022a6 <_fwalk_reent+0xe>
1a0022ba:	89ab      	ldrh	r3, [r5, #12]
1a0022bc:	2b01      	cmp	r3, #1
1a0022be:	d907      	bls.n	1a0022d0 <_fwalk_reent+0x38>
1a0022c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0022c4:	3301      	adds	r3, #1
1a0022c6:	d003      	beq.n	1a0022d0 <_fwalk_reent+0x38>
1a0022c8:	4629      	mov	r1, r5
1a0022ca:	4640      	mov	r0, r8
1a0022cc:	47c8      	blx	r9
1a0022ce:	4306      	orrs	r6, r0
1a0022d0:	3568      	adds	r5, #104	; 0x68
1a0022d2:	e7ee      	b.n	1a0022b2 <_fwalk_reent+0x1a>

1a0022d4 <__swhatbuf_r>:
1a0022d4:	b570      	push	{r4, r5, r6, lr}
1a0022d6:	460e      	mov	r6, r1
1a0022d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0022dc:	2900      	cmp	r1, #0
1a0022de:	b096      	sub	sp, #88	; 0x58
1a0022e0:	4614      	mov	r4, r2
1a0022e2:	461d      	mov	r5, r3
1a0022e4:	da07      	bge.n	1a0022f6 <__swhatbuf_r+0x22>
1a0022e6:	2300      	movs	r3, #0
1a0022e8:	602b      	str	r3, [r5, #0]
1a0022ea:	89b3      	ldrh	r3, [r6, #12]
1a0022ec:	061a      	lsls	r2, r3, #24
1a0022ee:	d410      	bmi.n	1a002312 <__swhatbuf_r+0x3e>
1a0022f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0022f4:	e00e      	b.n	1a002314 <__swhatbuf_r+0x40>
1a0022f6:	466a      	mov	r2, sp
1a0022f8:	f7fe f879 	bl	1a0003ee <_fstat_r>
1a0022fc:	2800      	cmp	r0, #0
1a0022fe:	dbf2      	blt.n	1a0022e6 <__swhatbuf_r+0x12>
1a002300:	9a01      	ldr	r2, [sp, #4]
1a002302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a002306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00230a:	425a      	negs	r2, r3
1a00230c:	415a      	adcs	r2, r3
1a00230e:	602a      	str	r2, [r5, #0]
1a002310:	e7ee      	b.n	1a0022f0 <__swhatbuf_r+0x1c>
1a002312:	2340      	movs	r3, #64	; 0x40
1a002314:	2000      	movs	r0, #0
1a002316:	6023      	str	r3, [r4, #0]
1a002318:	b016      	add	sp, #88	; 0x58
1a00231a:	bd70      	pop	{r4, r5, r6, pc}

1a00231c <__smakebuf_r>:
1a00231c:	898b      	ldrh	r3, [r1, #12]
1a00231e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a002320:	079d      	lsls	r5, r3, #30
1a002322:	4606      	mov	r6, r0
1a002324:	460c      	mov	r4, r1
1a002326:	d507      	bpl.n	1a002338 <__smakebuf_r+0x1c>
1a002328:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00232c:	6023      	str	r3, [r4, #0]
1a00232e:	6123      	str	r3, [r4, #16]
1a002330:	2301      	movs	r3, #1
1a002332:	6163      	str	r3, [r4, #20]
1a002334:	b002      	add	sp, #8
1a002336:	bd70      	pop	{r4, r5, r6, pc}
1a002338:	ab01      	add	r3, sp, #4
1a00233a:	466a      	mov	r2, sp
1a00233c:	f7ff ffca 	bl	1a0022d4 <__swhatbuf_r>
1a002340:	9900      	ldr	r1, [sp, #0]
1a002342:	4605      	mov	r5, r0
1a002344:	4630      	mov	r0, r6
1a002346:	f000 f877 	bl	1a002438 <_malloc_r>
1a00234a:	b948      	cbnz	r0, 1a002360 <__smakebuf_r+0x44>
1a00234c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002350:	059a      	lsls	r2, r3, #22
1a002352:	d4ef      	bmi.n	1a002334 <__smakebuf_r+0x18>
1a002354:	f023 0303 	bic.w	r3, r3, #3
1a002358:	f043 0302 	orr.w	r3, r3, #2
1a00235c:	81a3      	strh	r3, [r4, #12]
1a00235e:	e7e3      	b.n	1a002328 <__smakebuf_r+0xc>
1a002360:	4b0d      	ldr	r3, [pc, #52]	; (1a002398 <__smakebuf_r+0x7c>)
1a002362:	62b3      	str	r3, [r6, #40]	; 0x28
1a002364:	89a3      	ldrh	r3, [r4, #12]
1a002366:	6020      	str	r0, [r4, #0]
1a002368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00236c:	81a3      	strh	r3, [r4, #12]
1a00236e:	9b00      	ldr	r3, [sp, #0]
1a002370:	6163      	str	r3, [r4, #20]
1a002372:	9b01      	ldr	r3, [sp, #4]
1a002374:	6120      	str	r0, [r4, #16]
1a002376:	b15b      	cbz	r3, 1a002390 <__smakebuf_r+0x74>
1a002378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00237c:	4630      	mov	r0, r6
1a00237e:	f7fe f83b 	bl	1a0003f8 <_isatty_r>
1a002382:	b128      	cbz	r0, 1a002390 <__smakebuf_r+0x74>
1a002384:	89a3      	ldrh	r3, [r4, #12]
1a002386:	f023 0303 	bic.w	r3, r3, #3
1a00238a:	f043 0301 	orr.w	r3, r3, #1
1a00238e:	81a3      	strh	r3, [r4, #12]
1a002390:	89a3      	ldrh	r3, [r4, #12]
1a002392:	431d      	orrs	r5, r3
1a002394:	81a5      	strh	r5, [r4, #12]
1a002396:	e7cd      	b.n	1a002334 <__smakebuf_r+0x18>
1a002398:	1a002189 	.word	0x1a002189

1a00239c <_free_r>:
1a00239c:	b538      	push	{r3, r4, r5, lr}
1a00239e:	4605      	mov	r5, r0
1a0023a0:	2900      	cmp	r1, #0
1a0023a2:	d045      	beq.n	1a002430 <_free_r+0x94>
1a0023a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0023a8:	1f0c      	subs	r4, r1, #4
1a0023aa:	2b00      	cmp	r3, #0
1a0023ac:	bfb8      	it	lt
1a0023ae:	18e4      	addlt	r4, r4, r3
1a0023b0:	f000 fbfe 	bl	1a002bb0 <__malloc_lock>
1a0023b4:	4a1f      	ldr	r2, [pc, #124]	; (1a002434 <_free_r+0x98>)
1a0023b6:	6813      	ldr	r3, [r2, #0]
1a0023b8:	4610      	mov	r0, r2
1a0023ba:	b933      	cbnz	r3, 1a0023ca <_free_r+0x2e>
1a0023bc:	6063      	str	r3, [r4, #4]
1a0023be:	6014      	str	r4, [r2, #0]
1a0023c0:	4628      	mov	r0, r5
1a0023c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0023c6:	f000 bbf4 	b.w	1a002bb2 <__malloc_unlock>
1a0023ca:	42a3      	cmp	r3, r4
1a0023cc:	d90c      	bls.n	1a0023e8 <_free_r+0x4c>
1a0023ce:	6821      	ldr	r1, [r4, #0]
1a0023d0:	1862      	adds	r2, r4, r1
1a0023d2:	4293      	cmp	r3, r2
1a0023d4:	bf04      	itt	eq
1a0023d6:	681a      	ldreq	r2, [r3, #0]
1a0023d8:	685b      	ldreq	r3, [r3, #4]
1a0023da:	6063      	str	r3, [r4, #4]
1a0023dc:	bf04      	itt	eq
1a0023de:	1852      	addeq	r2, r2, r1
1a0023e0:	6022      	streq	r2, [r4, #0]
1a0023e2:	6004      	str	r4, [r0, #0]
1a0023e4:	e7ec      	b.n	1a0023c0 <_free_r+0x24>
1a0023e6:	4613      	mov	r3, r2
1a0023e8:	685a      	ldr	r2, [r3, #4]
1a0023ea:	b10a      	cbz	r2, 1a0023f0 <_free_r+0x54>
1a0023ec:	42a2      	cmp	r2, r4
1a0023ee:	d9fa      	bls.n	1a0023e6 <_free_r+0x4a>
1a0023f0:	6819      	ldr	r1, [r3, #0]
1a0023f2:	1858      	adds	r0, r3, r1
1a0023f4:	42a0      	cmp	r0, r4
1a0023f6:	d10b      	bne.n	1a002410 <_free_r+0x74>
1a0023f8:	6820      	ldr	r0, [r4, #0]
1a0023fa:	4401      	add	r1, r0
1a0023fc:	1858      	adds	r0, r3, r1
1a0023fe:	4282      	cmp	r2, r0
1a002400:	6019      	str	r1, [r3, #0]
1a002402:	d1dd      	bne.n	1a0023c0 <_free_r+0x24>
1a002404:	6810      	ldr	r0, [r2, #0]
1a002406:	6852      	ldr	r2, [r2, #4]
1a002408:	605a      	str	r2, [r3, #4]
1a00240a:	4401      	add	r1, r0
1a00240c:	6019      	str	r1, [r3, #0]
1a00240e:	e7d7      	b.n	1a0023c0 <_free_r+0x24>
1a002410:	d902      	bls.n	1a002418 <_free_r+0x7c>
1a002412:	230c      	movs	r3, #12
1a002414:	602b      	str	r3, [r5, #0]
1a002416:	e7d3      	b.n	1a0023c0 <_free_r+0x24>
1a002418:	6820      	ldr	r0, [r4, #0]
1a00241a:	1821      	adds	r1, r4, r0
1a00241c:	428a      	cmp	r2, r1
1a00241e:	bf04      	itt	eq
1a002420:	6811      	ldreq	r1, [r2, #0]
1a002422:	6852      	ldreq	r2, [r2, #4]
1a002424:	6062      	str	r2, [r4, #4]
1a002426:	bf04      	itt	eq
1a002428:	1809      	addeq	r1, r1, r0
1a00242a:	6021      	streq	r1, [r4, #0]
1a00242c:	605c      	str	r4, [r3, #4]
1a00242e:	e7c7      	b.n	1a0023c0 <_free_r+0x24>
1a002430:	bd38      	pop	{r3, r4, r5, pc}
1a002432:	bf00      	nop
1a002434:	10000160 	.word	0x10000160

1a002438 <_malloc_r>:
1a002438:	b570      	push	{r4, r5, r6, lr}
1a00243a:	1ccd      	adds	r5, r1, #3
1a00243c:	f025 0503 	bic.w	r5, r5, #3
1a002440:	3508      	adds	r5, #8
1a002442:	2d0c      	cmp	r5, #12
1a002444:	bf38      	it	cc
1a002446:	250c      	movcc	r5, #12
1a002448:	2d00      	cmp	r5, #0
1a00244a:	4606      	mov	r6, r0
1a00244c:	db01      	blt.n	1a002452 <_malloc_r+0x1a>
1a00244e:	42a9      	cmp	r1, r5
1a002450:	d903      	bls.n	1a00245a <_malloc_r+0x22>
1a002452:	230c      	movs	r3, #12
1a002454:	6033      	str	r3, [r6, #0]
1a002456:	2000      	movs	r0, #0
1a002458:	bd70      	pop	{r4, r5, r6, pc}
1a00245a:	f000 fba9 	bl	1a002bb0 <__malloc_lock>
1a00245e:	4a21      	ldr	r2, [pc, #132]	; (1a0024e4 <_malloc_r+0xac>)
1a002460:	6814      	ldr	r4, [r2, #0]
1a002462:	4621      	mov	r1, r4
1a002464:	b991      	cbnz	r1, 1a00248c <_malloc_r+0x54>
1a002466:	4c20      	ldr	r4, [pc, #128]	; (1a0024e8 <_malloc_r+0xb0>)
1a002468:	6823      	ldr	r3, [r4, #0]
1a00246a:	b91b      	cbnz	r3, 1a002474 <_malloc_r+0x3c>
1a00246c:	4630      	mov	r0, r6
1a00246e:	f7fe f80d 	bl	1a00048c <_sbrk_r>
1a002472:	6020      	str	r0, [r4, #0]
1a002474:	4629      	mov	r1, r5
1a002476:	4630      	mov	r0, r6
1a002478:	f7fe f808 	bl	1a00048c <_sbrk_r>
1a00247c:	1c43      	adds	r3, r0, #1
1a00247e:	d124      	bne.n	1a0024ca <_malloc_r+0x92>
1a002480:	230c      	movs	r3, #12
1a002482:	6033      	str	r3, [r6, #0]
1a002484:	4630      	mov	r0, r6
1a002486:	f000 fb94 	bl	1a002bb2 <__malloc_unlock>
1a00248a:	e7e4      	b.n	1a002456 <_malloc_r+0x1e>
1a00248c:	680b      	ldr	r3, [r1, #0]
1a00248e:	1b5b      	subs	r3, r3, r5
1a002490:	d418      	bmi.n	1a0024c4 <_malloc_r+0x8c>
1a002492:	2b0b      	cmp	r3, #11
1a002494:	d90f      	bls.n	1a0024b6 <_malloc_r+0x7e>
1a002496:	600b      	str	r3, [r1, #0]
1a002498:	50cd      	str	r5, [r1, r3]
1a00249a:	18cc      	adds	r4, r1, r3
1a00249c:	4630      	mov	r0, r6
1a00249e:	f000 fb88 	bl	1a002bb2 <__malloc_unlock>
1a0024a2:	f104 000b 	add.w	r0, r4, #11
1a0024a6:	1d23      	adds	r3, r4, #4
1a0024a8:	f020 0007 	bic.w	r0, r0, #7
1a0024ac:	1ac3      	subs	r3, r0, r3
1a0024ae:	d0d3      	beq.n	1a002458 <_malloc_r+0x20>
1a0024b0:	425a      	negs	r2, r3
1a0024b2:	50e2      	str	r2, [r4, r3]
1a0024b4:	e7d0      	b.n	1a002458 <_malloc_r+0x20>
1a0024b6:	428c      	cmp	r4, r1
1a0024b8:	684b      	ldr	r3, [r1, #4]
1a0024ba:	bf16      	itet	ne
1a0024bc:	6063      	strne	r3, [r4, #4]
1a0024be:	6013      	streq	r3, [r2, #0]
1a0024c0:	460c      	movne	r4, r1
1a0024c2:	e7eb      	b.n	1a00249c <_malloc_r+0x64>
1a0024c4:	460c      	mov	r4, r1
1a0024c6:	6849      	ldr	r1, [r1, #4]
1a0024c8:	e7cc      	b.n	1a002464 <_malloc_r+0x2c>
1a0024ca:	1cc4      	adds	r4, r0, #3
1a0024cc:	f024 0403 	bic.w	r4, r4, #3
1a0024d0:	42a0      	cmp	r0, r4
1a0024d2:	d005      	beq.n	1a0024e0 <_malloc_r+0xa8>
1a0024d4:	1a21      	subs	r1, r4, r0
1a0024d6:	4630      	mov	r0, r6
1a0024d8:	f7fd ffd8 	bl	1a00048c <_sbrk_r>
1a0024dc:	3001      	adds	r0, #1
1a0024de:	d0cf      	beq.n	1a002480 <_malloc_r+0x48>
1a0024e0:	6025      	str	r5, [r4, #0]
1a0024e2:	e7db      	b.n	1a00249c <_malloc_r+0x64>
1a0024e4:	10000160 	.word	0x10000160
1a0024e8:	10000164 	.word	0x10000164

1a0024ec <__sfputc_r>:
1a0024ec:	6893      	ldr	r3, [r2, #8]
1a0024ee:	3b01      	subs	r3, #1
1a0024f0:	2b00      	cmp	r3, #0
1a0024f2:	b410      	push	{r4}
1a0024f4:	6093      	str	r3, [r2, #8]
1a0024f6:	da08      	bge.n	1a00250a <__sfputc_r+0x1e>
1a0024f8:	6994      	ldr	r4, [r2, #24]
1a0024fa:	42a3      	cmp	r3, r4
1a0024fc:	db01      	blt.n	1a002502 <__sfputc_r+0x16>
1a0024fe:	290a      	cmp	r1, #10
1a002500:	d103      	bne.n	1a00250a <__sfputc_r+0x1e>
1a002502:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002506:	f7ff bcab 	b.w	1a001e60 <__swbuf_r>
1a00250a:	6813      	ldr	r3, [r2, #0]
1a00250c:	1c58      	adds	r0, r3, #1
1a00250e:	6010      	str	r0, [r2, #0]
1a002510:	7019      	strb	r1, [r3, #0]
1a002512:	4608      	mov	r0, r1
1a002514:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002518:	4770      	bx	lr

1a00251a <__sfputs_r>:
1a00251a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00251c:	4606      	mov	r6, r0
1a00251e:	460f      	mov	r7, r1
1a002520:	4614      	mov	r4, r2
1a002522:	18d5      	adds	r5, r2, r3
1a002524:	42ac      	cmp	r4, r5
1a002526:	d101      	bne.n	1a00252c <__sfputs_r+0x12>
1a002528:	2000      	movs	r0, #0
1a00252a:	e007      	b.n	1a00253c <__sfputs_r+0x22>
1a00252c:	463a      	mov	r2, r7
1a00252e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a002532:	4630      	mov	r0, r6
1a002534:	f7ff ffda 	bl	1a0024ec <__sfputc_r>
1a002538:	1c43      	adds	r3, r0, #1
1a00253a:	d1f3      	bne.n	1a002524 <__sfputs_r+0xa>
1a00253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00253e:	Address 0x000000001a00253e is out of bounds.


1a002540 <_vfiprintf_r>:
1a002540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002544:	460c      	mov	r4, r1
1a002546:	b09d      	sub	sp, #116	; 0x74
1a002548:	4617      	mov	r7, r2
1a00254a:	461d      	mov	r5, r3
1a00254c:	4606      	mov	r6, r0
1a00254e:	b118      	cbz	r0, 1a002558 <_vfiprintf_r+0x18>
1a002550:	6983      	ldr	r3, [r0, #24]
1a002552:	b90b      	cbnz	r3, 1a002558 <_vfiprintf_r+0x18>
1a002554:	f7ff fe34 	bl	1a0021c0 <__sinit>
1a002558:	4b7c      	ldr	r3, [pc, #496]	; (1a00274c <_vfiprintf_r+0x20c>)
1a00255a:	429c      	cmp	r4, r3
1a00255c:	d158      	bne.n	1a002610 <_vfiprintf_r+0xd0>
1a00255e:	6874      	ldr	r4, [r6, #4]
1a002560:	89a3      	ldrh	r3, [r4, #12]
1a002562:	0718      	lsls	r0, r3, #28
1a002564:	d55e      	bpl.n	1a002624 <_vfiprintf_r+0xe4>
1a002566:	6923      	ldr	r3, [r4, #16]
1a002568:	2b00      	cmp	r3, #0
1a00256a:	d05b      	beq.n	1a002624 <_vfiprintf_r+0xe4>
1a00256c:	2300      	movs	r3, #0
1a00256e:	9309      	str	r3, [sp, #36]	; 0x24
1a002570:	2320      	movs	r3, #32
1a002572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a002576:	2330      	movs	r3, #48	; 0x30
1a002578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00257c:	9503      	str	r5, [sp, #12]
1a00257e:	f04f 0b01 	mov.w	fp, #1
1a002582:	46b8      	mov	r8, r7
1a002584:	4645      	mov	r5, r8
1a002586:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00258a:	b10b      	cbz	r3, 1a002590 <_vfiprintf_r+0x50>
1a00258c:	2b25      	cmp	r3, #37	; 0x25
1a00258e:	d154      	bne.n	1a00263a <_vfiprintf_r+0xfa>
1a002590:	ebb8 0a07 	subs.w	sl, r8, r7
1a002594:	d00b      	beq.n	1a0025ae <_vfiprintf_r+0x6e>
1a002596:	4653      	mov	r3, sl
1a002598:	463a      	mov	r2, r7
1a00259a:	4621      	mov	r1, r4
1a00259c:	4630      	mov	r0, r6
1a00259e:	f7ff ffbc 	bl	1a00251a <__sfputs_r>
1a0025a2:	3001      	adds	r0, #1
1a0025a4:	f000 80c2 	beq.w	1a00272c <_vfiprintf_r+0x1ec>
1a0025a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0025aa:	4453      	add	r3, sl
1a0025ac:	9309      	str	r3, [sp, #36]	; 0x24
1a0025ae:	f898 3000 	ldrb.w	r3, [r8]
1a0025b2:	2b00      	cmp	r3, #0
1a0025b4:	f000 80ba 	beq.w	1a00272c <_vfiprintf_r+0x1ec>
1a0025b8:	2300      	movs	r3, #0
1a0025ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0025be:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0025c2:	9304      	str	r3, [sp, #16]
1a0025c4:	9307      	str	r3, [sp, #28]
1a0025c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0025ca:	931a      	str	r3, [sp, #104]	; 0x68
1a0025cc:	46a8      	mov	r8, r5
1a0025ce:	2205      	movs	r2, #5
1a0025d0:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0025d4:	485e      	ldr	r0, [pc, #376]	; (1a002750 <_vfiprintf_r+0x210>)
1a0025d6:	f000 fa9b 	bl	1a002b10 <memchr>
1a0025da:	9b04      	ldr	r3, [sp, #16]
1a0025dc:	bb78      	cbnz	r0, 1a00263e <_vfiprintf_r+0xfe>
1a0025de:	06d9      	lsls	r1, r3, #27
1a0025e0:	bf44      	itt	mi
1a0025e2:	2220      	movmi	r2, #32
1a0025e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0025e8:	071a      	lsls	r2, r3, #28
1a0025ea:	bf44      	itt	mi
1a0025ec:	222b      	movmi	r2, #43	; 0x2b
1a0025ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0025f2:	782a      	ldrb	r2, [r5, #0]
1a0025f4:	2a2a      	cmp	r2, #42	; 0x2a
1a0025f6:	d02a      	beq.n	1a00264e <_vfiprintf_r+0x10e>
1a0025f8:	9a07      	ldr	r2, [sp, #28]
1a0025fa:	46a8      	mov	r8, r5
1a0025fc:	2000      	movs	r0, #0
1a0025fe:	250a      	movs	r5, #10
1a002600:	4641      	mov	r1, r8
1a002602:	f811 3b01 	ldrb.w	r3, [r1], #1
1a002606:	3b30      	subs	r3, #48	; 0x30
1a002608:	2b09      	cmp	r3, #9
1a00260a:	d969      	bls.n	1a0026e0 <_vfiprintf_r+0x1a0>
1a00260c:	b360      	cbz	r0, 1a002668 <_vfiprintf_r+0x128>
1a00260e:	e024      	b.n	1a00265a <_vfiprintf_r+0x11a>
1a002610:	4b50      	ldr	r3, [pc, #320]	; (1a002754 <_vfiprintf_r+0x214>)
1a002612:	429c      	cmp	r4, r3
1a002614:	d101      	bne.n	1a00261a <_vfiprintf_r+0xda>
1a002616:	68b4      	ldr	r4, [r6, #8]
1a002618:	e7a2      	b.n	1a002560 <_vfiprintf_r+0x20>
1a00261a:	4b4f      	ldr	r3, [pc, #316]	; (1a002758 <_vfiprintf_r+0x218>)
1a00261c:	429c      	cmp	r4, r3
1a00261e:	bf08      	it	eq
1a002620:	68f4      	ldreq	r4, [r6, #12]
1a002622:	e79d      	b.n	1a002560 <_vfiprintf_r+0x20>
1a002624:	4621      	mov	r1, r4
1a002626:	4630      	mov	r0, r6
1a002628:	f7ff fc6c 	bl	1a001f04 <__swsetup_r>
1a00262c:	2800      	cmp	r0, #0
1a00262e:	d09d      	beq.n	1a00256c <_vfiprintf_r+0x2c>
1a002630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002634:	b01d      	add	sp, #116	; 0x74
1a002636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00263a:	46a8      	mov	r8, r5
1a00263c:	e7a2      	b.n	1a002584 <_vfiprintf_r+0x44>
1a00263e:	4a44      	ldr	r2, [pc, #272]	; (1a002750 <_vfiprintf_r+0x210>)
1a002640:	1a80      	subs	r0, r0, r2
1a002642:	fa0b f000 	lsl.w	r0, fp, r0
1a002646:	4318      	orrs	r0, r3
1a002648:	9004      	str	r0, [sp, #16]
1a00264a:	4645      	mov	r5, r8
1a00264c:	e7be      	b.n	1a0025cc <_vfiprintf_r+0x8c>
1a00264e:	9a03      	ldr	r2, [sp, #12]
1a002650:	1d11      	adds	r1, r2, #4
1a002652:	6812      	ldr	r2, [r2, #0]
1a002654:	9103      	str	r1, [sp, #12]
1a002656:	2a00      	cmp	r2, #0
1a002658:	db01      	blt.n	1a00265e <_vfiprintf_r+0x11e>
1a00265a:	9207      	str	r2, [sp, #28]
1a00265c:	e004      	b.n	1a002668 <_vfiprintf_r+0x128>
1a00265e:	4252      	negs	r2, r2
1a002660:	f043 0302 	orr.w	r3, r3, #2
1a002664:	9207      	str	r2, [sp, #28]
1a002666:	9304      	str	r3, [sp, #16]
1a002668:	f898 3000 	ldrb.w	r3, [r8]
1a00266c:	2b2e      	cmp	r3, #46	; 0x2e
1a00266e:	d10e      	bne.n	1a00268e <_vfiprintf_r+0x14e>
1a002670:	f898 3001 	ldrb.w	r3, [r8, #1]
1a002674:	2b2a      	cmp	r3, #42	; 0x2a
1a002676:	d138      	bne.n	1a0026ea <_vfiprintf_r+0x1aa>
1a002678:	9b03      	ldr	r3, [sp, #12]
1a00267a:	1d1a      	adds	r2, r3, #4
1a00267c:	681b      	ldr	r3, [r3, #0]
1a00267e:	9203      	str	r2, [sp, #12]
1a002680:	2b00      	cmp	r3, #0
1a002682:	bfb8      	it	lt
1a002684:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a002688:	f108 0802 	add.w	r8, r8, #2
1a00268c:	9305      	str	r3, [sp, #20]
1a00268e:	4d33      	ldr	r5, [pc, #204]	; (1a00275c <_vfiprintf_r+0x21c>)
1a002690:	f898 1000 	ldrb.w	r1, [r8]
1a002694:	2203      	movs	r2, #3
1a002696:	4628      	mov	r0, r5
1a002698:	f000 fa3a 	bl	1a002b10 <memchr>
1a00269c:	b140      	cbz	r0, 1a0026b0 <_vfiprintf_r+0x170>
1a00269e:	2340      	movs	r3, #64	; 0x40
1a0026a0:	1b40      	subs	r0, r0, r5
1a0026a2:	fa03 f000 	lsl.w	r0, r3, r0
1a0026a6:	9b04      	ldr	r3, [sp, #16]
1a0026a8:	4303      	orrs	r3, r0
1a0026aa:	f108 0801 	add.w	r8, r8, #1
1a0026ae:	9304      	str	r3, [sp, #16]
1a0026b0:	f898 1000 	ldrb.w	r1, [r8]
1a0026b4:	482a      	ldr	r0, [pc, #168]	; (1a002760 <_vfiprintf_r+0x220>)
1a0026b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0026ba:	2206      	movs	r2, #6
1a0026bc:	f108 0701 	add.w	r7, r8, #1
1a0026c0:	f000 fa26 	bl	1a002b10 <memchr>
1a0026c4:	2800      	cmp	r0, #0
1a0026c6:	d037      	beq.n	1a002738 <_vfiprintf_r+0x1f8>
1a0026c8:	4b26      	ldr	r3, [pc, #152]	; (1a002764 <_vfiprintf_r+0x224>)
1a0026ca:	bb1b      	cbnz	r3, 1a002714 <_vfiprintf_r+0x1d4>
1a0026cc:	9b03      	ldr	r3, [sp, #12]
1a0026ce:	3307      	adds	r3, #7
1a0026d0:	f023 0307 	bic.w	r3, r3, #7
1a0026d4:	3308      	adds	r3, #8
1a0026d6:	9303      	str	r3, [sp, #12]
1a0026d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0026da:	444b      	add	r3, r9
1a0026dc:	9309      	str	r3, [sp, #36]	; 0x24
1a0026de:	e750      	b.n	1a002582 <_vfiprintf_r+0x42>
1a0026e0:	fb05 3202 	mla	r2, r5, r2, r3
1a0026e4:	2001      	movs	r0, #1
1a0026e6:	4688      	mov	r8, r1
1a0026e8:	e78a      	b.n	1a002600 <_vfiprintf_r+0xc0>
1a0026ea:	2300      	movs	r3, #0
1a0026ec:	f108 0801 	add.w	r8, r8, #1
1a0026f0:	9305      	str	r3, [sp, #20]
1a0026f2:	4619      	mov	r1, r3
1a0026f4:	250a      	movs	r5, #10
1a0026f6:	4640      	mov	r0, r8
1a0026f8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0026fc:	3a30      	subs	r2, #48	; 0x30
1a0026fe:	2a09      	cmp	r2, #9
1a002700:	d903      	bls.n	1a00270a <_vfiprintf_r+0x1ca>
1a002702:	2b00      	cmp	r3, #0
1a002704:	d0c3      	beq.n	1a00268e <_vfiprintf_r+0x14e>
1a002706:	9105      	str	r1, [sp, #20]
1a002708:	e7c1      	b.n	1a00268e <_vfiprintf_r+0x14e>
1a00270a:	fb05 2101 	mla	r1, r5, r1, r2
1a00270e:	2301      	movs	r3, #1
1a002710:	4680      	mov	r8, r0
1a002712:	e7f0      	b.n	1a0026f6 <_vfiprintf_r+0x1b6>
1a002714:	ab03      	add	r3, sp, #12
1a002716:	9300      	str	r3, [sp, #0]
1a002718:	4622      	mov	r2, r4
1a00271a:	4b13      	ldr	r3, [pc, #76]	; (1a002768 <_vfiprintf_r+0x228>)
1a00271c:	a904      	add	r1, sp, #16
1a00271e:	4630      	mov	r0, r6
1a002720:	f3af 8000 	nop.w
1a002724:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002728:	4681      	mov	r9, r0
1a00272a:	d1d5      	bne.n	1a0026d8 <_vfiprintf_r+0x198>
1a00272c:	89a3      	ldrh	r3, [r4, #12]
1a00272e:	065b      	lsls	r3, r3, #25
1a002730:	f53f af7e 	bmi.w	1a002630 <_vfiprintf_r+0xf0>
1a002734:	9809      	ldr	r0, [sp, #36]	; 0x24
1a002736:	e77d      	b.n	1a002634 <_vfiprintf_r+0xf4>
1a002738:	ab03      	add	r3, sp, #12
1a00273a:	9300      	str	r3, [sp, #0]
1a00273c:	4622      	mov	r2, r4
1a00273e:	4b0a      	ldr	r3, [pc, #40]	; (1a002768 <_vfiprintf_r+0x228>)
1a002740:	a904      	add	r1, sp, #16
1a002742:	4630      	mov	r0, r6
1a002744:	f000 f888 	bl	1a002858 <_printf_i>
1a002748:	e7ec      	b.n	1a002724 <_vfiprintf_r+0x1e4>
1a00274a:	bf00      	nop
1a00274c:	1a002ef4 	.word	0x1a002ef4
1a002750:	1a002f38 	.word	0x1a002f38
1a002754:	1a002f14 	.word	0x1a002f14
1a002758:	1a002ed4 	.word	0x1a002ed4
1a00275c:	1a002f3e 	.word	0x1a002f3e
1a002760:	1a002f42 	.word	0x1a002f42
1a002764:	00000000 	.word	0x00000000
1a002768:	1a00251b 	.word	0x1a00251b

1a00276c <_printf_common>:
1a00276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002770:	4691      	mov	r9, r2
1a002772:	461f      	mov	r7, r3
1a002774:	688a      	ldr	r2, [r1, #8]
1a002776:	690b      	ldr	r3, [r1, #16]
1a002778:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00277c:	4293      	cmp	r3, r2
1a00277e:	bfb8      	it	lt
1a002780:	4613      	movlt	r3, r2
1a002782:	f8c9 3000 	str.w	r3, [r9]
1a002786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00278a:	4606      	mov	r6, r0
1a00278c:	460c      	mov	r4, r1
1a00278e:	b112      	cbz	r2, 1a002796 <_printf_common+0x2a>
1a002790:	3301      	adds	r3, #1
1a002792:	f8c9 3000 	str.w	r3, [r9]
1a002796:	6823      	ldr	r3, [r4, #0]
1a002798:	0699      	lsls	r1, r3, #26
1a00279a:	bf42      	ittt	mi
1a00279c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0027a0:	3302      	addmi	r3, #2
1a0027a2:	f8c9 3000 	strmi.w	r3, [r9]
1a0027a6:	6825      	ldr	r5, [r4, #0]
1a0027a8:	f015 0506 	ands.w	r5, r5, #6
1a0027ac:	d107      	bne.n	1a0027be <_printf_common+0x52>
1a0027ae:	f104 0a19 	add.w	sl, r4, #25
1a0027b2:	68e3      	ldr	r3, [r4, #12]
1a0027b4:	f8d9 2000 	ldr.w	r2, [r9]
1a0027b8:	1a9b      	subs	r3, r3, r2
1a0027ba:	42ab      	cmp	r3, r5
1a0027bc:	dc28      	bgt.n	1a002810 <_printf_common+0xa4>
1a0027be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0027c2:	6822      	ldr	r2, [r4, #0]
1a0027c4:	3300      	adds	r3, #0
1a0027c6:	bf18      	it	ne
1a0027c8:	2301      	movne	r3, #1
1a0027ca:	0692      	lsls	r2, r2, #26
1a0027cc:	d42d      	bmi.n	1a00282a <_printf_common+0xbe>
1a0027ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0027d2:	4639      	mov	r1, r7
1a0027d4:	4630      	mov	r0, r6
1a0027d6:	47c0      	blx	r8
1a0027d8:	3001      	adds	r0, #1
1a0027da:	d020      	beq.n	1a00281e <_printf_common+0xb2>
1a0027dc:	6823      	ldr	r3, [r4, #0]
1a0027de:	68e5      	ldr	r5, [r4, #12]
1a0027e0:	f8d9 2000 	ldr.w	r2, [r9]
1a0027e4:	f003 0306 	and.w	r3, r3, #6
1a0027e8:	2b04      	cmp	r3, #4
1a0027ea:	bf08      	it	eq
1a0027ec:	1aad      	subeq	r5, r5, r2
1a0027ee:	68a3      	ldr	r3, [r4, #8]
1a0027f0:	6922      	ldr	r2, [r4, #16]
1a0027f2:	bf0c      	ite	eq
1a0027f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0027f8:	2500      	movne	r5, #0
1a0027fa:	4293      	cmp	r3, r2
1a0027fc:	bfc4      	itt	gt
1a0027fe:	1a9b      	subgt	r3, r3, r2
1a002800:	18ed      	addgt	r5, r5, r3
1a002802:	f04f 0900 	mov.w	r9, #0
1a002806:	341a      	adds	r4, #26
1a002808:	454d      	cmp	r5, r9
1a00280a:	d11a      	bne.n	1a002842 <_printf_common+0xd6>
1a00280c:	2000      	movs	r0, #0
1a00280e:	e008      	b.n	1a002822 <_printf_common+0xb6>
1a002810:	2301      	movs	r3, #1
1a002812:	4652      	mov	r2, sl
1a002814:	4639      	mov	r1, r7
1a002816:	4630      	mov	r0, r6
1a002818:	47c0      	blx	r8
1a00281a:	3001      	adds	r0, #1
1a00281c:	d103      	bne.n	1a002826 <_printf_common+0xba>
1a00281e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002826:	3501      	adds	r5, #1
1a002828:	e7c3      	b.n	1a0027b2 <_printf_common+0x46>
1a00282a:	18e1      	adds	r1, r4, r3
1a00282c:	1c5a      	adds	r2, r3, #1
1a00282e:	2030      	movs	r0, #48	; 0x30
1a002830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a002834:	4422      	add	r2, r4
1a002836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00283a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00283e:	3302      	adds	r3, #2
1a002840:	e7c5      	b.n	1a0027ce <_printf_common+0x62>
1a002842:	2301      	movs	r3, #1
1a002844:	4622      	mov	r2, r4
1a002846:	4639      	mov	r1, r7
1a002848:	4630      	mov	r0, r6
1a00284a:	47c0      	blx	r8
1a00284c:	3001      	adds	r0, #1
1a00284e:	d0e6      	beq.n	1a00281e <_printf_common+0xb2>
1a002850:	f109 0901 	add.w	r9, r9, #1
1a002854:	e7d8      	b.n	1a002808 <_printf_common+0x9c>
1a002856:	Address 0x000000001a002856 is out of bounds.


1a002858 <_printf_i>:
1a002858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00285c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a002860:	460c      	mov	r4, r1
1a002862:	7e09      	ldrb	r1, [r1, #24]
1a002864:	b085      	sub	sp, #20
1a002866:	296e      	cmp	r1, #110	; 0x6e
1a002868:	4617      	mov	r7, r2
1a00286a:	4606      	mov	r6, r0
1a00286c:	4698      	mov	r8, r3
1a00286e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a002870:	f000 80b3 	beq.w	1a0029da <_printf_i+0x182>
1a002874:	d822      	bhi.n	1a0028bc <_printf_i+0x64>
1a002876:	2963      	cmp	r1, #99	; 0x63
1a002878:	d036      	beq.n	1a0028e8 <_printf_i+0x90>
1a00287a:	d80a      	bhi.n	1a002892 <_printf_i+0x3a>
1a00287c:	2900      	cmp	r1, #0
1a00287e:	f000 80b9 	beq.w	1a0029f4 <_printf_i+0x19c>
1a002882:	2958      	cmp	r1, #88	; 0x58
1a002884:	f000 8083 	beq.w	1a00298e <_printf_i+0x136>
1a002888:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00288c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a002890:	e032      	b.n	1a0028f8 <_printf_i+0xa0>
1a002892:	2964      	cmp	r1, #100	; 0x64
1a002894:	d001      	beq.n	1a00289a <_printf_i+0x42>
1a002896:	2969      	cmp	r1, #105	; 0x69
1a002898:	d1f6      	bne.n	1a002888 <_printf_i+0x30>
1a00289a:	6820      	ldr	r0, [r4, #0]
1a00289c:	6813      	ldr	r3, [r2, #0]
1a00289e:	0605      	lsls	r5, r0, #24
1a0028a0:	f103 0104 	add.w	r1, r3, #4
1a0028a4:	d52a      	bpl.n	1a0028fc <_printf_i+0xa4>
1a0028a6:	681b      	ldr	r3, [r3, #0]
1a0028a8:	6011      	str	r1, [r2, #0]
1a0028aa:	2b00      	cmp	r3, #0
1a0028ac:	da03      	bge.n	1a0028b6 <_printf_i+0x5e>
1a0028ae:	222d      	movs	r2, #45	; 0x2d
1a0028b0:	425b      	negs	r3, r3
1a0028b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0028b6:	486f      	ldr	r0, [pc, #444]	; (1a002a74 <_printf_i+0x21c>)
1a0028b8:	220a      	movs	r2, #10
1a0028ba:	e039      	b.n	1a002930 <_printf_i+0xd8>
1a0028bc:	2973      	cmp	r1, #115	; 0x73
1a0028be:	f000 809d 	beq.w	1a0029fc <_printf_i+0x1a4>
1a0028c2:	d808      	bhi.n	1a0028d6 <_printf_i+0x7e>
1a0028c4:	296f      	cmp	r1, #111	; 0x6f
1a0028c6:	d020      	beq.n	1a00290a <_printf_i+0xb2>
1a0028c8:	2970      	cmp	r1, #112	; 0x70
1a0028ca:	d1dd      	bne.n	1a002888 <_printf_i+0x30>
1a0028cc:	6823      	ldr	r3, [r4, #0]
1a0028ce:	f043 0320 	orr.w	r3, r3, #32
1a0028d2:	6023      	str	r3, [r4, #0]
1a0028d4:	e003      	b.n	1a0028de <_printf_i+0x86>
1a0028d6:	2975      	cmp	r1, #117	; 0x75
1a0028d8:	d017      	beq.n	1a00290a <_printf_i+0xb2>
1a0028da:	2978      	cmp	r1, #120	; 0x78
1a0028dc:	d1d4      	bne.n	1a002888 <_printf_i+0x30>
1a0028de:	2378      	movs	r3, #120	; 0x78
1a0028e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0028e4:	4864      	ldr	r0, [pc, #400]	; (1a002a78 <_printf_i+0x220>)
1a0028e6:	e055      	b.n	1a002994 <_printf_i+0x13c>
1a0028e8:	6813      	ldr	r3, [r2, #0]
1a0028ea:	1d19      	adds	r1, r3, #4
1a0028ec:	681b      	ldr	r3, [r3, #0]
1a0028ee:	6011      	str	r1, [r2, #0]
1a0028f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0028f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0028f8:	2301      	movs	r3, #1
1a0028fa:	e08c      	b.n	1a002a16 <_printf_i+0x1be>
1a0028fc:	681b      	ldr	r3, [r3, #0]
1a0028fe:	6011      	str	r1, [r2, #0]
1a002900:	f010 0f40 	tst.w	r0, #64	; 0x40
1a002904:	bf18      	it	ne
1a002906:	b21b      	sxthne	r3, r3
1a002908:	e7cf      	b.n	1a0028aa <_printf_i+0x52>
1a00290a:	6813      	ldr	r3, [r2, #0]
1a00290c:	6825      	ldr	r5, [r4, #0]
1a00290e:	1d18      	adds	r0, r3, #4
1a002910:	6010      	str	r0, [r2, #0]
1a002912:	0628      	lsls	r0, r5, #24
1a002914:	d501      	bpl.n	1a00291a <_printf_i+0xc2>
1a002916:	681b      	ldr	r3, [r3, #0]
1a002918:	e002      	b.n	1a002920 <_printf_i+0xc8>
1a00291a:	0668      	lsls	r0, r5, #25
1a00291c:	d5fb      	bpl.n	1a002916 <_printf_i+0xbe>
1a00291e:	881b      	ldrh	r3, [r3, #0]
1a002920:	4854      	ldr	r0, [pc, #336]	; (1a002a74 <_printf_i+0x21c>)
1a002922:	296f      	cmp	r1, #111	; 0x6f
1a002924:	bf14      	ite	ne
1a002926:	220a      	movne	r2, #10
1a002928:	2208      	moveq	r2, #8
1a00292a:	2100      	movs	r1, #0
1a00292c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a002930:	6865      	ldr	r5, [r4, #4]
1a002932:	60a5      	str	r5, [r4, #8]
1a002934:	2d00      	cmp	r5, #0
1a002936:	f2c0 8095 	blt.w	1a002a64 <_printf_i+0x20c>
1a00293a:	6821      	ldr	r1, [r4, #0]
1a00293c:	f021 0104 	bic.w	r1, r1, #4
1a002940:	6021      	str	r1, [r4, #0]
1a002942:	2b00      	cmp	r3, #0
1a002944:	d13d      	bne.n	1a0029c2 <_printf_i+0x16a>
1a002946:	2d00      	cmp	r5, #0
1a002948:	f040 808e 	bne.w	1a002a68 <_printf_i+0x210>
1a00294c:	4665      	mov	r5, ip
1a00294e:	2a08      	cmp	r2, #8
1a002950:	d10b      	bne.n	1a00296a <_printf_i+0x112>
1a002952:	6823      	ldr	r3, [r4, #0]
1a002954:	07db      	lsls	r3, r3, #31
1a002956:	d508      	bpl.n	1a00296a <_printf_i+0x112>
1a002958:	6923      	ldr	r3, [r4, #16]
1a00295a:	6862      	ldr	r2, [r4, #4]
1a00295c:	429a      	cmp	r2, r3
1a00295e:	bfde      	ittt	le
1a002960:	2330      	movle	r3, #48	; 0x30
1a002962:	f805 3c01 	strble.w	r3, [r5, #-1]
1a002966:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00296a:	ebac 0305 	sub.w	r3, ip, r5
1a00296e:	6123      	str	r3, [r4, #16]
1a002970:	f8cd 8000 	str.w	r8, [sp]
1a002974:	463b      	mov	r3, r7
1a002976:	aa03      	add	r2, sp, #12
1a002978:	4621      	mov	r1, r4
1a00297a:	4630      	mov	r0, r6
1a00297c:	f7ff fef6 	bl	1a00276c <_printf_common>
1a002980:	3001      	adds	r0, #1
1a002982:	d14d      	bne.n	1a002a20 <_printf_i+0x1c8>
1a002984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002988:	b005      	add	sp, #20
1a00298a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00298e:	4839      	ldr	r0, [pc, #228]	; (1a002a74 <_printf_i+0x21c>)
1a002990:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a002994:	6813      	ldr	r3, [r2, #0]
1a002996:	6821      	ldr	r1, [r4, #0]
1a002998:	1d1d      	adds	r5, r3, #4
1a00299a:	681b      	ldr	r3, [r3, #0]
1a00299c:	6015      	str	r5, [r2, #0]
1a00299e:	060a      	lsls	r2, r1, #24
1a0029a0:	d50b      	bpl.n	1a0029ba <_printf_i+0x162>
1a0029a2:	07ca      	lsls	r2, r1, #31
1a0029a4:	bf44      	itt	mi
1a0029a6:	f041 0120 	orrmi.w	r1, r1, #32
1a0029aa:	6021      	strmi	r1, [r4, #0]
1a0029ac:	b91b      	cbnz	r3, 1a0029b6 <_printf_i+0x15e>
1a0029ae:	6822      	ldr	r2, [r4, #0]
1a0029b0:	f022 0220 	bic.w	r2, r2, #32
1a0029b4:	6022      	str	r2, [r4, #0]
1a0029b6:	2210      	movs	r2, #16
1a0029b8:	e7b7      	b.n	1a00292a <_printf_i+0xd2>
1a0029ba:	064d      	lsls	r5, r1, #25
1a0029bc:	bf48      	it	mi
1a0029be:	b29b      	uxthmi	r3, r3
1a0029c0:	e7ef      	b.n	1a0029a2 <_printf_i+0x14a>
1a0029c2:	4665      	mov	r5, ip
1a0029c4:	fbb3 f1f2 	udiv	r1, r3, r2
1a0029c8:	fb02 3311 	mls	r3, r2, r1, r3
1a0029cc:	5cc3      	ldrb	r3, [r0, r3]
1a0029ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0029d2:	460b      	mov	r3, r1
1a0029d4:	2900      	cmp	r1, #0
1a0029d6:	d1f5      	bne.n	1a0029c4 <_printf_i+0x16c>
1a0029d8:	e7b9      	b.n	1a00294e <_printf_i+0xf6>
1a0029da:	6813      	ldr	r3, [r2, #0]
1a0029dc:	6825      	ldr	r5, [r4, #0]
1a0029de:	6961      	ldr	r1, [r4, #20]
1a0029e0:	1d18      	adds	r0, r3, #4
1a0029e2:	6010      	str	r0, [r2, #0]
1a0029e4:	0628      	lsls	r0, r5, #24
1a0029e6:	681b      	ldr	r3, [r3, #0]
1a0029e8:	d501      	bpl.n	1a0029ee <_printf_i+0x196>
1a0029ea:	6019      	str	r1, [r3, #0]
1a0029ec:	e002      	b.n	1a0029f4 <_printf_i+0x19c>
1a0029ee:	066a      	lsls	r2, r5, #25
1a0029f0:	d5fb      	bpl.n	1a0029ea <_printf_i+0x192>
1a0029f2:	8019      	strh	r1, [r3, #0]
1a0029f4:	2300      	movs	r3, #0
1a0029f6:	6123      	str	r3, [r4, #16]
1a0029f8:	4665      	mov	r5, ip
1a0029fa:	e7b9      	b.n	1a002970 <_printf_i+0x118>
1a0029fc:	6813      	ldr	r3, [r2, #0]
1a0029fe:	1d19      	adds	r1, r3, #4
1a002a00:	6011      	str	r1, [r2, #0]
1a002a02:	681d      	ldr	r5, [r3, #0]
1a002a04:	6862      	ldr	r2, [r4, #4]
1a002a06:	2100      	movs	r1, #0
1a002a08:	4628      	mov	r0, r5
1a002a0a:	f000 f881 	bl	1a002b10 <memchr>
1a002a0e:	b108      	cbz	r0, 1a002a14 <_printf_i+0x1bc>
1a002a10:	1b40      	subs	r0, r0, r5
1a002a12:	6060      	str	r0, [r4, #4]
1a002a14:	6863      	ldr	r3, [r4, #4]
1a002a16:	6123      	str	r3, [r4, #16]
1a002a18:	2300      	movs	r3, #0
1a002a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002a1e:	e7a7      	b.n	1a002970 <_printf_i+0x118>
1a002a20:	6923      	ldr	r3, [r4, #16]
1a002a22:	462a      	mov	r2, r5
1a002a24:	4639      	mov	r1, r7
1a002a26:	4630      	mov	r0, r6
1a002a28:	47c0      	blx	r8
1a002a2a:	3001      	adds	r0, #1
1a002a2c:	d0aa      	beq.n	1a002984 <_printf_i+0x12c>
1a002a2e:	6823      	ldr	r3, [r4, #0]
1a002a30:	079b      	lsls	r3, r3, #30
1a002a32:	d413      	bmi.n	1a002a5c <_printf_i+0x204>
1a002a34:	68e0      	ldr	r0, [r4, #12]
1a002a36:	9b03      	ldr	r3, [sp, #12]
1a002a38:	4298      	cmp	r0, r3
1a002a3a:	bfb8      	it	lt
1a002a3c:	4618      	movlt	r0, r3
1a002a3e:	e7a3      	b.n	1a002988 <_printf_i+0x130>
1a002a40:	2301      	movs	r3, #1
1a002a42:	464a      	mov	r2, r9
1a002a44:	4639      	mov	r1, r7
1a002a46:	4630      	mov	r0, r6
1a002a48:	47c0      	blx	r8
1a002a4a:	3001      	adds	r0, #1
1a002a4c:	d09a      	beq.n	1a002984 <_printf_i+0x12c>
1a002a4e:	3501      	adds	r5, #1
1a002a50:	68e3      	ldr	r3, [r4, #12]
1a002a52:	9a03      	ldr	r2, [sp, #12]
1a002a54:	1a9b      	subs	r3, r3, r2
1a002a56:	42ab      	cmp	r3, r5
1a002a58:	dcf2      	bgt.n	1a002a40 <_printf_i+0x1e8>
1a002a5a:	e7eb      	b.n	1a002a34 <_printf_i+0x1dc>
1a002a5c:	2500      	movs	r5, #0
1a002a5e:	f104 0919 	add.w	r9, r4, #25
1a002a62:	e7f5      	b.n	1a002a50 <_printf_i+0x1f8>
1a002a64:	2b00      	cmp	r3, #0
1a002a66:	d1ac      	bne.n	1a0029c2 <_printf_i+0x16a>
1a002a68:	7803      	ldrb	r3, [r0, #0]
1a002a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a002a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a002a72:	e76c      	b.n	1a00294e <_printf_i+0xf6>
1a002a74:	1a002f49 	.word	0x1a002f49
1a002a78:	1a002f5a 	.word	0x1a002f5a

1a002a7c <__sread>:
1a002a7c:	b510      	push	{r4, lr}
1a002a7e:	460c      	mov	r4, r1
1a002a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002a84:	f7fd fcc6 	bl	1a000414 <_read_r>
1a002a88:	2800      	cmp	r0, #0
1a002a8a:	bfab      	itete	ge
1a002a8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a002a8e:	89a3      	ldrhlt	r3, [r4, #12]
1a002a90:	181b      	addge	r3, r3, r0
1a002a92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a002a96:	bfac      	ite	ge
1a002a98:	6563      	strge	r3, [r4, #84]	; 0x54
1a002a9a:	81a3      	strhlt	r3, [r4, #12]
1a002a9c:	bd10      	pop	{r4, pc}

1a002a9e <__swrite>:
1a002a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002aa2:	461f      	mov	r7, r3
1a002aa4:	898b      	ldrh	r3, [r1, #12]
1a002aa6:	05db      	lsls	r3, r3, #23
1a002aa8:	4605      	mov	r5, r0
1a002aaa:	460c      	mov	r4, r1
1a002aac:	4616      	mov	r6, r2
1a002aae:	d505      	bpl.n	1a002abc <__swrite+0x1e>
1a002ab0:	2302      	movs	r3, #2
1a002ab2:	2200      	movs	r2, #0
1a002ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002ab8:	f7fd fca7 	bl	1a00040a <_lseek_r>
1a002abc:	89a3      	ldrh	r3, [r4, #12]
1a002abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a002ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a002ac6:	81a3      	strh	r3, [r4, #12]
1a002ac8:	4632      	mov	r2, r6
1a002aca:	463b      	mov	r3, r7
1a002acc:	4628      	mov	r0, r5
1a002ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a002ad2:	f7fd bcc6 	b.w	1a000462 <_write_r>

1a002ad6 <__sseek>:
1a002ad6:	b510      	push	{r4, lr}
1a002ad8:	460c      	mov	r4, r1
1a002ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002ade:	f7fd fc94 	bl	1a00040a <_lseek_r>
1a002ae2:	1c43      	adds	r3, r0, #1
1a002ae4:	89a3      	ldrh	r3, [r4, #12]
1a002ae6:	bf15      	itete	ne
1a002ae8:	6560      	strne	r0, [r4, #84]	; 0x54
1a002aea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a002aee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a002af2:	81a3      	strheq	r3, [r4, #12]
1a002af4:	bf18      	it	ne
1a002af6:	81a3      	strhne	r3, [r4, #12]
1a002af8:	bd10      	pop	{r4, pc}

1a002afa <__sclose>:
1a002afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002afe:	f7fd bc71 	b.w	1a0003e4 <_close_r>
1a002b02:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a002b06:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a002b0a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a002b0e:	Address 0x000000001a002b0e is out of bounds.


1a002b10 <memchr>:
1a002b10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a002b14:	2a10      	cmp	r2, #16
1a002b16:	db2b      	blt.n	1a002b70 <memchr+0x60>
1a002b18:	f010 0f07 	tst.w	r0, #7
1a002b1c:	d008      	beq.n	1a002b30 <memchr+0x20>
1a002b1e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002b22:	3a01      	subs	r2, #1
1a002b24:	428b      	cmp	r3, r1
1a002b26:	d02d      	beq.n	1a002b84 <memchr+0x74>
1a002b28:	f010 0f07 	tst.w	r0, #7
1a002b2c:	b342      	cbz	r2, 1a002b80 <memchr+0x70>
1a002b2e:	d1f6      	bne.n	1a002b1e <memchr+0xe>
1a002b30:	b4f0      	push	{r4, r5, r6, r7}
1a002b32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a002b36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a002b3a:	f022 0407 	bic.w	r4, r2, #7
1a002b3e:	f07f 0700 	mvns.w	r7, #0
1a002b42:	2300      	movs	r3, #0
1a002b44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a002b48:	3c08      	subs	r4, #8
1a002b4a:	ea85 0501 	eor.w	r5, r5, r1
1a002b4e:	ea86 0601 	eor.w	r6, r6, r1
1a002b52:	fa85 f547 	uadd8	r5, r5, r7
1a002b56:	faa3 f587 	sel	r5, r3, r7
1a002b5a:	fa86 f647 	uadd8	r6, r6, r7
1a002b5e:	faa5 f687 	sel	r6, r5, r7
1a002b62:	b98e      	cbnz	r6, 1a002b88 <memchr+0x78>
1a002b64:	d1ee      	bne.n	1a002b44 <memchr+0x34>
1a002b66:	bcf0      	pop	{r4, r5, r6, r7}
1a002b68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a002b6c:	f002 0207 	and.w	r2, r2, #7
1a002b70:	b132      	cbz	r2, 1a002b80 <memchr+0x70>
1a002b72:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002b76:	3a01      	subs	r2, #1
1a002b78:	ea83 0301 	eor.w	r3, r3, r1
1a002b7c:	b113      	cbz	r3, 1a002b84 <memchr+0x74>
1a002b7e:	d1f8      	bne.n	1a002b72 <memchr+0x62>
1a002b80:	2000      	movs	r0, #0
1a002b82:	4770      	bx	lr
1a002b84:	3801      	subs	r0, #1
1a002b86:	4770      	bx	lr
1a002b88:	2d00      	cmp	r5, #0
1a002b8a:	bf06      	itte	eq
1a002b8c:	4635      	moveq	r5, r6
1a002b8e:	3803      	subeq	r0, #3
1a002b90:	3807      	subne	r0, #7
1a002b92:	f015 0f01 	tst.w	r5, #1
1a002b96:	d107      	bne.n	1a002ba8 <memchr+0x98>
1a002b98:	3001      	adds	r0, #1
1a002b9a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a002b9e:	bf02      	ittt	eq
1a002ba0:	3001      	addeq	r0, #1
1a002ba2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a002ba6:	3001      	addeq	r0, #1
1a002ba8:	bcf0      	pop	{r4, r5, r6, r7}
1a002baa:	3801      	subs	r0, #1
1a002bac:	4770      	bx	lr
1a002bae:	bf00      	nop

1a002bb0 <__malloc_lock>:
1a002bb0:	4770      	bx	lr

1a002bb2 <__malloc_unlock>:
1a002bb2:	4770      	bx	lr
1a002bb4:	69636552 	.word	0x69636552
1a002bb8:	6f6d6962 	.word	0x6f6d6962
1a002bbc:	3c3c2073 	.word	0x3c3c2073
1a002bc0:	3e3e6325 	.word	0x3e3e6325
1a002bc4:	726f7020 	.word	0x726f7020
1a002bc8:	52415520 	.word	0x52415520
1a002bcc:	000a0d54 	.word	0x000a0d54

1a002bd0 <ExtRateIn>:
1a002bd0:	00000000                                ....

1a002bd4 <GpioButtons>:
1a002bd4:	08000400 09010900                       ........

1a002bdc <GpioLeds>:
1a002bdc:	01050005 0e000205 0c010b01              ............

1a002be8 <GpioPorts>:
1a002be8:	03030003 0f050403 05031005 07030603     ................
1a002bf8:	ffff0802                                ....

1a002bfc <OscRateIn>:
1a002bfc:	00b71b00                                ....

1a002c00 <InitClkStates>:
1a002c00:	01010f01                                ....

1a002c04 <pinmuxing>:
1a002c04:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002c14:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002c24:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002c34:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002c44:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002c54:	00d50301 00d50401 00160107 00560207     ..............V.
1a002c64:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002c74:	00570206                                ..W.

1a002c78 <UART_BClock>:
1a002c78:	01a201c2 01620182                       ......b.

1a002c80 <UART_PClock>:
1a002c80:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002c90:	000000ff                                ....

1a002c94 <periph_to_base>:
1a002c94:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002ca4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002cb4:	000100e0 01000100 01200003 00060120     .......... . ...
1a002cc4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002cd4:	01820013 00120182 01a201a2 01c20011     ................
1a002ce4:	001001c2 01e201e2 0202000f 000e0202     ................
1a002cf4:	02220222 0223000d 001c0223              "."...#.#...

1a002d00 <InitClkStates>:
1a002d00:	00010100 00010909 0001090a 01010701     ................
1a002d10:	00010902 00010906 0101090c 0001090d     ................
1a002d20:	0001090e 0001090f 00010910 00010911     ................
1a002d30:	00010912 00010913 00011114 00011119     ................
1a002d40:	0001111a 0001111b                       ........

1a002d48 <lpcUarts>:
1a002d48:	40081000 06020406 00180205 40081000     ...@...........@
1a002d58:	09070509 00180706 40082000 00000000     ......... .@....
1a002d68:	00190000 400c1000 07060107 001a0602     .......@........
1a002d78:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002d88:	02020302 001b0204                       ........

1a002d90 <gpioPinsInit>:
1a002d90:	00000001 04020204 01040205 07010200     ................
1a002da0:	0d030005 01000501 00020408 03040202     ................
1a002db0:	04030200 00020000 03000407 0402030c     ................
1a002dc0:	01030905 02080504 03050403 05040402     ................
1a002dd0:	000c0604 0b060802 06070300 05030009     ................
1a002de0:	05040706 0004060f 04040303 04040200     ................
1a002df0:	05020005 02000604 04080406 0a040c05     ................
1a002e00:	010e0504 0a000003 00001401 0012010f     ................
1a002e10:	11010d00 010c0000 03000010 03000707     ................
1a002e20:	0001000f 00000100 06000000 0603000a     ................
1a002e30:	05040806 00050610 01060403 04000300     ................
1a002e40:	0d050409 00000401 000f010b 00010200     ................
1a002e50:	01040000 08000001 00000201 00060109     ................
1a002e60:	00020901 02000504 01050401 05040202     ................
1a002e70:	000a0202 0b020e00 020b0100 0c01000c     ................
1a002e80:	02000004 00010400 02040102 04020200     ................
1a002e90:	03020003 03000307 0004070b 05070c03     ................
1a002ea0:	070d0300 0e030006 05040102 00060401     ................
1a002eb0:	05040602 04050200 04020004 05040804     ................
1a002ec0:	0409040c 0a040d05 010e0504 08010005     ................

1a002ed0 <ultrasonicSensorsIrqMap>:
1a002ed0:	ff020100                                ....

1a002ed4 <__sf_fake_stderr>:
	...

1a002ef4 <__sf_fake_stdin>:
	...

1a002f14 <__sf_fake_stdout>:
	...

1a002f34 <_global_impure_ptr>:
1a002f34:	100000c8 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a002f44:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a002f54:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a002f64:	64636261 ff006665                       abcdef..
