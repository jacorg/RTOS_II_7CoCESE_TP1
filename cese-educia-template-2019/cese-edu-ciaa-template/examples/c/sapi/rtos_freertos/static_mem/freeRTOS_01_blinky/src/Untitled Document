#include "FreeRTOS.h"
#include "task.h"
#include "sapi.h"
#include "queue.h"

StackType_t myTaskStack[configMINIMAL_STACK_SIZE];
StackType_t myTaskStack1[configMINIMAL_STACK_SIZE];
StaticTask_t myTaskTCB;
StaticTask_t myTaskTCB1;

QueueHandle_t xPointerQueue;

typedef char str[50];
/*Task send string*/
void myTask( void* taskParmPtr )
{
	char * PcStringToSend;
	const size_t xMaxStringLength = 50 ; /*max number characters*/
	BaseType_t xStringNumber=0;
	BaseType_t xcopy;
   printf( "myTask\r\n" );

   gpioWrite( LED1, ON );
   // Envia la tarea al estado bloqueado durante 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
   gpioWrite( LED1, OFF ); 

   // Tarea periodica cada 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
   
   while(TRUE) {

	  PcStringToSend = pvPortMalloc(xMaxStringLength);
	   snprintf(PcStringToSend,xMaxStringLength,"lalala %d\r\n",xStringNumber); /*lleno buffer a enviar con una variable*/
      gpioToggle( LEDB );
      printf( "Blink!\r\n" );
      xQueueSend(xPointerQueue,&PcStringToSend,portMAX_DELAY);
      // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
      vPortFree(PcStringToSend);
   }
}

/*Task receive*/
void TaskTxUart( void* taskParmPtr ){
char rx[50];
printf( "TaskTxUart\r\n" );
	while(true){
		printf( "si\r\n" );
		xQueueReceive(xPointerQueue,rx,portMAX_DELAY);
		printf( "rx %s\r\n",rx );
	}
}
int main(void)
{
   boardConfig();



   printf( "init\r\n" );
   xTaskCreateStatic( myTask, "myTask", configMINIMAL_STACK_SIZE, NULL,
                     tskIDLE_PRIORITY+1, myTaskStack, &myTaskTCB);
   /*Tarea para transmitir por la Uart*/
   xTaskCreateStatic(TaskTxUart, (const char *)"TaskTxUart",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1,  myTaskStack1, &myTaskTCB1);
   //xPointerQueue = xQueueCreate(1 , sizeof(char *)); /*cola punteros tipo char*/
   xPointerQueue = xQueueCreate(1 , sizeof(str));
   vTaskStartScheduler();

   while(1);

   return 0;
}

